// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Circle.pb.h"
// @@protoc_insertion_point(imports)

@implementation CircleRoot
static id<PBExtensionField> CircleRoot_sendWaveReq = nil;
static id<PBExtensionField> CircleRoot_sendWaveResp = nil;
static id<PBExtensionField> CircleRoot_sendWaveCommentReq = nil;
static id<PBExtensionField> CircleRoot_sendWaveCommentResp = nil;
static id<PBExtensionField> CircleRoot_fetchWaveCommentReq = nil;
static id<PBExtensionField> CircleRoot_fetchWaveCommentResp = nil;
static id<PBExtensionField> CircleRoot_deleteWaveReq = nil;
static id<PBExtensionField> CircleRoot_deleteWaveResp = nil;
static id<PBExtensionField> CircleRoot_deleteWaveCommentReq = nil;
static id<PBExtensionField> CircleRoot_deleteWaveCommentResp = nil;
static id<PBExtensionField> CircleRoot_fetchWavesReq = nil;
static id<PBExtensionField> CircleRoot_fetchWavesResp = nil;
static id<PBExtensionField> CircleRoot_fetchWaveIdsReq = nil;
static id<PBExtensionField> CircleRoot_fetchWaveIdsResp = nil;
static id<PBExtensionField> CircleRoot_fetchWaveCommentIdsReq = nil;
static id<PBExtensionField> CircleRoot_fetchWaveCommentIdsResp = nil;
static id<PBExtensionField> CircleRoot_fetchUserWaveCountReq = nil;
static id<PBExtensionField> CircleRoot_fetchUserWaveCountResp = nil;
static id<PBExtensionField> CircleRoot_fetchWavesAndComentsReq = nil;
static id<PBExtensionField> CircleRoot_fetchWavesAndComentsResp = nil;
static id<PBExtensionField> CircleRoot_sendRedPacketReq = nil;
static id<PBExtensionField> CircleRoot_sendRedPacketResp = nil;
static id<PBExtensionField> CircleRoot_robRedPacketReq = nil;
static id<PBExtensionField> CircleRoot_robRedPacketResp = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketReq = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketResp = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketTicketReq = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketTicketResp = nil;
static id<PBExtensionField> CircleRoot_setRedPacketTicketReceivedReq = nil;
static id<PBExtensionField> CircleRoot_setRedPacketTicketReceivedResp = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketsReq = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketsResp = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketsCountReq = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketCountResp = nil;
static id<PBExtensionField> CircleRoot_fetchAllWavesReq = nil;
static id<PBExtensionField> CircleRoot_fetchAllWavesResp = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketMyTicketCountReq = nil;
static id<PBExtensionField> CircleRoot_fetchRedPacketMyTicketCountResp = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [CircleRoot class]) {
    CircleRoot_sendWaveReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1000
                                      defaultValue:[PBSendWaveReq defaultInstance]
                               messageOrGroupClass:[PBSendWaveReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_sendWaveResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1001
                                      defaultValue:[PBSendWaveResp defaultInstance]
                               messageOrGroupClass:[PBSendWaveResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_sendWaveCommentReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1008
                                      defaultValue:[PBSendWaveCommentReq defaultInstance]
                               messageOrGroupClass:[PBSendWaveCommentReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_sendWaveCommentResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1009
                                      defaultValue:[PBSendWaveCommentResp defaultInstance]
                               messageOrGroupClass:[PBSendWaveCommentResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWaveCommentReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1010
                                      defaultValue:[PBFetchWaveCommentReq defaultInstance]
                               messageOrGroupClass:[PBFetchWaveCommentReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWaveCommentResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1011
                                      defaultValue:[PBFetchWaveCommentResp defaultInstance]
                               messageOrGroupClass:[PBFetchWaveCommentResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_deleteWaveReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1012
                                      defaultValue:[PBDeleteWaveReq defaultInstance]
                               messageOrGroupClass:[PBDeleteWaveReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_deleteWaveResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1013
                                      defaultValue:[PBDeleteWaveResp defaultInstance]
                               messageOrGroupClass:[PBDeleteWaveResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_deleteWaveCommentReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1014
                                      defaultValue:[PBDeleteWaveCommentReq defaultInstance]
                               messageOrGroupClass:[PBDeleteWaveCommentReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_deleteWaveCommentResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1015
                                      defaultValue:[PBDeleteWaveCommentResp defaultInstance]
                               messageOrGroupClass:[PBDeleteWaveCommentResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWavesReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1016
                                      defaultValue:[PBFetchWavesReq defaultInstance]
                               messageOrGroupClass:[PBFetchWavesReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWavesResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1017
                                      defaultValue:[PBFetchWavesResp defaultInstance]
                               messageOrGroupClass:[PBFetchWavesResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWaveIdsReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1018
                                      defaultValue:[PBFetchWaveIdsReq defaultInstance]
                               messageOrGroupClass:[PBFetchWaveIdsReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWaveIdsResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1019
                                      defaultValue:[PBFetchWaveIdsResp defaultInstance]
                               messageOrGroupClass:[PBFetchWaveIdsResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWaveCommentIdsReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1020
                                      defaultValue:[PBFetchWaveCommentIdsReq defaultInstance]
                               messageOrGroupClass:[PBFetchWaveCommentIdsReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWaveCommentIdsResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1021
                                      defaultValue:[PBFetchWaveCommentIdsResp defaultInstance]
                               messageOrGroupClass:[PBFetchWaveCommentIdsResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchUserWaveCountReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1022
                                      defaultValue:[PBFetchUserWaveCountReq defaultInstance]
                               messageOrGroupClass:[PBFetchUserWaveCountReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchUserWaveCountResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1023
                                      defaultValue:[PBFetchUserWaveCountResp defaultInstance]
                               messageOrGroupClass:[PBFetchUserWaveCountResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWavesAndComentsReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1024
                                      defaultValue:[PBFetchWavesAndComentsReq defaultInstance]
                               messageOrGroupClass:[PBFetchWavesAndComentsReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchWavesAndComentsResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1025
                                      defaultValue:[PBFetchWavesAndComentsResp defaultInstance]
                               messageOrGroupClass:[PBFetchWavesAndComentsResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_sendRedPacketReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1101
                                      defaultValue:[PBSendRedPacketReq defaultInstance]
                               messageOrGroupClass:[PBSendRedPacketReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_sendRedPacketResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1102
                                      defaultValue:[PBSendRedPacketResp defaultInstance]
                               messageOrGroupClass:[PBSendRedPacketResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_robRedPacketReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1103
                                      defaultValue:[PBRobRedPacketReq defaultInstance]
                               messageOrGroupClass:[PBRobRedPacketReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_robRedPacketResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1104
                                      defaultValue:[PBRobRedPacketResp defaultInstance]
                               messageOrGroupClass:[PBRobRedPacketResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1105
                                      defaultValue:[PBFetchRedPacketReq defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1106
                                      defaultValue:[PBFetchRedPacketResp defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketTicketReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1107
                                      defaultValue:[PBFetchRedPacketTicketReq defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketTicketReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketTicketResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1108
                                      defaultValue:[PBFetchRedPacketTicketResp defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketTicketResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_setRedPacketTicketReceivedReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1109
                                      defaultValue:[PBSetRedPacketTicketReceivedReq defaultInstance]
                               messageOrGroupClass:[PBSetRedPacketTicketReceivedReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_setRedPacketTicketReceivedResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1110
                                      defaultValue:[PBSetRedPacketTicketReceivedResp defaultInstance]
                               messageOrGroupClass:[PBSetRedPacketTicketReceivedResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketsReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1111
                                      defaultValue:[PBFetchRedPacketsReq defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketsReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketsResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1112
                                      defaultValue:[PBFetchRedPacketsResp defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketsResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketsCountReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1113
                                      defaultValue:[PBFetchRedPacketCountReq defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketCountReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketCountResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1114
                                      defaultValue:[PBFetchRedPacketCountResp defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketCountResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchAllWavesReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1115
                                      defaultValue:[PBFetchAllWavesReq defaultInstance]
                               messageOrGroupClass:[PBFetchAllWavesReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchAllWavesResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1116
                                      defaultValue:[PBFetchAllWavesResp defaultInstance]
                               messageOrGroupClass:[PBFetchAllWavesResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketMyTicketCountReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1117
                                      defaultValue:[PBFetchRedPacketMyTicketCountReq defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketMyTicketCountReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    CircleRoot_fetchRedPacketMyTicketCountResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:1118
                                      defaultValue:[PBFetchRedPacketMyTicketCountResp defaultInstance]
                               messageOrGroupClass:[PBFetchRedPacketMyTicketCountResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FrameRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:CircleRoot_sendWaveReq];
  [registry addExtension:CircleRoot_sendWaveResp];
  [registry addExtension:CircleRoot_sendWaveCommentReq];
  [registry addExtension:CircleRoot_sendWaveCommentResp];
  [registry addExtension:CircleRoot_fetchWaveCommentReq];
  [registry addExtension:CircleRoot_fetchWaveCommentResp];
  [registry addExtension:CircleRoot_deleteWaveReq];
  [registry addExtension:CircleRoot_deleteWaveResp];
  [registry addExtension:CircleRoot_deleteWaveCommentReq];
  [registry addExtension:CircleRoot_deleteWaveCommentResp];
  [registry addExtension:CircleRoot_fetchWavesReq];
  [registry addExtension:CircleRoot_fetchWavesResp];
  [registry addExtension:CircleRoot_fetchWaveIdsReq];
  [registry addExtension:CircleRoot_fetchWaveIdsResp];
  [registry addExtension:CircleRoot_fetchWaveCommentIdsReq];
  [registry addExtension:CircleRoot_fetchWaveCommentIdsResp];
  [registry addExtension:CircleRoot_fetchUserWaveCountReq];
  [registry addExtension:CircleRoot_fetchUserWaveCountResp];
  [registry addExtension:CircleRoot_fetchWavesAndComentsReq];
  [registry addExtension:CircleRoot_fetchWavesAndComentsResp];
  [registry addExtension:CircleRoot_sendRedPacketReq];
  [registry addExtension:CircleRoot_sendRedPacketResp];
  [registry addExtension:CircleRoot_robRedPacketReq];
  [registry addExtension:CircleRoot_robRedPacketResp];
  [registry addExtension:CircleRoot_fetchRedPacketReq];
  [registry addExtension:CircleRoot_fetchRedPacketResp];
  [registry addExtension:CircleRoot_fetchRedPacketTicketReq];
  [registry addExtension:CircleRoot_fetchRedPacketTicketResp];
  [registry addExtension:CircleRoot_setRedPacketTicketReceivedReq];
  [registry addExtension:CircleRoot_setRedPacketTicketReceivedResp];
  [registry addExtension:CircleRoot_fetchRedPacketsReq];
  [registry addExtension:CircleRoot_fetchRedPacketsResp];
  [registry addExtension:CircleRoot_fetchRedPacketsCountReq];
  [registry addExtension:CircleRoot_fetchRedPacketCountResp];
  [registry addExtension:CircleRoot_fetchAllWavesReq];
  [registry addExtension:CircleRoot_fetchAllWavesResp];
  [registry addExtension:CircleRoot_fetchRedPacketMyTicketCountReq];
  [registry addExtension:CircleRoot_fetchRedPacketMyTicketCountResp];
}
+ (id<PBExtensionField>) sendWaveReq {
  return CircleRoot_sendWaveReq;
}
+ (id<PBExtensionField>) sendWaveResp {
  return CircleRoot_sendWaveResp;
}
+ (id<PBExtensionField>) sendWaveCommentReq {
  return CircleRoot_sendWaveCommentReq;
}
+ (id<PBExtensionField>) sendWaveCommentResp {
  return CircleRoot_sendWaveCommentResp;
}
+ (id<PBExtensionField>) fetchWaveCommentReq {
  return CircleRoot_fetchWaveCommentReq;
}
+ (id<PBExtensionField>) fetchWaveCommentResp {
  return CircleRoot_fetchWaveCommentResp;
}
+ (id<PBExtensionField>) deleteWaveReq {
  return CircleRoot_deleteWaveReq;
}
+ (id<PBExtensionField>) deleteWaveResp {
  return CircleRoot_deleteWaveResp;
}
+ (id<PBExtensionField>) deleteWaveCommentReq {
  return CircleRoot_deleteWaveCommentReq;
}
+ (id<PBExtensionField>) deleteWaveCommentResp {
  return CircleRoot_deleteWaveCommentResp;
}
+ (id<PBExtensionField>) fetchWavesReq {
  return CircleRoot_fetchWavesReq;
}
+ (id<PBExtensionField>) fetchWavesResp {
  return CircleRoot_fetchWavesResp;
}
+ (id<PBExtensionField>) fetchWaveIdsReq {
  return CircleRoot_fetchWaveIdsReq;
}
+ (id<PBExtensionField>) fetchWaveIdsResp {
  return CircleRoot_fetchWaveIdsResp;
}
+ (id<PBExtensionField>) fetchWaveCommentIdsReq {
  return CircleRoot_fetchWaveCommentIdsReq;
}
+ (id<PBExtensionField>) fetchWaveCommentIdsResp {
  return CircleRoot_fetchWaveCommentIdsResp;
}
+ (id<PBExtensionField>) fetchUserWaveCountReq {
  return CircleRoot_fetchUserWaveCountReq;
}
+ (id<PBExtensionField>) fetchUserWaveCountResp {
  return CircleRoot_fetchUserWaveCountResp;
}
+ (id<PBExtensionField>) fetchWavesAndComentsReq {
  return CircleRoot_fetchWavesAndComentsReq;
}
+ (id<PBExtensionField>) fetchWavesAndComentsResp {
  return CircleRoot_fetchWavesAndComentsResp;
}
+ (id<PBExtensionField>) sendRedPacketReq {
  return CircleRoot_sendRedPacketReq;
}
+ (id<PBExtensionField>) sendRedPacketResp {
  return CircleRoot_sendRedPacketResp;
}
+ (id<PBExtensionField>) robRedPacketReq {
  return CircleRoot_robRedPacketReq;
}
+ (id<PBExtensionField>) robRedPacketResp {
  return CircleRoot_robRedPacketResp;
}
+ (id<PBExtensionField>) fetchRedPacketReq {
  return CircleRoot_fetchRedPacketReq;
}
+ (id<PBExtensionField>) fetchRedPacketResp {
  return CircleRoot_fetchRedPacketResp;
}
+ (id<PBExtensionField>) fetchRedPacketTicketReq {
  return CircleRoot_fetchRedPacketTicketReq;
}
+ (id<PBExtensionField>) fetchRedPacketTicketResp {
  return CircleRoot_fetchRedPacketTicketResp;
}
+ (id<PBExtensionField>) setRedPacketTicketReceivedReq {
  return CircleRoot_setRedPacketTicketReceivedReq;
}
+ (id<PBExtensionField>) setRedPacketTicketReceivedResp {
  return CircleRoot_setRedPacketTicketReceivedResp;
}
+ (id<PBExtensionField>) fetchRedPacketsReq {
  return CircleRoot_fetchRedPacketsReq;
}
+ (id<PBExtensionField>) fetchRedPacketsResp {
  return CircleRoot_fetchRedPacketsResp;
}
+ (id<PBExtensionField>) fetchRedPacketsCountReq {
  return CircleRoot_fetchRedPacketsCountReq;
}
+ (id<PBExtensionField>) fetchRedPacketCountResp {
  return CircleRoot_fetchRedPacketCountResp;
}
+ (id<PBExtensionField>) fetchAllWavesReq {
  return CircleRoot_fetchAllWavesReq;
}
+ (id<PBExtensionField>) fetchAllWavesResp {
  return CircleRoot_fetchAllWavesResp;
}
+ (id<PBExtensionField>) fetchRedPacketMyTicketCountReq {
  return CircleRoot_fetchRedPacketMyTicketCountReq;
}
+ (id<PBExtensionField>) fetchRedPacketMyTicketCountResp {
  return CircleRoot_fetchRedPacketMyTicketCountResp;
}
@end

BOOL PBRedPacketTypeIsValidValue(PBRedPacketType value) {
  switch (value) {
    case PBRedPacketTypeRedPacketTypeNil:
    case PBRedPacketTypeRedPacketTypeMoney:
    case PBRedPacketTypeRedPacketTypePhysical:
      return YES;
    default:
      return NO;
  }
}
@interface PBWaveBody ()
@property (strong) NSMutableArray * itemsArray;
@end

@implementation PBWaveBody

@synthesize itemsArray;
@dynamic items;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBWaveBody* defaultPBWaveBodyInstance = nil;
+ (void) initialize {
  if (self == [PBWaveBody class]) {
    defaultPBWaveBodyInstance = [[PBWaveBody alloc] init];
  }
}
+ (PBWaveBody*) defaultInstance {
  return defaultPBWaveBodyInstance;
}
- (PBWaveBody*) defaultInstance {
  return defaultPBWaveBodyInstance;
}
- (NSArray *)items {
  return itemsArray;
}
- (PBWaveBodyItem*)itemsAtIndex:(NSUInteger)index {
  return [itemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.itemsArray enumerateObjectsUsingBlock:^(PBWaveBodyItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.itemsArray enumerateObjectsUsingBlock:^(PBWaveBodyItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveBody*) parseFromData:(NSData*) data {
  return (PBWaveBody*)[[[PBWaveBody builder] mergeFromData:data] build];
}
+ (PBWaveBody*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBody*)[[[PBWaveBody builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBody*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveBody*)[[[PBWaveBody builder] mergeFromInputStream:input] build];
}
+ (PBWaveBody*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBody*)[[[PBWaveBody builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBody*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveBody*)[[[PBWaveBody builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveBody*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBody*)[[[PBWaveBody builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyBuilder*) builder {
  return [[PBWaveBodyBuilder alloc] init];
}
+ (PBWaveBodyBuilder*) builderWithPrototype:(PBWaveBody*) prototype {
  return [[PBWaveBody builder] mergeFrom:prototype];
}
- (PBWaveBodyBuilder*) builder {
  return [PBWaveBody builder];
}
- (PBWaveBodyBuilder*) toBuilder {
  return [PBWaveBody builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.itemsArray enumerateObjectsUsingBlock:^(PBWaveBodyItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveBody class]]) {
    return NO;
  }
  PBWaveBody *otherMessage = other;
  return
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.itemsArray enumerateObjectsUsingBlock:^(PBWaveBodyItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWaveBodyItem ()
@property SInt32 index;
@property PBWaveBodyItemType type;
@property (strong) NSString* text;
@property (strong) NSString* pictureUrl;
@property SInt32 expressionId;
@property (strong) PBWaveBodyItemVoice* voice;
@property (strong) PBWaveBodyItemVideo* video;
@property (strong) PBWaveBodyItemLink* link;
@property (strong) PBWaveBodyItemPicture* picture;
@end

@implementation PBWaveBodyItem

- (BOOL) hasIndex {
  return !!hasIndex_;
}
- (void) setHasIndex:(BOOL) value_ {
  hasIndex_ = !!value_;
}
@synthesize index;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) value_ {
  hasText_ = !!value_;
}
@synthesize text;
- (BOOL) hasPictureUrl {
  return !!hasPictureUrl_;
}
- (void) setHasPictureUrl:(BOOL) value_ {
  hasPictureUrl_ = !!value_;
}
@synthesize pictureUrl;
- (BOOL) hasExpressionId {
  return !!hasExpressionId_;
}
- (void) setHasExpressionId:(BOOL) value_ {
  hasExpressionId_ = !!value_;
}
@synthesize expressionId;
- (BOOL) hasVoice {
  return !!hasVoice_;
}
- (void) setHasVoice:(BOOL) value_ {
  hasVoice_ = !!value_;
}
@synthesize voice;
- (BOOL) hasVideo {
  return !!hasVideo_;
}
- (void) setHasVideo:(BOOL) value_ {
  hasVideo_ = !!value_;
}
@synthesize video;
- (BOOL) hasLink {
  return !!hasLink_;
}
- (void) setHasLink:(BOOL) value_ {
  hasLink_ = !!value_;
}
@synthesize link;
- (BOOL) hasPicture {
  return !!hasPicture_;
}
- (void) setHasPicture:(BOOL) value_ {
  hasPicture_ = !!value_;
}
@synthesize picture;
- (id) init {
  if ((self = [super init])) {
    self.index = 0;
    self.type = PBWaveBodyItemTypeTypeText;
    self.text = @"";
    self.pictureUrl = @"";
    self.expressionId = 0;
    self.voice = [PBWaveBodyItemVoice defaultInstance];
    self.video = [PBWaveBodyItemVideo defaultInstance];
    self.link = [PBWaveBodyItemLink defaultInstance];
    self.picture = [PBWaveBodyItemPicture defaultInstance];
  }
  return self;
}
static PBWaveBodyItem* defaultPBWaveBodyItemInstance = nil;
+ (void) initialize {
  if (self == [PBWaveBodyItem class]) {
    defaultPBWaveBodyItemInstance = [[PBWaveBodyItem alloc] init];
  }
}
+ (PBWaveBodyItem*) defaultInstance {
  return defaultPBWaveBodyItemInstance;
}
- (PBWaveBodyItem*) defaultInstance {
  return defaultPBWaveBodyItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIndex) {
    [output writeSInt32:1 value:self.index];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasText) {
    [output writeString:3 value:self.text];
  }
  if (self.hasPictureUrl) {
    [output writeString:4 value:self.pictureUrl];
  }
  if (self.hasExpressionId) {
    [output writeSInt32:5 value:self.expressionId];
  }
  if (self.hasVoice) {
    [output writeMessage:6 value:self.voice];
  }
  if (self.hasVideo) {
    [output writeMessage:7 value:self.video];
  }
  if (self.hasLink) {
    [output writeMessage:8 value:self.link];
  }
  if (self.hasPicture) {
    [output writeMessage:9 value:self.picture];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIndex) {
    size_ += computeSInt32Size(1, self.index);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasText) {
    size_ += computeStringSize(3, self.text);
  }
  if (self.hasPictureUrl) {
    size_ += computeStringSize(4, self.pictureUrl);
  }
  if (self.hasExpressionId) {
    size_ += computeSInt32Size(5, self.expressionId);
  }
  if (self.hasVoice) {
    size_ += computeMessageSize(6, self.voice);
  }
  if (self.hasVideo) {
    size_ += computeMessageSize(7, self.video);
  }
  if (self.hasLink) {
    size_ += computeMessageSize(8, self.link);
  }
  if (self.hasPicture) {
    size_ += computeMessageSize(9, self.picture);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveBodyItem*) parseFromData:(NSData*) data {
  return (PBWaveBodyItem*)[[[PBWaveBodyItem builder] mergeFromData:data] build];
}
+ (PBWaveBodyItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItem*)[[[PBWaveBodyItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveBodyItem*)[[[PBWaveBodyItem builder] mergeFromInputStream:input] build];
}
+ (PBWaveBodyItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItem*)[[[PBWaveBodyItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveBodyItem*)[[[PBWaveBodyItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveBodyItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItem*)[[[PBWaveBodyItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemBuilder*) builder {
  return [[PBWaveBodyItemBuilder alloc] init];
}
+ (PBWaveBodyItemBuilder*) builderWithPrototype:(PBWaveBodyItem*) prototype {
  return [[PBWaveBodyItem builder] mergeFrom:prototype];
}
- (PBWaveBodyItemBuilder*) builder {
  return [PBWaveBodyItem builder];
}
- (PBWaveBodyItemBuilder*) toBuilder {
  return [PBWaveBodyItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"index", [NSNumber numberWithInteger:self.index]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  if (self.hasPictureUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pictureUrl", self.pictureUrl];
  }
  if (self.hasExpressionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expressionId", [NSNumber numberWithInteger:self.expressionId]];
  }
  if (self.hasVoice) {
    [output appendFormat:@"%@%@ {\n", indent, @"voice"];
    [self.voice writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasVideo) {
    [output appendFormat:@"%@%@ {\n", indent, @"video"];
    [self.video writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLink) {
    [output appendFormat:@"%@%@ {\n", indent, @"link"];
    [self.link writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPicture) {
    [output appendFormat:@"%@%@ {\n", indent, @"picture"];
    [self.picture writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveBodyItem class]]) {
    return NO;
  }
  PBWaveBodyItem *otherMessage = other;
  return
      self.hasIndex == otherMessage.hasIndex &&
      (!self.hasIndex || self.index == otherMessage.index) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      self.hasPictureUrl == otherMessage.hasPictureUrl &&
      (!self.hasPictureUrl || [self.pictureUrl isEqual:otherMessage.pictureUrl]) &&
      self.hasExpressionId == otherMessage.hasExpressionId &&
      (!self.hasExpressionId || self.expressionId == otherMessage.expressionId) &&
      self.hasVoice == otherMessage.hasVoice &&
      (!self.hasVoice || [self.voice isEqual:otherMessage.voice]) &&
      self.hasVideo == otherMessage.hasVideo &&
      (!self.hasVideo || [self.video isEqual:otherMessage.video]) &&
      self.hasLink == otherMessage.hasLink &&
      (!self.hasLink || [self.link isEqual:otherMessage.link]) &&
      self.hasPicture == otherMessage.hasPicture &&
      (!self.hasPicture || [self.picture isEqual:otherMessage.picture]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.index] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  if (self.hasPictureUrl) {
    hashCode = hashCode * 31 + [self.pictureUrl hash];
  }
  if (self.hasExpressionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expressionId] hash];
  }
  if (self.hasVoice) {
    hashCode = hashCode * 31 + [self.voice hash];
  }
  if (self.hasVideo) {
    hashCode = hashCode * 31 + [self.video hash];
  }
  if (self.hasLink) {
    hashCode = hashCode * 31 + [self.link hash];
  }
  if (self.hasPicture) {
    hashCode = hashCode * 31 + [self.picture hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBWaveBodyItemTypeIsValidValue(PBWaveBodyItemType value) {
  switch (value) {
    case PBWaveBodyItemTypeTypeText:
    case PBWaveBodyItemTypeTypePicture:
    case PBWaveBodyItemTypeTypeExpression:
    case PBWaveBodyItemTypeTypeVoice:
    case PBWaveBodyItemTypeTypeVideo:
    case PBWaveBodyItemTypeTypeLink:
      return YES;
    default:
      return NO;
  }
}
@interface PBWaveBodyItemVoice ()
@property (strong) NSString* url;
@property SInt32 duration;
@end

@implementation PBWaveBodyItemVoice

- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (id) init {
  if ((self = [super init])) {
    self.url = @"";
    self.duration = 0;
  }
  return self;
}
static PBWaveBodyItemVoice* defaultPBWaveBodyItemVoiceInstance = nil;
+ (void) initialize {
  if (self == [PBWaveBodyItemVoice class]) {
    defaultPBWaveBodyItemVoiceInstance = [[PBWaveBodyItemVoice alloc] init];
  }
}
+ (PBWaveBodyItemVoice*) defaultInstance {
  return defaultPBWaveBodyItemVoiceInstance;
}
- (PBWaveBodyItemVoice*) defaultInstance {
  return defaultPBWaveBodyItemVoiceInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUrl) {
    [output writeString:1 value:self.url];
  }
  if (self.hasDuration) {
    [output writeSInt32:2 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUrl) {
    size_ += computeStringSize(1, self.url);
  }
  if (self.hasDuration) {
    size_ += computeSInt32Size(2, self.duration);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveBodyItemVoice*) parseFromData:(NSData*) data {
  return (PBWaveBodyItemVoice*)[[[PBWaveBodyItemVoice builder] mergeFromData:data] build];
}
+ (PBWaveBodyItemVoice*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemVoice*)[[[PBWaveBodyItemVoice builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemVoice*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveBodyItemVoice*)[[[PBWaveBodyItemVoice builder] mergeFromInputStream:input] build];
}
+ (PBWaveBodyItemVoice*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemVoice*)[[[PBWaveBodyItemVoice builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemVoice*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveBodyItemVoice*)[[[PBWaveBodyItemVoice builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveBodyItemVoice*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemVoice*)[[[PBWaveBodyItemVoice builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemVoiceBuilder*) builder {
  return [[PBWaveBodyItemVoiceBuilder alloc] init];
}
+ (PBWaveBodyItemVoiceBuilder*) builderWithPrototype:(PBWaveBodyItemVoice*) prototype {
  return [[PBWaveBodyItemVoice builder] mergeFrom:prototype];
}
- (PBWaveBodyItemVoiceBuilder*) builder {
  return [PBWaveBodyItemVoice builder];
}
- (PBWaveBodyItemVoiceBuilder*) toBuilder {
  return [PBWaveBodyItemVoice builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInteger:self.duration]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveBodyItemVoice class]]) {
    return NO;
  }
  PBWaveBodyItemVoice *otherMessage = other;
  return
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.duration] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWaveBodyItemVoiceBuilder()
@property (strong) PBWaveBodyItemVoice* result;
@end

@implementation PBWaveBodyItemVoiceBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveBodyItemVoice alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBodyItemVoiceBuilder*) clear {
  self.result = [[PBWaveBodyItemVoice alloc] init];
  return self;
}
- (PBWaveBodyItemVoiceBuilder*) clone {
  return [PBWaveBodyItemVoice builderWithPrototype:result];
}
- (PBWaveBodyItemVoice*) defaultInstance {
  return [PBWaveBodyItemVoice defaultInstance];
}
- (PBWaveBodyItemVoice*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveBodyItemVoice*) buildPartial {
  PBWaveBodyItemVoice* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBodyItemVoiceBuilder*) mergeFrom:(PBWaveBodyItemVoice*) other {
  if (other == [PBWaveBodyItemVoice defaultInstance]) {
    return self;
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBodyItemVoiceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBodyItemVoiceBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUrl:[input readString]];
        break;
      }
      case 16: {
        [self setDuration:[input readSInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (PBWaveBodyItemVoiceBuilder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (PBWaveBodyItemVoiceBuilder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (SInt32) duration {
  return result.duration;
}
- (PBWaveBodyItemVoiceBuilder*) setDuration:(SInt32) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (PBWaveBodyItemVoiceBuilder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 0;
  return self;
}
@end

@interface PBWaveBodyItemVideo ()
@property (strong) NSString* url;
@property SInt32 duration;
@end

@implementation PBWaveBodyItemVideo

- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (id) init {
  if ((self = [super init])) {
    self.url = @"";
    self.duration = 0;
  }
  return self;
}
static PBWaveBodyItemVideo* defaultPBWaveBodyItemVideoInstance = nil;
+ (void) initialize {
  if (self == [PBWaveBodyItemVideo class]) {
    defaultPBWaveBodyItemVideoInstance = [[PBWaveBodyItemVideo alloc] init];
  }
}
+ (PBWaveBodyItemVideo*) defaultInstance {
  return defaultPBWaveBodyItemVideoInstance;
}
- (PBWaveBodyItemVideo*) defaultInstance {
  return defaultPBWaveBodyItemVideoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUrl) {
    [output writeString:1 value:self.url];
  }
  if (self.hasDuration) {
    [output writeSInt32:2 value:self.duration];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUrl) {
    size_ += computeStringSize(1, self.url);
  }
  if (self.hasDuration) {
    size_ += computeSInt32Size(2, self.duration);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveBodyItemVideo*) parseFromData:(NSData*) data {
  return (PBWaveBodyItemVideo*)[[[PBWaveBodyItemVideo builder] mergeFromData:data] build];
}
+ (PBWaveBodyItemVideo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemVideo*)[[[PBWaveBodyItemVideo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemVideo*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveBodyItemVideo*)[[[PBWaveBodyItemVideo builder] mergeFromInputStream:input] build];
}
+ (PBWaveBodyItemVideo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemVideo*)[[[PBWaveBodyItemVideo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemVideo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveBodyItemVideo*)[[[PBWaveBodyItemVideo builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveBodyItemVideo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemVideo*)[[[PBWaveBodyItemVideo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemVideoBuilder*) builder {
  return [[PBWaveBodyItemVideoBuilder alloc] init];
}
+ (PBWaveBodyItemVideoBuilder*) builderWithPrototype:(PBWaveBodyItemVideo*) prototype {
  return [[PBWaveBodyItemVideo builder] mergeFrom:prototype];
}
- (PBWaveBodyItemVideoBuilder*) builder {
  return [PBWaveBodyItemVideo builder];
}
- (PBWaveBodyItemVideoBuilder*) toBuilder {
  return [PBWaveBodyItemVideo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInteger:self.duration]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveBodyItemVideo class]]) {
    return NO;
  }
  PBWaveBodyItemVideo *otherMessage = other;
  return
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.duration] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWaveBodyItemVideoBuilder()
@property (strong) PBWaveBodyItemVideo* result;
@end

@implementation PBWaveBodyItemVideoBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveBodyItemVideo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBodyItemVideoBuilder*) clear {
  self.result = [[PBWaveBodyItemVideo alloc] init];
  return self;
}
- (PBWaveBodyItemVideoBuilder*) clone {
  return [PBWaveBodyItemVideo builderWithPrototype:result];
}
- (PBWaveBodyItemVideo*) defaultInstance {
  return [PBWaveBodyItemVideo defaultInstance];
}
- (PBWaveBodyItemVideo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveBodyItemVideo*) buildPartial {
  PBWaveBodyItemVideo* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBodyItemVideoBuilder*) mergeFrom:(PBWaveBodyItemVideo*) other {
  if (other == [PBWaveBodyItemVideo defaultInstance]) {
    return self;
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBodyItemVideoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBodyItemVideoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUrl:[input readString]];
        break;
      }
      case 16: {
        [self setDuration:[input readSInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (PBWaveBodyItemVideoBuilder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (PBWaveBodyItemVideoBuilder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (SInt32) duration {
  return result.duration;
}
- (PBWaveBodyItemVideoBuilder*) setDuration:(SInt32) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (PBWaveBodyItemVideoBuilder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 0;
  return self;
}
@end

@interface PBWaveBodyItemLink ()
@property (strong) NSString* url;
@property (strong) NSString* pictureUrl;
@property (strong) NSString* title;
@property PBWaveBodyItemLinkType type;
@end

@implementation PBWaveBodyItemLink

- (BOOL) hasUrl {
  return !!hasUrl_;
}
- (void) setHasUrl:(BOOL) value_ {
  hasUrl_ = !!value_;
}
@synthesize url;
- (BOOL) hasPictureUrl {
  return !!hasPictureUrl_;
}
- (void) setHasPictureUrl:(BOOL) value_ {
  hasPictureUrl_ = !!value_;
}
@synthesize pictureUrl;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value_ {
  hasTitle_ = !!value_;
}
@synthesize title;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.url = @"";
    self.pictureUrl = @"";
    self.title = @"";
    self.type = PBWaveBodyItemLinkTypeTypeCommon;
  }
  return self;
}
static PBWaveBodyItemLink* defaultPBWaveBodyItemLinkInstance = nil;
+ (void) initialize {
  if (self == [PBWaveBodyItemLink class]) {
    defaultPBWaveBodyItemLinkInstance = [[PBWaveBodyItemLink alloc] init];
  }
}
+ (PBWaveBodyItemLink*) defaultInstance {
  return defaultPBWaveBodyItemLinkInstance;
}
- (PBWaveBodyItemLink*) defaultInstance {
  return defaultPBWaveBodyItemLinkInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUrl) {
    [output writeString:1 value:self.url];
  }
  if (self.hasPictureUrl) {
    [output writeString:2 value:self.pictureUrl];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUrl) {
    size_ += computeStringSize(1, self.url);
  }
  if (self.hasPictureUrl) {
    size_ += computeStringSize(2, self.pictureUrl);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveBodyItemLink*) parseFromData:(NSData*) data {
  return (PBWaveBodyItemLink*)[[[PBWaveBodyItemLink builder] mergeFromData:data] build];
}
+ (PBWaveBodyItemLink*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemLink*)[[[PBWaveBodyItemLink builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemLink*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveBodyItemLink*)[[[PBWaveBodyItemLink builder] mergeFromInputStream:input] build];
}
+ (PBWaveBodyItemLink*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemLink*)[[[PBWaveBodyItemLink builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemLink*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveBodyItemLink*)[[[PBWaveBodyItemLink builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveBodyItemLink*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemLink*)[[[PBWaveBodyItemLink builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemLinkBuilder*) builder {
  return [[PBWaveBodyItemLinkBuilder alloc] init];
}
+ (PBWaveBodyItemLinkBuilder*) builderWithPrototype:(PBWaveBodyItemLink*) prototype {
  return [[PBWaveBodyItemLink builder] mergeFrom:prototype];
}
- (PBWaveBodyItemLinkBuilder*) builder {
  return [PBWaveBodyItemLink builder];
}
- (PBWaveBodyItemLinkBuilder*) toBuilder {
  return [PBWaveBodyItemLink builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"url", self.url];
  }
  if (self.hasPictureUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pictureUrl", self.pictureUrl];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveBodyItemLink class]]) {
    return NO;
  }
  PBWaveBodyItemLink *otherMessage = other;
  return
      self.hasUrl == otherMessage.hasUrl &&
      (!self.hasUrl || [self.url isEqual:otherMessage.url]) &&
      self.hasPictureUrl == otherMessage.hasPictureUrl &&
      (!self.hasPictureUrl || [self.pictureUrl isEqual:otherMessage.pictureUrl]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUrl) {
    hashCode = hashCode * 31 + [self.url hash];
  }
  if (self.hasPictureUrl) {
    hashCode = hashCode * 31 + [self.pictureUrl hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBWaveBodyItemLinkTypeIsValidValue(PBWaveBodyItemLinkType value) {
  switch (value) {
    case PBWaveBodyItemLinkTypeTypeCommon:
    case PBWaveBodyItemLinkTypeTypeBigPicture:
      return YES;
    default:
      return NO;
  }
}
@interface PBWaveBodyItemLinkBuilder()
@property (strong) PBWaveBodyItemLink* result;
@end

@implementation PBWaveBodyItemLinkBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveBodyItemLink alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBodyItemLinkBuilder*) clear {
  self.result = [[PBWaveBodyItemLink alloc] init];
  return self;
}
- (PBWaveBodyItemLinkBuilder*) clone {
  return [PBWaveBodyItemLink builderWithPrototype:result];
}
- (PBWaveBodyItemLink*) defaultInstance {
  return [PBWaveBodyItemLink defaultInstance];
}
- (PBWaveBodyItemLink*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveBodyItemLink*) buildPartial {
  PBWaveBodyItemLink* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBodyItemLinkBuilder*) mergeFrom:(PBWaveBodyItemLink*) other {
  if (other == [PBWaveBodyItemLink defaultInstance]) {
    return self;
  }
  if (other.hasUrl) {
    [self setUrl:other.url];
  }
  if (other.hasPictureUrl) {
    [self setPictureUrl:other.pictureUrl];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBodyItemLinkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBodyItemLinkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUrl:[input readString]];
        break;
      }
      case 18: {
        [self setPictureUrl:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 32: {
        PBWaveBodyItemLinkType value = (PBWaveBodyItemLinkType)[input readEnum];
        if (PBWaveBodyItemLinkTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUrl {
  return result.hasUrl;
}
- (NSString*) url {
  return result.url;
}
- (PBWaveBodyItemLinkBuilder*) setUrl:(NSString*) value {
  result.hasUrl = YES;
  result.url = value;
  return self;
}
- (PBWaveBodyItemLinkBuilder*) clearUrl {
  result.hasUrl = NO;
  result.url = @"";
  return self;
}
- (BOOL) hasPictureUrl {
  return result.hasPictureUrl;
}
- (NSString*) pictureUrl {
  return result.pictureUrl;
}
- (PBWaveBodyItemLinkBuilder*) setPictureUrl:(NSString*) value {
  result.hasPictureUrl = YES;
  result.pictureUrl = value;
  return self;
}
- (PBWaveBodyItemLinkBuilder*) clearPictureUrl {
  result.hasPictureUrl = NO;
  result.pictureUrl = @"";
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (PBWaveBodyItemLinkBuilder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (PBWaveBodyItemLinkBuilder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBWaveBodyItemLinkType) type {
  return result.type;
}
- (PBWaveBodyItemLinkBuilder*) setType:(PBWaveBodyItemLinkType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBWaveBodyItemLinkBuilder*) clearType {
  result.hasType = NO;
  result.type = PBWaveBodyItemLinkTypeTypeCommon;
  return self;
}
@end

@interface PBWaveBodyItemPicture ()
@property (strong) NSString* pictureUrl;
@property SInt32 width;
@property SInt32 height;
@end

@implementation PBWaveBodyItemPicture

- (BOOL) hasPictureUrl {
  return !!hasPictureUrl_;
}
- (void) setHasPictureUrl:(BOOL) value_ {
  hasPictureUrl_ = !!value_;
}
@synthesize pictureUrl;
- (BOOL) hasWidth {
  return !!hasWidth_;
}
- (void) setHasWidth:(BOOL) value_ {
  hasWidth_ = !!value_;
}
@synthesize width;
- (BOOL) hasHeight {
  return !!hasHeight_;
}
- (void) setHasHeight:(BOOL) value_ {
  hasHeight_ = !!value_;
}
@synthesize height;
- (id) init {
  if ((self = [super init])) {
    self.pictureUrl = @"";
    self.width = 0;
    self.height = 0;
  }
  return self;
}
static PBWaveBodyItemPicture* defaultPBWaveBodyItemPictureInstance = nil;
+ (void) initialize {
  if (self == [PBWaveBodyItemPicture class]) {
    defaultPBWaveBodyItemPictureInstance = [[PBWaveBodyItemPicture alloc] init];
  }
}
+ (PBWaveBodyItemPicture*) defaultInstance {
  return defaultPBWaveBodyItemPictureInstance;
}
- (PBWaveBodyItemPicture*) defaultInstance {
  return defaultPBWaveBodyItemPictureInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPictureUrl) {
    [output writeString:1 value:self.pictureUrl];
  }
  if (self.hasWidth) {
    [output writeSInt32:2 value:self.width];
  }
  if (self.hasHeight) {
    [output writeSInt32:3 value:self.height];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPictureUrl) {
    size_ += computeStringSize(1, self.pictureUrl);
  }
  if (self.hasWidth) {
    size_ += computeSInt32Size(2, self.width);
  }
  if (self.hasHeight) {
    size_ += computeSInt32Size(3, self.height);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveBodyItemPicture*) parseFromData:(NSData*) data {
  return (PBWaveBodyItemPicture*)[[[PBWaveBodyItemPicture builder] mergeFromData:data] build];
}
+ (PBWaveBodyItemPicture*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemPicture*)[[[PBWaveBodyItemPicture builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemPicture*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveBodyItemPicture*)[[[PBWaveBodyItemPicture builder] mergeFromInputStream:input] build];
}
+ (PBWaveBodyItemPicture*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemPicture*)[[[PBWaveBodyItemPicture builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemPicture*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveBodyItemPicture*)[[[PBWaveBodyItemPicture builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveBodyItemPicture*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveBodyItemPicture*)[[[PBWaveBodyItemPicture builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBodyItemPictureBuilder*) builder {
  return [[PBWaveBodyItemPictureBuilder alloc] init];
}
+ (PBWaveBodyItemPictureBuilder*) builderWithPrototype:(PBWaveBodyItemPicture*) prototype {
  return [[PBWaveBodyItemPicture builder] mergeFrom:prototype];
}
- (PBWaveBodyItemPictureBuilder*) builder {
  return [PBWaveBodyItemPicture builder];
}
- (PBWaveBodyItemPictureBuilder*) toBuilder {
  return [PBWaveBodyItemPicture builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPictureUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pictureUrl", self.pictureUrl];
  }
  if (self.hasWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"width", [NSNumber numberWithInteger:self.width]];
  }
  if (self.hasHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"height", [NSNumber numberWithInteger:self.height]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveBodyItemPicture class]]) {
    return NO;
  }
  PBWaveBodyItemPicture *otherMessage = other;
  return
      self.hasPictureUrl == otherMessage.hasPictureUrl &&
      (!self.hasPictureUrl || [self.pictureUrl isEqual:otherMessage.pictureUrl]) &&
      self.hasWidth == otherMessage.hasWidth &&
      (!self.hasWidth || self.width == otherMessage.width) &&
      self.hasHeight == otherMessage.hasHeight &&
      (!self.hasHeight || self.height == otherMessage.height) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPictureUrl) {
    hashCode = hashCode * 31 + [self.pictureUrl hash];
  }
  if (self.hasWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.width] hash];
  }
  if (self.hasHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.height] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWaveBodyItemPictureBuilder()
@property (strong) PBWaveBodyItemPicture* result;
@end

@implementation PBWaveBodyItemPictureBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveBodyItemPicture alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBodyItemPictureBuilder*) clear {
  self.result = [[PBWaveBodyItemPicture alloc] init];
  return self;
}
- (PBWaveBodyItemPictureBuilder*) clone {
  return [PBWaveBodyItemPicture builderWithPrototype:result];
}
- (PBWaveBodyItemPicture*) defaultInstance {
  return [PBWaveBodyItemPicture defaultInstance];
}
- (PBWaveBodyItemPicture*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveBodyItemPicture*) buildPartial {
  PBWaveBodyItemPicture* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBodyItemPictureBuilder*) mergeFrom:(PBWaveBodyItemPicture*) other {
  if (other == [PBWaveBodyItemPicture defaultInstance]) {
    return self;
  }
  if (other.hasPictureUrl) {
    [self setPictureUrl:other.pictureUrl];
  }
  if (other.hasWidth) {
    [self setWidth:other.width];
  }
  if (other.hasHeight) {
    [self setHeight:other.height];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBodyItemPictureBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBodyItemPictureBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPictureUrl:[input readString]];
        break;
      }
      case 16: {
        [self setWidth:[input readSInt32]];
        break;
      }
      case 24: {
        [self setHeight:[input readSInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPictureUrl {
  return result.hasPictureUrl;
}
- (NSString*) pictureUrl {
  return result.pictureUrl;
}
- (PBWaveBodyItemPictureBuilder*) setPictureUrl:(NSString*) value {
  result.hasPictureUrl = YES;
  result.pictureUrl = value;
  return self;
}
- (PBWaveBodyItemPictureBuilder*) clearPictureUrl {
  result.hasPictureUrl = NO;
  result.pictureUrl = @"";
  return self;
}
- (BOOL) hasWidth {
  return result.hasWidth;
}
- (SInt32) width {
  return result.width;
}
- (PBWaveBodyItemPictureBuilder*) setWidth:(SInt32) value {
  result.hasWidth = YES;
  result.width = value;
  return self;
}
- (PBWaveBodyItemPictureBuilder*) clearWidth {
  result.hasWidth = NO;
  result.width = 0;
  return self;
}
- (BOOL) hasHeight {
  return result.hasHeight;
}
- (SInt32) height {
  return result.height;
}
- (PBWaveBodyItemPictureBuilder*) setHeight:(SInt32) value {
  result.hasHeight = YES;
  result.height = value;
  return self;
}
- (PBWaveBodyItemPictureBuilder*) clearHeight {
  result.hasHeight = NO;
  result.height = 0;
  return self;
}
@end

@interface PBWaveBodyItemBuilder()
@property (strong) PBWaveBodyItem* result;
@end

@implementation PBWaveBodyItemBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveBodyItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBodyItemBuilder*) clear {
  self.result = [[PBWaveBodyItem alloc] init];
  return self;
}
- (PBWaveBodyItemBuilder*) clone {
  return [PBWaveBodyItem builderWithPrototype:result];
}
- (PBWaveBodyItem*) defaultInstance {
  return [PBWaveBodyItem defaultInstance];
}
- (PBWaveBodyItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveBodyItem*) buildPartial {
  PBWaveBodyItem* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBodyItemBuilder*) mergeFrom:(PBWaveBodyItem*) other {
  if (other == [PBWaveBodyItem defaultInstance]) {
    return self;
  }
  if (other.hasIndex) {
    [self setIndex:other.index];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  if (other.hasPictureUrl) {
    [self setPictureUrl:other.pictureUrl];
  }
  if (other.hasExpressionId) {
    [self setExpressionId:other.expressionId];
  }
  if (other.hasVoice) {
    [self mergeVoice:other.voice];
  }
  if (other.hasVideo) {
    [self mergeVideo:other.video];
  }
  if (other.hasLink) {
    [self mergeLink:other.link];
  }
  if (other.hasPicture) {
    [self mergePicture:other.picture];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBodyItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBodyItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setIndex:[input readSInt32]];
        break;
      }
      case 16: {
        PBWaveBodyItemType value = (PBWaveBodyItemType)[input readEnum];
        if (PBWaveBodyItemTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setText:[input readString]];
        break;
      }
      case 34: {
        [self setPictureUrl:[input readString]];
        break;
      }
      case 40: {
        [self setExpressionId:[input readSInt32]];
        break;
      }
      case 50: {
        PBWaveBodyItemVoiceBuilder* subBuilder = [PBWaveBodyItemVoice builder];
        if (self.hasVoice) {
          [subBuilder mergeFrom:self.voice];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVoice:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        PBWaveBodyItemVideoBuilder* subBuilder = [PBWaveBodyItemVideo builder];
        if (self.hasVideo) {
          [subBuilder mergeFrom:self.video];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVideo:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        PBWaveBodyItemLinkBuilder* subBuilder = [PBWaveBodyItemLink builder];
        if (self.hasLink) {
          [subBuilder mergeFrom:self.link];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLink:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PBWaveBodyItemPictureBuilder* subBuilder = [PBWaveBodyItemPicture builder];
        if (self.hasPicture) {
          [subBuilder mergeFrom:self.picture];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPicture:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasIndex {
  return result.hasIndex;
}
- (SInt32) index {
  return result.index;
}
- (PBWaveBodyItemBuilder*) setIndex:(SInt32) value {
  result.hasIndex = YES;
  result.index = value;
  return self;
}
- (PBWaveBodyItemBuilder*) clearIndex {
  result.hasIndex = NO;
  result.index = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBWaveBodyItemType) type {
  return result.type;
}
- (PBWaveBodyItemBuilder*) setType:(PBWaveBodyItemType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBWaveBodyItemBuilder*) clearType {
  result.hasType = NO;
  result.type = PBWaveBodyItemTypeTypeText;
  return self;
}
- (BOOL) hasText {
  return result.hasText;
}
- (NSString*) text {
  return result.text;
}
- (PBWaveBodyItemBuilder*) setText:(NSString*) value {
  result.hasText = YES;
  result.text = value;
  return self;
}
- (PBWaveBodyItemBuilder*) clearText {
  result.hasText = NO;
  result.text = @"";
  return self;
}
- (BOOL) hasPictureUrl {
  return result.hasPictureUrl;
}
- (NSString*) pictureUrl {
  return result.pictureUrl;
}
- (PBWaveBodyItemBuilder*) setPictureUrl:(NSString*) value {
  result.hasPictureUrl = YES;
  result.pictureUrl = value;
  return self;
}
- (PBWaveBodyItemBuilder*) clearPictureUrl {
  result.hasPictureUrl = NO;
  result.pictureUrl = @"";
  return self;
}
- (BOOL) hasExpressionId {
  return result.hasExpressionId;
}
- (SInt32) expressionId {
  return result.expressionId;
}
- (PBWaveBodyItemBuilder*) setExpressionId:(SInt32) value {
  result.hasExpressionId = YES;
  result.expressionId = value;
  return self;
}
- (PBWaveBodyItemBuilder*) clearExpressionId {
  result.hasExpressionId = NO;
  result.expressionId = 0;
  return self;
}
- (BOOL) hasVoice {
  return result.hasVoice;
}
- (PBWaveBodyItemVoice*) voice {
  return result.voice;
}
- (PBWaveBodyItemBuilder*) setVoice:(PBWaveBodyItemVoice*) value {
  result.hasVoice = YES;
  result.voice = value;
  return self;
}
- (PBWaveBodyItemBuilder*) setVoiceBuilder:(PBWaveBodyItemVoiceBuilder*) builderForValue {
  return [self setVoice:[builderForValue build]];
}
- (PBWaveBodyItemBuilder*) mergeVoice:(PBWaveBodyItemVoice*) value {
  if (result.hasVoice &&
      result.voice != [PBWaveBodyItemVoice defaultInstance]) {
    result.voice =
      [[[PBWaveBodyItemVoice builderWithPrototype:result.voice] mergeFrom:value] buildPartial];
  } else {
    result.voice = value;
  }
  result.hasVoice = YES;
  return self;
}
- (PBWaveBodyItemBuilder*) clearVoice {
  result.hasVoice = NO;
  result.voice = [PBWaveBodyItemVoice defaultInstance];
  return self;
}
- (BOOL) hasVideo {
  return result.hasVideo;
}
- (PBWaveBodyItemVideo*) video {
  return result.video;
}
- (PBWaveBodyItemBuilder*) setVideo:(PBWaveBodyItemVideo*) value {
  result.hasVideo = YES;
  result.video = value;
  return self;
}
- (PBWaveBodyItemBuilder*) setVideoBuilder:(PBWaveBodyItemVideoBuilder*) builderForValue {
  return [self setVideo:[builderForValue build]];
}
- (PBWaveBodyItemBuilder*) mergeVideo:(PBWaveBodyItemVideo*) value {
  if (result.hasVideo &&
      result.video != [PBWaveBodyItemVideo defaultInstance]) {
    result.video =
      [[[PBWaveBodyItemVideo builderWithPrototype:result.video] mergeFrom:value] buildPartial];
  } else {
    result.video = value;
  }
  result.hasVideo = YES;
  return self;
}
- (PBWaveBodyItemBuilder*) clearVideo {
  result.hasVideo = NO;
  result.video = [PBWaveBodyItemVideo defaultInstance];
  return self;
}
- (BOOL) hasLink {
  return result.hasLink;
}
- (PBWaveBodyItemLink*) link {
  return result.link;
}
- (PBWaveBodyItemBuilder*) setLink:(PBWaveBodyItemLink*) value {
  result.hasLink = YES;
  result.link = value;
  return self;
}
- (PBWaveBodyItemBuilder*) setLinkBuilder:(PBWaveBodyItemLinkBuilder*) builderForValue {
  return [self setLink:[builderForValue build]];
}
- (PBWaveBodyItemBuilder*) mergeLink:(PBWaveBodyItemLink*) value {
  if (result.hasLink &&
      result.link != [PBWaveBodyItemLink defaultInstance]) {
    result.link =
      [[[PBWaveBodyItemLink builderWithPrototype:result.link] mergeFrom:value] buildPartial];
  } else {
    result.link = value;
  }
  result.hasLink = YES;
  return self;
}
- (PBWaveBodyItemBuilder*) clearLink {
  result.hasLink = NO;
  result.link = [PBWaveBodyItemLink defaultInstance];
  return self;
}
- (BOOL) hasPicture {
  return result.hasPicture;
}
- (PBWaveBodyItemPicture*) picture {
  return result.picture;
}
- (PBWaveBodyItemBuilder*) setPicture:(PBWaveBodyItemPicture*) value {
  result.hasPicture = YES;
  result.picture = value;
  return self;
}
- (PBWaveBodyItemBuilder*) setPictureBuilder:(PBWaveBodyItemPictureBuilder*) builderForValue {
  return [self setPicture:[builderForValue build]];
}
- (PBWaveBodyItemBuilder*) mergePicture:(PBWaveBodyItemPicture*) value {
  if (result.hasPicture &&
      result.picture != [PBWaveBodyItemPicture defaultInstance]) {
    result.picture =
      [[[PBWaveBodyItemPicture builderWithPrototype:result.picture] mergeFrom:value] buildPartial];
  } else {
    result.picture = value;
  }
  result.hasPicture = YES;
  return self;
}
- (PBWaveBodyItemBuilder*) clearPicture {
  result.hasPicture = NO;
  result.picture = [PBWaveBodyItemPicture defaultInstance];
  return self;
}
@end

@interface PBWaveBodyBuilder()
@property (strong) PBWaveBody* result;
@end

@implementation PBWaveBodyBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveBody alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBodyBuilder*) clear {
  self.result = [[PBWaveBody alloc] init];
  return self;
}
- (PBWaveBodyBuilder*) clone {
  return [PBWaveBody builderWithPrototype:result];
}
- (PBWaveBody*) defaultInstance {
  return [PBWaveBody defaultInstance];
}
- (PBWaveBody*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveBody*) buildPartial {
  PBWaveBody* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBodyBuilder*) mergeFrom:(PBWaveBody*) other {
  if (other == [PBWaveBody defaultInstance]) {
    return self;
  }
  if (other.itemsArray.count > 0) {
    if (result.itemsArray == nil) {
      result.itemsArray = [[NSMutableArray alloc] initWithArray:other.itemsArray];
    } else {
      [result.itemsArray addObjectsFromArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBodyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveBodyItemBuilder* subBuilder = [PBWaveBodyItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)items {
  return result.itemsArray;
}
- (PBWaveBodyItem*)itemsAtIndex:(NSUInteger)index {
  return [result itemsAtIndex:index];
}
- (PBWaveBodyBuilder *)addItems:(PBWaveBodyItem*)value {
  if (result.itemsArray == nil) {
    result.itemsArray = [[NSMutableArray alloc]init];
  }
  [result.itemsArray addObject:value];
  return self;
}
- (PBWaveBodyBuilder *)setItemsArray:(NSArray *)array {
  result.itemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBWaveBodyBuilder *)clearItems {
  result.itemsArray = nil;
  return self;
}
@end

@interface PBOrgAttr ()
@property SInt64 orgId;
@property PBOrgAttrOrgType type;
@end

@implementation PBOrgAttr

- (BOOL) hasOrgId {
  return !!hasOrgId_;
}
- (void) setHasOrgId:(BOOL) value_ {
  hasOrgId_ = !!value_;
}
@synthesize orgId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.orgId = 0L;
    self.type = PBOrgAttrOrgTypeOrgTypePark;
  }
  return self;
}
static PBOrgAttr* defaultPBOrgAttrInstance = nil;
+ (void) initialize {
  if (self == [PBOrgAttr class]) {
    defaultPBOrgAttrInstance = [[PBOrgAttr alloc] init];
  }
}
+ (PBOrgAttr*) defaultInstance {
  return defaultPBOrgAttrInstance;
}
- (PBOrgAttr*) defaultInstance {
  return defaultPBOrgAttrInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrgId) {
    [output writeSInt64:1 value:self.orgId];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOrgId) {
    size_ += computeSInt64Size(1, self.orgId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBOrgAttr*) parseFromData:(NSData*) data {
  return (PBOrgAttr*)[[[PBOrgAttr builder] mergeFromData:data] build];
}
+ (PBOrgAttr*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOrgAttr*)[[[PBOrgAttr builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBOrgAttr*) parseFromInputStream:(NSInputStream*) input {
  return (PBOrgAttr*)[[[PBOrgAttr builder] mergeFromInputStream:input] build];
}
+ (PBOrgAttr*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOrgAttr*)[[[PBOrgAttr builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOrgAttr*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBOrgAttr*)[[[PBOrgAttr builder] mergeFromCodedInputStream:input] build];
}
+ (PBOrgAttr*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBOrgAttr*)[[[PBOrgAttr builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBOrgAttrBuilder*) builder {
  return [[PBOrgAttrBuilder alloc] init];
}
+ (PBOrgAttrBuilder*) builderWithPrototype:(PBOrgAttr*) prototype {
  return [[PBOrgAttr builder] mergeFrom:prototype];
}
- (PBOrgAttrBuilder*) builder {
  return [PBOrgAttr builder];
}
- (PBOrgAttrBuilder*) toBuilder {
  return [PBOrgAttr builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orgId", [NSNumber numberWithLongLong:self.orgId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBOrgAttr class]]) {
    return NO;
  }
  PBOrgAttr *otherMessage = other;
  return
      self.hasOrgId == otherMessage.hasOrgId &&
      (!self.hasOrgId || self.orgId == otherMessage.orgId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOrgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.orgId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBOrgAttrOrgTypeIsValidValue(PBOrgAttrOrgType value) {
  switch (value) {
    case PBOrgAttrOrgTypeOrgTypeCorp:
    case PBOrgAttrOrgTypeOrgTypePark:
      return YES;
    default:
      return NO;
  }
}
@interface PBOrgAttrBuilder()
@property (strong) PBOrgAttr* result;
@end

@implementation PBOrgAttrBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBOrgAttr alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBOrgAttrBuilder*) clear {
  self.result = [[PBOrgAttr alloc] init];
  return self;
}
- (PBOrgAttrBuilder*) clone {
  return [PBOrgAttr builderWithPrototype:result];
}
- (PBOrgAttr*) defaultInstance {
  return [PBOrgAttr defaultInstance];
}
- (PBOrgAttr*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBOrgAttr*) buildPartial {
  PBOrgAttr* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBOrgAttrBuilder*) mergeFrom:(PBOrgAttr*) other {
  if (other == [PBOrgAttr defaultInstance]) {
    return self;
  }
  if (other.hasOrgId) {
    [self setOrgId:other.orgId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBOrgAttrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBOrgAttrBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setOrgId:[input readSInt64]];
        break;
      }
      case 16: {
        PBOrgAttrOrgType value = (PBOrgAttrOrgType)[input readEnum];
        if (PBOrgAttrOrgTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasOrgId {
  return result.hasOrgId;
}
- (SInt64) orgId {
  return result.orgId;
}
- (PBOrgAttrBuilder*) setOrgId:(SInt64) value {
  result.hasOrgId = YES;
  result.orgId = value;
  return self;
}
- (PBOrgAttrBuilder*) clearOrgId {
  result.hasOrgId = NO;
  result.orgId = 0L;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBOrgAttrOrgType) type {
  return result.type;
}
- (PBOrgAttrBuilder*) setType:(PBOrgAttrOrgType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBOrgAttrBuilder*) clearType {
  result.hasType = NO;
  result.type = PBOrgAttrOrgTypeOrgTypePark;
  return self;
}
@end

@interface PBSystemSender ()
@property SInt64 id;
@property (strong) NSString* name;
@property (strong) NSString* avatarUrl;
@property PBSystemSenderType type;
@end

@implementation PBSystemSender

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) value_ {
  hasAvatarUrl_ = !!value_;
}
@synthesize avatarUrl;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.name = @"";
    self.avatarUrl = @"";
    self.type = PBSystemSenderTypeTypeCommon;
  }
  return self;
}
static PBSystemSender* defaultPBSystemSenderInstance = nil;
+ (void) initialize {
  if (self == [PBSystemSender class]) {
    defaultPBSystemSenderInstance = [[PBSystemSender alloc] init];
  }
}
+ (PBSystemSender*) defaultInstance {
  return defaultPBSystemSenderInstance;
}
- (PBSystemSender*) defaultInstance {
  return defaultPBSystemSenderInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasAvatarUrl) {
    [output writeString:3 value:self.avatarUrl];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(3, self.avatarUrl);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSystemSender*) parseFromData:(NSData*) data {
  return (PBSystemSender*)[[[PBSystemSender builder] mergeFromData:data] build];
}
+ (PBSystemSender*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSystemSender*)[[[PBSystemSender builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSystemSender*) parseFromInputStream:(NSInputStream*) input {
  return (PBSystemSender*)[[[PBSystemSender builder] mergeFromInputStream:input] build];
}
+ (PBSystemSender*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSystemSender*)[[[PBSystemSender builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSystemSender*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSystemSender*)[[[PBSystemSender builder] mergeFromCodedInputStream:input] build];
}
+ (PBSystemSender*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSystemSender*)[[[PBSystemSender builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSystemSenderBuilder*) builder {
  return [[PBSystemSenderBuilder alloc] init];
}
+ (PBSystemSenderBuilder*) builderWithPrototype:(PBSystemSender*) prototype {
  return [[PBSystemSender builder] mergeFrom:prototype];
}
- (PBSystemSenderBuilder*) builder {
  return [PBSystemSender builder];
}
- (PBSystemSenderBuilder*) toBuilder {
  return [PBSystemSender builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSystemSender class]]) {
    return NO;
  }
  PBSystemSender *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBSystemSenderTypeIsValidValue(PBSystemSenderType value) {
  switch (value) {
    case PBSystemSenderTypeTypeCommon:
    case PBSystemSenderTypeTypePark:
    case PBSystemSenderTypeTypePlatform:
      return YES;
    default:
      return NO;
  }
}
@interface PBSystemSenderBuilder()
@property (strong) PBSystemSender* result;
@end

@implementation PBSystemSenderBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSystemSender alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSystemSenderBuilder*) clear {
  self.result = [[PBSystemSender alloc] init];
  return self;
}
- (PBSystemSenderBuilder*) clone {
  return [PBSystemSender builderWithPrototype:result];
}
- (PBSystemSender*) defaultInstance {
  return [PBSystemSender defaultInstance];
}
- (PBSystemSender*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSystemSender*) buildPartial {
  PBSystemSender* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSystemSenderBuilder*) mergeFrom:(PBSystemSender*) other {
  if (other == [PBSystemSender defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSystemSenderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSystemSenderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setAvatarUrl:[input readString]];
        break;
      }
      case 32: {
        PBSystemSenderType value = (PBSystemSenderType)[input readEnum];
        if (PBSystemSenderTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBSystemSenderBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBSystemSenderBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBSystemSenderBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBSystemSenderBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAvatarUrl {
  return result.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return result.avatarUrl;
}
- (PBSystemSenderBuilder*) setAvatarUrl:(NSString*) value {
  result.hasAvatarUrl = YES;
  result.avatarUrl = value;
  return self;
}
- (PBSystemSenderBuilder*) clearAvatarUrl {
  result.hasAvatarUrl = NO;
  result.avatarUrl = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBSystemSenderType) type {
  return result.type;
}
- (PBSystemSenderBuilder*) setType:(PBSystemSenderType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBSystemSenderBuilder*) clearType {
  result.hasType = NO;
  result.type = PBSystemSenderTypeTypeCommon;
  return self;
}
@end

@interface PBWave ()
@property SInt64 id;
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property (strong) PBWaveBody* body;
@property (strong) PBOrgAttr* orgAttr;
@property PBWaveType type;
@property (strong) PBRedPacket* redPacket;
@property SInt64 createdAt;
@property SInt64 updatedAt;
@property SInt64 deletedAt;
@end

@implementation PBWave

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value_ {
  hasBody_ = !!value_;
}
@synthesize body;
- (BOOL) hasOrgAttr {
  return !!hasOrgAttr_;
}
- (void) setHasOrgAttr:(BOOL) value_ {
  hasOrgAttr_ = !!value_;
}
@synthesize orgAttr;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasRedPacket {
  return !!hasRedPacket_;
}
- (void) setHasRedPacket:(BOOL) value_ {
  hasRedPacket_ = !!value_;
}
@synthesize redPacket;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) value_ {
  hasUpdatedAt_ = !!value_;
}
@synthesize updatedAt;
- (BOOL) hasDeletedAt {
  return !!hasDeletedAt_;
}
- (void) setHasDeletedAt:(BOOL) value_ {
  hasDeletedAt_ = !!value_;
}
@synthesize deletedAt;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.body = [PBWaveBody defaultInstance];
    self.orgAttr = [PBOrgAttr defaultInstance];
    self.type = PBWaveTypeTypeNil;
    self.redPacket = [PBRedPacket defaultInstance];
    self.createdAt = 0L;
    self.updatedAt = 0L;
    self.deletedAt = 0L;
  }
  return self;
}
static PBWave* defaultPBWaveInstance = nil;
+ (void) initialize {
  if (self == [PBWave class]) {
    defaultPBWaveInstance = [[PBWave alloc] init];
  }
}
+ (PBWave*) defaultInstance {
  return defaultPBWaveInstance;
}
- (PBWave*) defaultInstance {
  return defaultPBWaveInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasSenderPassportId) {
    [output writeSInt64:2 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:3 value:self.systemSender];
  }
  if (self.hasBody) {
    [output writeMessage:4 value:self.body];
  }
  if (self.hasOrgAttr) {
    [output writeMessage:5 value:self.orgAttr];
  }
  if (self.hasType) {
    [output writeEnum:6 value:self.type];
  }
  if (self.hasRedPacket) {
    [output writeMessage:7 value:self.redPacket];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:8 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeSInt64:9 value:self.updatedAt];
  }
  if (self.hasDeletedAt) {
    [output writeSInt64:10 value:self.deletedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(2, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(3, self.systemSender);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(4, self.body);
  }
  if (self.hasOrgAttr) {
    size_ += computeMessageSize(5, self.orgAttr);
  }
  if (self.hasType) {
    size_ += computeEnumSize(6, self.type);
  }
  if (self.hasRedPacket) {
    size_ += computeMessageSize(7, self.redPacket);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(8, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeSInt64Size(9, self.updatedAt);
  }
  if (self.hasDeletedAt) {
    size_ += computeSInt64Size(10, self.deletedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWave*) parseFromData:(NSData*) data {
  return (PBWave*)[[[PBWave builder] mergeFromData:data] build];
}
+ (PBWave*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWave*)[[[PBWave builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWave*) parseFromInputStream:(NSInputStream*) input {
  return (PBWave*)[[[PBWave builder] mergeFromInputStream:input] build];
}
+ (PBWave*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWave*)[[[PBWave builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWave*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWave*)[[[PBWave builder] mergeFromCodedInputStream:input] build];
}
+ (PBWave*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWave*)[[[PBWave builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveBuilder*) builder {
  return [[PBWaveBuilder alloc] init];
}
+ (PBWaveBuilder*) builderWithPrototype:(PBWave*) prototype {
  return [[PBWave builder] mergeFrom:prototype];
}
- (PBWaveBuilder*) builder {
  return [PBWave builder];
}
- (PBWaveBuilder*) toBuilder {
  return [PBWave builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasOrgAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"orgAttr"];
    [self.orgAttr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasRedPacket) {
    [output appendFormat:@"%@%@ {\n", indent, @"redPacket"];
    [self.redPacket writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithLongLong:self.updatedAt]];
  }
  if (self.hasDeletedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deletedAt", [NSNumber numberWithLongLong:self.deletedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWave class]]) {
    return NO;
  }
  PBWave *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasOrgAttr == otherMessage.hasOrgAttr &&
      (!self.hasOrgAttr || [self.orgAttr isEqual:otherMessage.orgAttr]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasRedPacket == otherMessage.hasRedPacket &&
      (!self.hasRedPacket || [self.redPacket isEqual:otherMessage.redPacket]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      self.hasDeletedAt == otherMessage.hasDeletedAt &&
      (!self.hasDeletedAt || self.deletedAt == otherMessage.deletedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasOrgAttr) {
    hashCode = hashCode * 31 + [self.orgAttr hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasRedPacket) {
    hashCode = hashCode * 31 + [self.redPacket hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updatedAt] hash];
  }
  if (self.hasDeletedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.deletedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBWaveTypeIsValidValue(PBWaveType value) {
  switch (value) {
    case PBWaveTypeTypeNil:
    case PBWaveTypeTypeCommon:
    case PBWaveTypeTypeNews:
    case PBWaveTypeTypeRedPacket:
    case PBWaveTypeTypeNotice:
    case PBWaveTypeTypeActivity:
    case PBWaveTypeTypeLink:
      return YES;
    default:
      return NO;
  }
}
@interface PBWaveBuilder()
@property (strong) PBWave* result;
@end

@implementation PBWaveBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWave alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveBuilder*) clear {
  self.result = [[PBWave alloc] init];
  return self;
}
- (PBWaveBuilder*) clone {
  return [PBWave builderWithPrototype:result];
}
- (PBWave*) defaultInstance {
  return [PBWave defaultInstance];
}
- (PBWave*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWave*) buildPartial {
  PBWave* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveBuilder*) mergeFrom:(PBWave*) other {
  if (other == [PBWave defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  if (other.hasOrgAttr) {
    [self mergeOrgAttr:other.orgAttr];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasRedPacket) {
    [self mergeRedPacket:other.redPacket];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  if (other.hasDeletedAt) {
    [self setDeletedAt:other.deletedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 26: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        PBWaveBodyBuilder* subBuilder = [PBWaveBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        PBOrgAttrBuilder* subBuilder = [PBOrgAttr builder];
        if (self.hasOrgAttr) {
          [subBuilder mergeFrom:self.orgAttr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setOrgAttr:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        PBWaveType value = (PBWaveType)[input readEnum];
        if (PBWaveTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        PBRedPacketBuilder* subBuilder = [PBRedPacket builder];
        if (self.hasRedPacket) {
          [subBuilder mergeFrom:self.redPacket];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRedPacket:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 72: {
        [self setUpdatedAt:[input readSInt64]];
        break;
      }
      case 80: {
        [self setDeletedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBWaveBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBWaveBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBWaveBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBWaveBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBWaveBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBWaveBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBWaveBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBWaveBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (PBWaveBody*) body {
  return result.body;
}
- (PBWaveBuilder*) setBody:(PBWaveBody*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (PBWaveBuilder*) setBodyBuilder:(PBWaveBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (PBWaveBuilder*) mergeBody:(PBWaveBody*) value {
  if (result.hasBody &&
      result.body != [PBWaveBody defaultInstance]) {
    result.body =
      [[[PBWaveBody builderWithPrototype:result.body] mergeFrom:value] buildPartial];
  } else {
    result.body = value;
  }
  result.hasBody = YES;
  return self;
}
- (PBWaveBuilder*) clearBody {
  result.hasBody = NO;
  result.body = [PBWaveBody defaultInstance];
  return self;
}
- (BOOL) hasOrgAttr {
  return result.hasOrgAttr;
}
- (PBOrgAttr*) orgAttr {
  return result.orgAttr;
}
- (PBWaveBuilder*) setOrgAttr:(PBOrgAttr*) value {
  result.hasOrgAttr = YES;
  result.orgAttr = value;
  return self;
}
- (PBWaveBuilder*) setOrgAttrBuilder:(PBOrgAttrBuilder*) builderForValue {
  return [self setOrgAttr:[builderForValue build]];
}
- (PBWaveBuilder*) mergeOrgAttr:(PBOrgAttr*) value {
  if (result.hasOrgAttr &&
      result.orgAttr != [PBOrgAttr defaultInstance]) {
    result.orgAttr =
      [[[PBOrgAttr builderWithPrototype:result.orgAttr] mergeFrom:value] buildPartial];
  } else {
    result.orgAttr = value;
  }
  result.hasOrgAttr = YES;
  return self;
}
- (PBWaveBuilder*) clearOrgAttr {
  result.hasOrgAttr = NO;
  result.orgAttr = [PBOrgAttr defaultInstance];
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBWaveType) type {
  return result.type;
}
- (PBWaveBuilder*) setType:(PBWaveType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBWaveBuilder*) clearType {
  result.hasType = NO;
  result.type = PBWaveTypeTypeNil;
  return self;
}
- (BOOL) hasRedPacket {
  return result.hasRedPacket;
}
- (PBRedPacket*) redPacket {
  return result.redPacket;
}
- (PBWaveBuilder*) setRedPacket:(PBRedPacket*) value {
  result.hasRedPacket = YES;
  result.redPacket = value;
  return self;
}
- (PBWaveBuilder*) setRedPacketBuilder:(PBRedPacketBuilder*) builderForValue {
  return [self setRedPacket:[builderForValue build]];
}
- (PBWaveBuilder*) mergeRedPacket:(PBRedPacket*) value {
  if (result.hasRedPacket &&
      result.redPacket != [PBRedPacket defaultInstance]) {
    result.redPacket =
      [[[PBRedPacket builderWithPrototype:result.redPacket] mergeFrom:value] buildPartial];
  } else {
    result.redPacket = value;
  }
  result.hasRedPacket = YES;
  return self;
}
- (PBWaveBuilder*) clearRedPacket {
  result.hasRedPacket = NO;
  result.redPacket = [PBRedPacket defaultInstance];
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBWaveBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBWaveBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasUpdatedAt {
  return result.hasUpdatedAt;
}
- (SInt64) updatedAt {
  return result.updatedAt;
}
- (PBWaveBuilder*) setUpdatedAt:(SInt64) value {
  result.hasUpdatedAt = YES;
  result.updatedAt = value;
  return self;
}
- (PBWaveBuilder*) clearUpdatedAt {
  result.hasUpdatedAt = NO;
  result.updatedAt = 0L;
  return self;
}
- (BOOL) hasDeletedAt {
  return result.hasDeletedAt;
}
- (SInt64) deletedAt {
  return result.deletedAt;
}
- (PBWaveBuilder*) setDeletedAt:(SInt64) value {
  result.hasDeletedAt = YES;
  result.deletedAt = value;
  return self;
}
- (PBWaveBuilder*) clearDeletedAt {
  result.hasDeletedAt = NO;
  result.deletedAt = 0L;
  return self;
}
@end

@interface PBWaveComment ()
@property SInt64 id;
@property SInt64 waveId;
@property SInt64 fromPassportId;
@property SInt64 toPassportId;
@property PBWaveCommentType type;
@property (strong) PBWaveBody* body;
@property SInt64 createdAt;
@property SInt64 updatedAt;
@property SInt64 deletedAt;
@end

@implementation PBWaveComment

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasWaveId {
  return !!hasWaveId_;
}
- (void) setHasWaveId:(BOOL) value_ {
  hasWaveId_ = !!value_;
}
@synthesize waveId;
- (BOOL) hasFromPassportId {
  return !!hasFromPassportId_;
}
- (void) setHasFromPassportId:(BOOL) value_ {
  hasFromPassportId_ = !!value_;
}
@synthesize fromPassportId;
- (BOOL) hasToPassportId {
  return !!hasToPassportId_;
}
- (void) setHasToPassportId:(BOOL) value_ {
  hasToPassportId_ = !!value_;
}
@synthesize toPassportId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value_ {
  hasBody_ = !!value_;
}
@synthesize body;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) value_ {
  hasUpdatedAt_ = !!value_;
}
@synthesize updatedAt;
- (BOOL) hasDeletedAt {
  return !!hasDeletedAt_;
}
- (void) setHasDeletedAt:(BOOL) value_ {
  hasDeletedAt_ = !!value_;
}
@synthesize deletedAt;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.waveId = 0L;
    self.fromPassportId = 0L;
    self.toPassportId = 0L;
    self.type = PBWaveCommentTypeTypeLike;
    self.body = [PBWaveBody defaultInstance];
    self.createdAt = 0L;
    self.updatedAt = 0L;
    self.deletedAt = 0L;
  }
  return self;
}
static PBWaveComment* defaultPBWaveCommentInstance = nil;
+ (void) initialize {
  if (self == [PBWaveComment class]) {
    defaultPBWaveCommentInstance = [[PBWaveComment alloc] init];
  }
}
+ (PBWaveComment*) defaultInstance {
  return defaultPBWaveCommentInstance;
}
- (PBWaveComment*) defaultInstance {
  return defaultPBWaveCommentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasWaveId) {
    [output writeSInt64:2 value:self.waveId];
  }
  if (self.hasFromPassportId) {
    [output writeSInt64:3 value:self.fromPassportId];
  }
  if (self.hasToPassportId) {
    [output writeSInt64:4 value:self.toPassportId];
  }
  if (self.hasType) {
    [output writeEnum:5 value:self.type];
  }
  if (self.hasBody) {
    [output writeMessage:6 value:self.body];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:7 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeSInt64:8 value:self.updatedAt];
  }
  if (self.hasDeletedAt) {
    [output writeSInt64:9 value:self.deletedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasWaveId) {
    size_ += computeSInt64Size(2, self.waveId);
  }
  if (self.hasFromPassportId) {
    size_ += computeSInt64Size(3, self.fromPassportId);
  }
  if (self.hasToPassportId) {
    size_ += computeSInt64Size(4, self.toPassportId);
  }
  if (self.hasType) {
    size_ += computeEnumSize(5, self.type);
  }
  if (self.hasBody) {
    size_ += computeMessageSize(6, self.body);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(7, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeSInt64Size(8, self.updatedAt);
  }
  if (self.hasDeletedAt) {
    size_ += computeSInt64Size(9, self.deletedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveComment*) parseFromData:(NSData*) data {
  return (PBWaveComment*)[[[PBWaveComment builder] mergeFromData:data] build];
}
+ (PBWaveComment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveComment*)[[[PBWaveComment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveComment*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveComment*)[[[PBWaveComment builder] mergeFromInputStream:input] build];
}
+ (PBWaveComment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveComment*)[[[PBWaveComment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveComment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveComment*)[[[PBWaveComment builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveComment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveComment*)[[[PBWaveComment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveCommentBuilder*) builder {
  return [[PBWaveCommentBuilder alloc] init];
}
+ (PBWaveCommentBuilder*) builderWithPrototype:(PBWaveComment*) prototype {
  return [[PBWaveComment builder] mergeFrom:prototype];
}
- (PBWaveCommentBuilder*) builder {
  return [PBWaveComment builder];
}
- (PBWaveCommentBuilder*) toBuilder {
  return [PBWaveComment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasWaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveId", [NSNumber numberWithLongLong:self.waveId]];
  }
  if (self.hasFromPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromPassportId", [NSNumber numberWithLongLong:self.fromPassportId]];
  }
  if (self.hasToPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toPassportId", [NSNumber numberWithLongLong:self.toPassportId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@ {\n", indent, @"body"];
    [self.body writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithLongLong:self.updatedAt]];
  }
  if (self.hasDeletedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deletedAt", [NSNumber numberWithLongLong:self.deletedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveComment class]]) {
    return NO;
  }
  PBWaveComment *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasWaveId == otherMessage.hasWaveId &&
      (!self.hasWaveId || self.waveId == otherMessage.waveId) &&
      self.hasFromPassportId == otherMessage.hasFromPassportId &&
      (!self.hasFromPassportId || self.fromPassportId == otherMessage.fromPassportId) &&
      self.hasToPassportId == otherMessage.hasToPassportId &&
      (!self.hasToPassportId || self.toPassportId == otherMessage.toPassportId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      self.hasDeletedAt == otherMessage.hasDeletedAt &&
      (!self.hasDeletedAt || self.deletedAt == otherMessage.deletedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasWaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.waveId] hash];
  }
  if (self.hasFromPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromPassportId] hash];
  }
  if (self.hasToPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toPassportId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updatedAt] hash];
  }
  if (self.hasDeletedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.deletedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBWaveCommentTypeIsValidValue(PBWaveCommentType value) {
  switch (value) {
    case PBWaveCommentTypeTypeLike:
    case PBWaveCommentTypeTypeComment:
      return YES;
    default:
      return NO;
  }
}
@interface PBWaveCommentBuilder()
@property (strong) PBWaveComment* result;
@end

@implementation PBWaveCommentBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveComment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveCommentBuilder*) clear {
  self.result = [[PBWaveComment alloc] init];
  return self;
}
- (PBWaveCommentBuilder*) clone {
  return [PBWaveComment builderWithPrototype:result];
}
- (PBWaveComment*) defaultInstance {
  return [PBWaveComment defaultInstance];
}
- (PBWaveComment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveComment*) buildPartial {
  PBWaveComment* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveCommentBuilder*) mergeFrom:(PBWaveComment*) other {
  if (other == [PBWaveComment defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasWaveId) {
    [self setWaveId:other.waveId];
  }
  if (other.hasFromPassportId) {
    [self setFromPassportId:other.fromPassportId];
  }
  if (other.hasToPassportId) {
    [self setToPassportId:other.toPassportId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasBody) {
    [self mergeBody:other.body];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  if (other.hasDeletedAt) {
    [self setDeletedAt:other.deletedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveCommentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setWaveId:[input readSInt64]];
        break;
      }
      case 24: {
        [self setFromPassportId:[input readSInt64]];
        break;
      }
      case 32: {
        [self setToPassportId:[input readSInt64]];
        break;
      }
      case 40: {
        PBWaveCommentType value = (PBWaveCommentType)[input readEnum];
        if (PBWaveCommentTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        PBWaveBodyBuilder* subBuilder = [PBWaveBody builder];
        if (self.hasBody) {
          [subBuilder mergeFrom:self.body];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBody:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 64: {
        [self setUpdatedAt:[input readSInt64]];
        break;
      }
      case 72: {
        [self setDeletedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBWaveCommentBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBWaveCommentBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasWaveId {
  return result.hasWaveId;
}
- (SInt64) waveId {
  return result.waveId;
}
- (PBWaveCommentBuilder*) setWaveId:(SInt64) value {
  result.hasWaveId = YES;
  result.waveId = value;
  return self;
}
- (PBWaveCommentBuilder*) clearWaveId {
  result.hasWaveId = NO;
  result.waveId = 0L;
  return self;
}
- (BOOL) hasFromPassportId {
  return result.hasFromPassportId;
}
- (SInt64) fromPassportId {
  return result.fromPassportId;
}
- (PBWaveCommentBuilder*) setFromPassportId:(SInt64) value {
  result.hasFromPassportId = YES;
  result.fromPassportId = value;
  return self;
}
- (PBWaveCommentBuilder*) clearFromPassportId {
  result.hasFromPassportId = NO;
  result.fromPassportId = 0L;
  return self;
}
- (BOOL) hasToPassportId {
  return result.hasToPassportId;
}
- (SInt64) toPassportId {
  return result.toPassportId;
}
- (PBWaveCommentBuilder*) setToPassportId:(SInt64) value {
  result.hasToPassportId = YES;
  result.toPassportId = value;
  return self;
}
- (PBWaveCommentBuilder*) clearToPassportId {
  result.hasToPassportId = NO;
  result.toPassportId = 0L;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBWaveCommentType) type {
  return result.type;
}
- (PBWaveCommentBuilder*) setType:(PBWaveCommentType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBWaveCommentBuilder*) clearType {
  result.hasType = NO;
  result.type = PBWaveCommentTypeTypeLike;
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (PBWaveBody*) body {
  return result.body;
}
- (PBWaveCommentBuilder*) setBody:(PBWaveBody*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (PBWaveCommentBuilder*) setBodyBuilder:(PBWaveBodyBuilder*) builderForValue {
  return [self setBody:[builderForValue build]];
}
- (PBWaveCommentBuilder*) mergeBody:(PBWaveBody*) value {
  if (result.hasBody &&
      result.body != [PBWaveBody defaultInstance]) {
    result.body =
      [[[PBWaveBody builderWithPrototype:result.body] mergeFrom:value] buildPartial];
  } else {
    result.body = value;
  }
  result.hasBody = YES;
  return self;
}
- (PBWaveCommentBuilder*) clearBody {
  result.hasBody = NO;
  result.body = [PBWaveBody defaultInstance];
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBWaveCommentBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBWaveCommentBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasUpdatedAt {
  return result.hasUpdatedAt;
}
- (SInt64) updatedAt {
  return result.updatedAt;
}
- (PBWaveCommentBuilder*) setUpdatedAt:(SInt64) value {
  result.hasUpdatedAt = YES;
  result.updatedAt = value;
  return self;
}
- (PBWaveCommentBuilder*) clearUpdatedAt {
  result.hasUpdatedAt = NO;
  result.updatedAt = 0L;
  return self;
}
- (BOOL) hasDeletedAt {
  return result.hasDeletedAt;
}
- (SInt64) deletedAt {
  return result.deletedAt;
}
- (PBWaveCommentBuilder*) setDeletedAt:(SInt64) value {
  result.hasDeletedAt = YES;
  result.deletedAt = value;
  return self;
}
- (PBWaveCommentBuilder*) clearDeletedAt {
  result.hasDeletedAt = NO;
  result.deletedAt = 0L;
  return self;
}
@end

@interface PBFetchUserWaveCountReq ()
@property (strong) NSMutableArray * usArray;
@end

@implementation PBFetchUserWaveCountReq

@synthesize usArray;
@dynamic us;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchUserWaveCountReq* defaultPBFetchUserWaveCountReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchUserWaveCountReq class]) {
    defaultPBFetchUserWaveCountReqInstance = [[PBFetchUserWaveCountReq alloc] init];
  }
}
+ (PBFetchUserWaveCountReq*) defaultInstance {
  return defaultPBFetchUserWaveCountReqInstance;
}
- (PBFetchUserWaveCountReq*) defaultInstance {
  return defaultPBFetchUserWaveCountReqInstance;
}
- (NSArray *)us {
  return usArray;
}
- (PBFetchUserWaveCountReqUserStamp*)usAtIndex:(NSUInteger)index {
  return [usArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.usArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountReqUserStamp *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.usArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountReqUserStamp *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchUserWaveCountReq*) parseFromData:(NSData*) data {
  return (PBFetchUserWaveCountReq*)[[[PBFetchUserWaveCountReq builder] mergeFromData:data] build];
}
+ (PBFetchUserWaveCountReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountReq*)[[[PBFetchUserWaveCountReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchUserWaveCountReq*)[[[PBFetchUserWaveCountReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchUserWaveCountReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountReq*)[[[PBFetchUserWaveCountReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchUserWaveCountReq*)[[[PBFetchUserWaveCountReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchUserWaveCountReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountReq*)[[[PBFetchUserWaveCountReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountReqBuilder*) builder {
  return [[PBFetchUserWaveCountReqBuilder alloc] init];
}
+ (PBFetchUserWaveCountReqBuilder*) builderWithPrototype:(PBFetchUserWaveCountReq*) prototype {
  return [[PBFetchUserWaveCountReq builder] mergeFrom:prototype];
}
- (PBFetchUserWaveCountReqBuilder*) builder {
  return [PBFetchUserWaveCountReq builder];
}
- (PBFetchUserWaveCountReqBuilder*) toBuilder {
  return [PBFetchUserWaveCountReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.usArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountReqUserStamp *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"us"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchUserWaveCountReq class]]) {
    return NO;
  }
  PBFetchUserWaveCountReq *otherMessage = other;
  return
      [self.usArray isEqualToArray:otherMessage.usArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.usArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountReqUserStamp *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchUserWaveCountReqUserStamp ()
@property SInt64 uid;
@property SInt64 startTimestamp;
@property SInt64 endTimestamp;
@end

@implementation PBFetchUserWaveCountReqUserStamp

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value_ {
  hasUid_ = !!value_;
}
@synthesize uid;
- (BOOL) hasStartTimestamp {
  return !!hasStartTimestamp_;
}
- (void) setHasStartTimestamp:(BOOL) value_ {
  hasStartTimestamp_ = !!value_;
}
@synthesize startTimestamp;
- (BOOL) hasEndTimestamp {
  return !!hasEndTimestamp_;
}
- (void) setHasEndTimestamp:(BOOL) value_ {
  hasEndTimestamp_ = !!value_;
}
@synthesize endTimestamp;
- (id) init {
  if ((self = [super init])) {
    self.uid = 0L;
    self.startTimestamp = 0L;
    self.endTimestamp = 0L;
  }
  return self;
}
static PBFetchUserWaveCountReqUserStamp* defaultPBFetchUserWaveCountReqUserStampInstance = nil;
+ (void) initialize {
  if (self == [PBFetchUserWaveCountReqUserStamp class]) {
    defaultPBFetchUserWaveCountReqUserStampInstance = [[PBFetchUserWaveCountReqUserStamp alloc] init];
  }
}
+ (PBFetchUserWaveCountReqUserStamp*) defaultInstance {
  return defaultPBFetchUserWaveCountReqUserStampInstance;
}
- (PBFetchUserWaveCountReqUserStamp*) defaultInstance {
  return defaultPBFetchUserWaveCountReqUserStampInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeSInt64:1 value:self.uid];
  }
  if (self.hasStartTimestamp) {
    [output writeSInt64:2 value:self.startTimestamp];
  }
  if (self.hasEndTimestamp) {
    [output writeSInt64:3 value:self.endTimestamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeSInt64Size(1, self.uid);
  }
  if (self.hasStartTimestamp) {
    size_ += computeSInt64Size(2, self.startTimestamp);
  }
  if (self.hasEndTimestamp) {
    size_ += computeSInt64Size(3, self.endTimestamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchUserWaveCountReqUserStamp*) parseFromData:(NSData*) data {
  return (PBFetchUserWaveCountReqUserStamp*)[[[PBFetchUserWaveCountReqUserStamp builder] mergeFromData:data] build];
}
+ (PBFetchUserWaveCountReqUserStamp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountReqUserStamp*)[[[PBFetchUserWaveCountReqUserStamp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountReqUserStamp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchUserWaveCountReqUserStamp*)[[[PBFetchUserWaveCountReqUserStamp builder] mergeFromInputStream:input] build];
}
+ (PBFetchUserWaveCountReqUserStamp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountReqUserStamp*)[[[PBFetchUserWaveCountReqUserStamp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountReqUserStamp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchUserWaveCountReqUserStamp*)[[[PBFetchUserWaveCountReqUserStamp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchUserWaveCountReqUserStamp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountReqUserStamp*)[[[PBFetchUserWaveCountReqUserStamp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountReqUserStampBuilder*) builder {
  return [[PBFetchUserWaveCountReqUserStampBuilder alloc] init];
}
+ (PBFetchUserWaveCountReqUserStampBuilder*) builderWithPrototype:(PBFetchUserWaveCountReqUserStamp*) prototype {
  return [[PBFetchUserWaveCountReqUserStamp builder] mergeFrom:prototype];
}
- (PBFetchUserWaveCountReqUserStampBuilder*) builder {
  return [PBFetchUserWaveCountReqUserStamp builder];
}
- (PBFetchUserWaveCountReqUserStampBuilder*) toBuilder {
  return [PBFetchUserWaveCountReqUserStamp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithLongLong:self.uid]];
  }
  if (self.hasStartTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTimestamp", [NSNumber numberWithLongLong:self.startTimestamp]];
  }
  if (self.hasEndTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTimestamp", [NSNumber numberWithLongLong:self.endTimestamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchUserWaveCountReqUserStamp class]]) {
    return NO;
  }
  PBFetchUserWaveCountReqUserStamp *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasStartTimestamp == otherMessage.hasStartTimestamp &&
      (!self.hasStartTimestamp || self.startTimestamp == otherMessage.startTimestamp) &&
      self.hasEndTimestamp == otherMessage.hasEndTimestamp &&
      (!self.hasEndTimestamp || self.endTimestamp == otherMessage.endTimestamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.uid] hash];
  }
  if (self.hasStartTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startTimestamp] hash];
  }
  if (self.hasEndTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.endTimestamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchUserWaveCountReqUserStampBuilder()
@property (strong) PBFetchUserWaveCountReqUserStamp* result;
@end

@implementation PBFetchUserWaveCountReqUserStampBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchUserWaveCountReqUserStamp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) clear {
  self.result = [[PBFetchUserWaveCountReqUserStamp alloc] init];
  return self;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) clone {
  return [PBFetchUserWaveCountReqUserStamp builderWithPrototype:result];
}
- (PBFetchUserWaveCountReqUserStamp*) defaultInstance {
  return [PBFetchUserWaveCountReqUserStamp defaultInstance];
}
- (PBFetchUserWaveCountReqUserStamp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchUserWaveCountReqUserStamp*) buildPartial {
  PBFetchUserWaveCountReqUserStamp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) mergeFrom:(PBFetchUserWaveCountReqUserStamp*) other {
  if (other == [PBFetchUserWaveCountReqUserStamp defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasStartTimestamp) {
    [self setStartTimestamp:other.startTimestamp];
  }
  if (other.hasEndTimestamp) {
    [self setEndTimestamp:other.endTimestamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchUserWaveCountReqUserStampBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readSInt64]];
        break;
      }
      case 16: {
        [self setStartTimestamp:[input readSInt64]];
        break;
      }
      case 24: {
        [self setEndTimestamp:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (SInt64) uid {
  return result.uid;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) setUid:(SInt64) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) clearUid {
  result.hasUid = NO;
  result.uid = 0L;
  return self;
}
- (BOOL) hasStartTimestamp {
  return result.hasStartTimestamp;
}
- (SInt64) startTimestamp {
  return result.startTimestamp;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) setStartTimestamp:(SInt64) value {
  result.hasStartTimestamp = YES;
  result.startTimestamp = value;
  return self;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) clearStartTimestamp {
  result.hasStartTimestamp = NO;
  result.startTimestamp = 0L;
  return self;
}
- (BOOL) hasEndTimestamp {
  return result.hasEndTimestamp;
}
- (SInt64) endTimestamp {
  return result.endTimestamp;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) setEndTimestamp:(SInt64) value {
  result.hasEndTimestamp = YES;
  result.endTimestamp = value;
  return self;
}
- (PBFetchUserWaveCountReqUserStampBuilder*) clearEndTimestamp {
  result.hasEndTimestamp = NO;
  result.endTimestamp = 0L;
  return self;
}
@end

@interface PBFetchUserWaveCountReqBuilder()
@property (strong) PBFetchUserWaveCountReq* result;
@end

@implementation PBFetchUserWaveCountReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchUserWaveCountReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchUserWaveCountReqBuilder*) clear {
  self.result = [[PBFetchUserWaveCountReq alloc] init];
  return self;
}
- (PBFetchUserWaveCountReqBuilder*) clone {
  return [PBFetchUserWaveCountReq builderWithPrototype:result];
}
- (PBFetchUserWaveCountReq*) defaultInstance {
  return [PBFetchUserWaveCountReq defaultInstance];
}
- (PBFetchUserWaveCountReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchUserWaveCountReq*) buildPartial {
  PBFetchUserWaveCountReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchUserWaveCountReqBuilder*) mergeFrom:(PBFetchUserWaveCountReq*) other {
  if (other == [PBFetchUserWaveCountReq defaultInstance]) {
    return self;
  }
  if (other.usArray.count > 0) {
    if (result.usArray == nil) {
      result.usArray = [[NSMutableArray alloc] initWithArray:other.usArray];
    } else {
      [result.usArray addObjectsFromArray:other.usArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchUserWaveCountReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchUserWaveCountReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBFetchUserWaveCountReqUserStampBuilder* subBuilder = [PBFetchUserWaveCountReqUserStamp builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)us {
  return result.usArray;
}
- (PBFetchUserWaveCountReqUserStamp*)usAtIndex:(NSUInteger)index {
  return [result usAtIndex:index];
}
- (PBFetchUserWaveCountReqBuilder *)addUs:(PBFetchUserWaveCountReqUserStamp*)value {
  if (result.usArray == nil) {
    result.usArray = [[NSMutableArray alloc]init];
  }
  [result.usArray addObject:value];
  return self;
}
- (PBFetchUserWaveCountReqBuilder *)setUsArray:(NSArray *)array {
  result.usArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchUserWaveCountReqBuilder *)clearUs {
  result.usArray = nil;
  return self;
}
@end

@interface PBFetchUserWaveCountResp ()
@property (strong) NSMutableArray * userWaveCountArray;
@end

@implementation PBFetchUserWaveCountResp

@synthesize userWaveCountArray;
@dynamic userWaveCount;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchUserWaveCountResp* defaultPBFetchUserWaveCountRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchUserWaveCountResp class]) {
    defaultPBFetchUserWaveCountRespInstance = [[PBFetchUserWaveCountResp alloc] init];
  }
}
+ (PBFetchUserWaveCountResp*) defaultInstance {
  return defaultPBFetchUserWaveCountRespInstance;
}
- (PBFetchUserWaveCountResp*) defaultInstance {
  return defaultPBFetchUserWaveCountRespInstance;
}
- (NSArray *)userWaveCount {
  return userWaveCountArray;
}
- (PBFetchUserWaveCountRespUserWaveCount*)userWaveCountAtIndex:(NSUInteger)index {
  return [userWaveCountArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.userWaveCountArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountRespUserWaveCount *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.userWaveCountArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountRespUserWaveCount *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchUserWaveCountResp*) parseFromData:(NSData*) data {
  return (PBFetchUserWaveCountResp*)[[[PBFetchUserWaveCountResp builder] mergeFromData:data] build];
}
+ (PBFetchUserWaveCountResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountResp*)[[[PBFetchUserWaveCountResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchUserWaveCountResp*)[[[PBFetchUserWaveCountResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchUserWaveCountResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountResp*)[[[PBFetchUserWaveCountResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchUserWaveCountResp*)[[[PBFetchUserWaveCountResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchUserWaveCountResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountResp*)[[[PBFetchUserWaveCountResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountRespBuilder*) builder {
  return [[PBFetchUserWaveCountRespBuilder alloc] init];
}
+ (PBFetchUserWaveCountRespBuilder*) builderWithPrototype:(PBFetchUserWaveCountResp*) prototype {
  return [[PBFetchUserWaveCountResp builder] mergeFrom:prototype];
}
- (PBFetchUserWaveCountRespBuilder*) builder {
  return [PBFetchUserWaveCountResp builder];
}
- (PBFetchUserWaveCountRespBuilder*) toBuilder {
  return [PBFetchUserWaveCountResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.userWaveCountArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountRespUserWaveCount *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userWaveCount"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchUserWaveCountResp class]]) {
    return NO;
  }
  PBFetchUserWaveCountResp *otherMessage = other;
  return
      [self.userWaveCountArray isEqualToArray:otherMessage.userWaveCountArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.userWaveCountArray enumerateObjectsUsingBlock:^(PBFetchUserWaveCountRespUserWaveCount *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchUserWaveCountRespUserWaveCount ()
@property SInt64 uid;
@property SInt64 count;
@end

@implementation PBFetchUserWaveCountRespUserWaveCount

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value_ {
  hasUid_ = !!value_;
}
@synthesize uid;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value_ {
  hasCount_ = !!value_;
}
@synthesize count;
- (id) init {
  if ((self = [super init])) {
    self.uid = 0L;
    self.count = 0L;
  }
  return self;
}
static PBFetchUserWaveCountRespUserWaveCount* defaultPBFetchUserWaveCountRespUserWaveCountInstance = nil;
+ (void) initialize {
  if (self == [PBFetchUserWaveCountRespUserWaveCount class]) {
    defaultPBFetchUserWaveCountRespUserWaveCountInstance = [[PBFetchUserWaveCountRespUserWaveCount alloc] init];
  }
}
+ (PBFetchUserWaveCountRespUserWaveCount*) defaultInstance {
  return defaultPBFetchUserWaveCountRespUserWaveCountInstance;
}
- (PBFetchUserWaveCountRespUserWaveCount*) defaultInstance {
  return defaultPBFetchUserWaveCountRespUserWaveCountInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeSInt64:1 value:self.uid];
  }
  if (self.hasCount) {
    [output writeSInt64:2 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeSInt64Size(1, self.uid);
  }
  if (self.hasCount) {
    size_ += computeSInt64Size(2, self.count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchUserWaveCountRespUserWaveCount*) parseFromData:(NSData*) data {
  return (PBFetchUserWaveCountRespUserWaveCount*)[[[PBFetchUserWaveCountRespUserWaveCount builder] mergeFromData:data] build];
}
+ (PBFetchUserWaveCountRespUserWaveCount*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountRespUserWaveCount*)[[[PBFetchUserWaveCountRespUserWaveCount builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountRespUserWaveCount*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchUserWaveCountRespUserWaveCount*)[[[PBFetchUserWaveCountRespUserWaveCount builder] mergeFromInputStream:input] build];
}
+ (PBFetchUserWaveCountRespUserWaveCount*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountRespUserWaveCount*)[[[PBFetchUserWaveCountRespUserWaveCount builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountRespUserWaveCount*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchUserWaveCountRespUserWaveCount*)[[[PBFetchUserWaveCountRespUserWaveCount builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchUserWaveCountRespUserWaveCount*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserWaveCountRespUserWaveCount*)[[[PBFetchUserWaveCountRespUserWaveCount builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserWaveCountRespUserWaveCountBuilder*) builder {
  return [[PBFetchUserWaveCountRespUserWaveCountBuilder alloc] init];
}
+ (PBFetchUserWaveCountRespUserWaveCountBuilder*) builderWithPrototype:(PBFetchUserWaveCountRespUserWaveCount*) prototype {
  return [[PBFetchUserWaveCountRespUserWaveCount builder] mergeFrom:prototype];
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) builder {
  return [PBFetchUserWaveCountRespUserWaveCount builder];
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) toBuilder {
  return [PBFetchUserWaveCountRespUserWaveCount builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithLongLong:self.uid]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithLongLong:self.count]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchUserWaveCountRespUserWaveCount class]]) {
    return NO;
  }
  PBFetchUserWaveCountRespUserWaveCount *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.uid] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.count] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchUserWaveCountRespUserWaveCountBuilder()
@property (strong) PBFetchUserWaveCountRespUserWaveCount* result;
@end

@implementation PBFetchUserWaveCountRespUserWaveCountBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchUserWaveCountRespUserWaveCount alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) clear {
  self.result = [[PBFetchUserWaveCountRespUserWaveCount alloc] init];
  return self;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) clone {
  return [PBFetchUserWaveCountRespUserWaveCount builderWithPrototype:result];
}
- (PBFetchUserWaveCountRespUserWaveCount*) defaultInstance {
  return [PBFetchUserWaveCountRespUserWaveCount defaultInstance];
}
- (PBFetchUserWaveCountRespUserWaveCount*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchUserWaveCountRespUserWaveCount*) buildPartial {
  PBFetchUserWaveCountRespUserWaveCount* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) mergeFrom:(PBFetchUserWaveCountRespUserWaveCount*) other {
  if (other == [PBFetchUserWaveCountRespUserWaveCount defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readSInt64]];
        break;
      }
      case 16: {
        [self setCount:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (SInt64) uid {
  return result.uid;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) setUid:(SInt64) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) clearUid {
  result.hasUid = NO;
  result.uid = 0L;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (SInt64) count {
  return result.count;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) setCount:(SInt64) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBFetchUserWaveCountRespUserWaveCountBuilder*) clearCount {
  result.hasCount = NO;
  result.count = 0L;
  return self;
}
@end

@interface PBFetchUserWaveCountRespBuilder()
@property (strong) PBFetchUserWaveCountResp* result;
@end

@implementation PBFetchUserWaveCountRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchUserWaveCountResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchUserWaveCountRespBuilder*) clear {
  self.result = [[PBFetchUserWaveCountResp alloc] init];
  return self;
}
- (PBFetchUserWaveCountRespBuilder*) clone {
  return [PBFetchUserWaveCountResp builderWithPrototype:result];
}
- (PBFetchUserWaveCountResp*) defaultInstance {
  return [PBFetchUserWaveCountResp defaultInstance];
}
- (PBFetchUserWaveCountResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchUserWaveCountResp*) buildPartial {
  PBFetchUserWaveCountResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchUserWaveCountRespBuilder*) mergeFrom:(PBFetchUserWaveCountResp*) other {
  if (other == [PBFetchUserWaveCountResp defaultInstance]) {
    return self;
  }
  if (other.userWaveCountArray.count > 0) {
    if (result.userWaveCountArray == nil) {
      result.userWaveCountArray = [[NSMutableArray alloc] initWithArray:other.userWaveCountArray];
    } else {
      [result.userWaveCountArray addObjectsFromArray:other.userWaveCountArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchUserWaveCountRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchUserWaveCountRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBFetchUserWaveCountRespUserWaveCountBuilder* subBuilder = [PBFetchUserWaveCountRespUserWaveCount builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserWaveCount:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)userWaveCount {
  return result.userWaveCountArray;
}
- (PBFetchUserWaveCountRespUserWaveCount*)userWaveCountAtIndex:(NSUInteger)index {
  return [result userWaveCountAtIndex:index];
}
- (PBFetchUserWaveCountRespBuilder *)addUserWaveCount:(PBFetchUserWaveCountRespUserWaveCount*)value {
  if (result.userWaveCountArray == nil) {
    result.userWaveCountArray = [[NSMutableArray alloc]init];
  }
  [result.userWaveCountArray addObject:value];
  return self;
}
- (PBFetchUserWaveCountRespBuilder *)setUserWaveCountArray:(NSArray *)array {
  result.userWaveCountArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchUserWaveCountRespBuilder *)clearUserWaveCount {
  result.userWaveCountArray = nil;
  return self;
}
@end

@interface PBRedPacketPhysicalItem ()
@property (strong) NSString* name;
@property Float32 cost;
@property SInt32 count;
@end

@implementation PBRedPacketPhysicalItem

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasCost {
  return !!hasCost_;
}
- (void) setHasCost:(BOOL) value_ {
  hasCost_ = !!value_;
}
@synthesize cost;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value_ {
  hasCount_ = !!value_;
}
@synthesize count;
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.cost = 0;
    self.count = 0;
  }
  return self;
}
static PBRedPacketPhysicalItem* defaultPBRedPacketPhysicalItemInstance = nil;
+ (void) initialize {
  if (self == [PBRedPacketPhysicalItem class]) {
    defaultPBRedPacketPhysicalItemInstance = [[PBRedPacketPhysicalItem alloc] init];
  }
}
+ (PBRedPacketPhysicalItem*) defaultInstance {
  return defaultPBRedPacketPhysicalItemInstance;
}
- (PBRedPacketPhysicalItem*) defaultInstance {
  return defaultPBRedPacketPhysicalItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasCost) {
    [output writeFloat:2 value:self.cost];
  }
  if (self.hasCount) {
    [output writeSInt32:3 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasCost) {
    size_ += computeFloatSize(2, self.cost);
  }
  if (self.hasCount) {
    size_ += computeSInt32Size(3, self.count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRedPacketPhysicalItem*) parseFromData:(NSData*) data {
  return (PBRedPacketPhysicalItem*)[[[PBRedPacketPhysicalItem builder] mergeFromData:data] build];
}
+ (PBRedPacketPhysicalItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacketPhysicalItem*)[[[PBRedPacketPhysicalItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketPhysicalItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBRedPacketPhysicalItem*)[[[PBRedPacketPhysicalItem builder] mergeFromInputStream:input] build];
}
+ (PBRedPacketPhysicalItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacketPhysicalItem*)[[[PBRedPacketPhysicalItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketPhysicalItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRedPacketPhysicalItem*)[[[PBRedPacketPhysicalItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBRedPacketPhysicalItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacketPhysicalItem*)[[[PBRedPacketPhysicalItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketPhysicalItemBuilder*) builder {
  return [[PBRedPacketPhysicalItemBuilder alloc] init];
}
+ (PBRedPacketPhysicalItemBuilder*) builderWithPrototype:(PBRedPacketPhysicalItem*) prototype {
  return [[PBRedPacketPhysicalItem builder] mergeFrom:prototype];
}
- (PBRedPacketPhysicalItemBuilder*) builder {
  return [PBRedPacketPhysicalItem builder];
}
- (PBRedPacketPhysicalItemBuilder*) toBuilder {
  return [PBRedPacketPhysicalItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cost", [NSNumber numberWithFloat:self.cost]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRedPacketPhysicalItem class]]) {
    return NO;
  }
  PBRedPacketPhysicalItem *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCost == otherMessage.hasCost &&
      (!self.hasCost || self.cost == otherMessage.cost) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.cost] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRedPacketPhysicalItemBuilder()
@property (strong) PBRedPacketPhysicalItem* result;
@end

@implementation PBRedPacketPhysicalItemBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRedPacketPhysicalItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRedPacketPhysicalItemBuilder*) clear {
  self.result = [[PBRedPacketPhysicalItem alloc] init];
  return self;
}
- (PBRedPacketPhysicalItemBuilder*) clone {
  return [PBRedPacketPhysicalItem builderWithPrototype:result];
}
- (PBRedPacketPhysicalItem*) defaultInstance {
  return [PBRedPacketPhysicalItem defaultInstance];
}
- (PBRedPacketPhysicalItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRedPacketPhysicalItem*) buildPartial {
  PBRedPacketPhysicalItem* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRedPacketPhysicalItemBuilder*) mergeFrom:(PBRedPacketPhysicalItem*) other {
  if (other == [PBRedPacketPhysicalItem defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCost) {
    [self setCost:other.cost];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRedPacketPhysicalItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRedPacketPhysicalItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 21: {
        [self setCost:[input readFloat]];
        break;
      }
      case 24: {
        [self setCount:[input readSInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (PBRedPacketPhysicalItemBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (PBRedPacketPhysicalItemBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCost {
  return result.hasCost;
}
- (Float32) cost {
  return result.cost;
}
- (PBRedPacketPhysicalItemBuilder*) setCost:(Float32) value {
  result.hasCost = YES;
  result.cost = value;
  return self;
}
- (PBRedPacketPhysicalItemBuilder*) clearCost {
  result.hasCost = NO;
  result.cost = 0;
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (SInt32) count {
  return result.count;
}
- (PBRedPacketPhysicalItemBuilder*) setCount:(SInt32) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBRedPacketPhysicalItemBuilder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
@end

@interface PBMoneyRedPacket ()
@property Float32 totalCost;
@property SInt32 actualCount;
@property Float32 minCost;
@property Float32 maxCost;
@end

@implementation PBMoneyRedPacket

- (BOOL) hasTotalCost {
  return !!hasTotalCost_;
}
- (void) setHasTotalCost:(BOOL) value_ {
  hasTotalCost_ = !!value_;
}
@synthesize totalCost;
- (BOOL) hasActualCount {
  return !!hasActualCount_;
}
- (void) setHasActualCount:(BOOL) value_ {
  hasActualCount_ = !!value_;
}
@synthesize actualCount;
- (BOOL) hasMinCost {
  return !!hasMinCost_;
}
- (void) setHasMinCost:(BOOL) value_ {
  hasMinCost_ = !!value_;
}
@synthesize minCost;
- (BOOL) hasMaxCost {
  return !!hasMaxCost_;
}
- (void) setHasMaxCost:(BOOL) value_ {
  hasMaxCost_ = !!value_;
}
@synthesize maxCost;
- (id) init {
  if ((self = [super init])) {
    self.totalCost = 0;
    self.actualCount = 0;
    self.minCost = 0;
    self.maxCost = 0;
  }
  return self;
}
static PBMoneyRedPacket* defaultPBMoneyRedPacketInstance = nil;
+ (void) initialize {
  if (self == [PBMoneyRedPacket class]) {
    defaultPBMoneyRedPacketInstance = [[PBMoneyRedPacket alloc] init];
  }
}
+ (PBMoneyRedPacket*) defaultInstance {
  return defaultPBMoneyRedPacketInstance;
}
- (PBMoneyRedPacket*) defaultInstance {
  return defaultPBMoneyRedPacketInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalCost) {
    [output writeFloat:1 value:self.totalCost];
  }
  if (self.hasActualCount) {
    [output writeSInt32:2 value:self.actualCount];
  }
  if (self.hasMinCost) {
    [output writeFloat:3 value:self.minCost];
  }
  if (self.hasMaxCost) {
    [output writeFloat:4 value:self.maxCost];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTotalCost) {
    size_ += computeFloatSize(1, self.totalCost);
  }
  if (self.hasActualCount) {
    size_ += computeSInt32Size(2, self.actualCount);
  }
  if (self.hasMinCost) {
    size_ += computeFloatSize(3, self.minCost);
  }
  if (self.hasMaxCost) {
    size_ += computeFloatSize(4, self.maxCost);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBMoneyRedPacket*) parseFromData:(NSData*) data {
  return (PBMoneyRedPacket*)[[[PBMoneyRedPacket builder] mergeFromData:data] build];
}
+ (PBMoneyRedPacket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMoneyRedPacket*)[[[PBMoneyRedPacket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBMoneyRedPacket*) parseFromInputStream:(NSInputStream*) input {
  return (PBMoneyRedPacket*)[[[PBMoneyRedPacket builder] mergeFromInputStream:input] build];
}
+ (PBMoneyRedPacket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMoneyRedPacket*)[[[PBMoneyRedPacket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMoneyRedPacket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBMoneyRedPacket*)[[[PBMoneyRedPacket builder] mergeFromCodedInputStream:input] build];
}
+ (PBMoneyRedPacket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBMoneyRedPacket*)[[[PBMoneyRedPacket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBMoneyRedPacketBuilder*) builder {
  return [[PBMoneyRedPacketBuilder alloc] init];
}
+ (PBMoneyRedPacketBuilder*) builderWithPrototype:(PBMoneyRedPacket*) prototype {
  return [[PBMoneyRedPacket builder] mergeFrom:prototype];
}
- (PBMoneyRedPacketBuilder*) builder {
  return [PBMoneyRedPacket builder];
}
- (PBMoneyRedPacketBuilder*) toBuilder {
  return [PBMoneyRedPacket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTotalCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCost", [NSNumber numberWithFloat:self.totalCost]];
  }
  if (self.hasActualCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actualCount", [NSNumber numberWithInteger:self.actualCount]];
  }
  if (self.hasMinCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minCost", [NSNumber numberWithFloat:self.minCost]];
  }
  if (self.hasMaxCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxCost", [NSNumber numberWithFloat:self.maxCost]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBMoneyRedPacket class]]) {
    return NO;
  }
  PBMoneyRedPacket *otherMessage = other;
  return
      self.hasTotalCost == otherMessage.hasTotalCost &&
      (!self.hasTotalCost || self.totalCost == otherMessage.totalCost) &&
      self.hasActualCount == otherMessage.hasActualCount &&
      (!self.hasActualCount || self.actualCount == otherMessage.actualCount) &&
      self.hasMinCost == otherMessage.hasMinCost &&
      (!self.hasMinCost || self.minCost == otherMessage.minCost) &&
      self.hasMaxCost == otherMessage.hasMaxCost &&
      (!self.hasMaxCost || self.maxCost == otherMessage.maxCost) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTotalCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.totalCost] hash];
  }
  if (self.hasActualCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actualCount] hash];
  }
  if (self.hasMinCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.minCost] hash];
  }
  if (self.hasMaxCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.maxCost] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBMoneyRedPacketBuilder()
@property (strong) PBMoneyRedPacket* result;
@end

@implementation PBMoneyRedPacketBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBMoneyRedPacket alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBMoneyRedPacketBuilder*) clear {
  self.result = [[PBMoneyRedPacket alloc] init];
  return self;
}
- (PBMoneyRedPacketBuilder*) clone {
  return [PBMoneyRedPacket builderWithPrototype:result];
}
- (PBMoneyRedPacket*) defaultInstance {
  return [PBMoneyRedPacket defaultInstance];
}
- (PBMoneyRedPacket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBMoneyRedPacket*) buildPartial {
  PBMoneyRedPacket* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBMoneyRedPacketBuilder*) mergeFrom:(PBMoneyRedPacket*) other {
  if (other == [PBMoneyRedPacket defaultInstance]) {
    return self;
  }
  if (other.hasTotalCost) {
    [self setTotalCost:other.totalCost];
  }
  if (other.hasActualCount) {
    [self setActualCount:other.actualCount];
  }
  if (other.hasMinCost) {
    [self setMinCost:other.minCost];
  }
  if (other.hasMaxCost) {
    [self setMaxCost:other.maxCost];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBMoneyRedPacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBMoneyRedPacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setTotalCost:[input readFloat]];
        break;
      }
      case 16: {
        [self setActualCount:[input readSInt32]];
        break;
      }
      case 29: {
        [self setMinCost:[input readFloat]];
        break;
      }
      case 37: {
        [self setMaxCost:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalCost {
  return result.hasTotalCost;
}
- (Float32) totalCost {
  return result.totalCost;
}
- (PBMoneyRedPacketBuilder*) setTotalCost:(Float32) value {
  result.hasTotalCost = YES;
  result.totalCost = value;
  return self;
}
- (PBMoneyRedPacketBuilder*) clearTotalCost {
  result.hasTotalCost = NO;
  result.totalCost = 0;
  return self;
}
- (BOOL) hasActualCount {
  return result.hasActualCount;
}
- (SInt32) actualCount {
  return result.actualCount;
}
- (PBMoneyRedPacketBuilder*) setActualCount:(SInt32) value {
  result.hasActualCount = YES;
  result.actualCount = value;
  return self;
}
- (PBMoneyRedPacketBuilder*) clearActualCount {
  result.hasActualCount = NO;
  result.actualCount = 0;
  return self;
}
- (BOOL) hasMinCost {
  return result.hasMinCost;
}
- (Float32) minCost {
  return result.minCost;
}
- (PBMoneyRedPacketBuilder*) setMinCost:(Float32) value {
  result.hasMinCost = YES;
  result.minCost = value;
  return self;
}
- (PBMoneyRedPacketBuilder*) clearMinCost {
  result.hasMinCost = NO;
  result.minCost = 0;
  return self;
}
- (BOOL) hasMaxCost {
  return result.hasMaxCost;
}
- (Float32) maxCost {
  return result.maxCost;
}
- (PBMoneyRedPacketBuilder*) setMaxCost:(Float32) value {
  result.hasMaxCost = YES;
  result.maxCost = value;
  return self;
}
- (PBMoneyRedPacketBuilder*) clearMaxCost {
  result.hasMaxCost = NO;
  result.maxCost = 0;
  return self;
}
@end

@interface PBRedPacket ()
@property SInt64 id;
@property PBRedPacketType type;
@property (strong) NSString* title;
@property (strong) NSString* desc;
@property SInt32 count;
@property Float32 minCost;
@property Float32 maxCost;
@property SInt64 startTimestamp;
@property BOOL canBeRob;
@property (strong) NSString* pictureUrl;
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property (strong) NSMutableArray * physicalItemsArray;
@property (strong) PBMoneyRedPacket* moneyRedPacket;
@property Float32 probability;
@property SInt32 actualCount;
@property SInt32 robbedCount;
@property SInt32 actualRobbedCount;
@property SInt64 createdAt;
@property BOOL youHaveRobbed;
@end

@implementation PBRedPacket

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value_ {
  hasTitle_ = !!value_;
}
@synthesize title;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value_ {
  hasDesc_ = !!value_;
}
@synthesize desc;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value_ {
  hasCount_ = !!value_;
}
@synthesize count;
- (BOOL) hasMinCost {
  return !!hasMinCost_;
}
- (void) setHasMinCost:(BOOL) value_ {
  hasMinCost_ = !!value_;
}
@synthesize minCost;
- (BOOL) hasMaxCost {
  return !!hasMaxCost_;
}
- (void) setHasMaxCost:(BOOL) value_ {
  hasMaxCost_ = !!value_;
}
@synthesize maxCost;
- (BOOL) hasStartTimestamp {
  return !!hasStartTimestamp_;
}
- (void) setHasStartTimestamp:(BOOL) value_ {
  hasStartTimestamp_ = !!value_;
}
@synthesize startTimestamp;
- (BOOL) hasCanBeRob {
  return !!hasCanBeRob_;
}
- (void) setHasCanBeRob:(BOOL) value_ {
  hasCanBeRob_ = !!value_;
}
- (BOOL) canBeRob {
  return !!canBeRob_;
}
- (void) setCanBeRob:(BOOL) value_ {
  canBeRob_ = !!value_;
}
- (BOOL) hasPictureUrl {
  return !!hasPictureUrl_;
}
- (void) setHasPictureUrl:(BOOL) value_ {
  hasPictureUrl_ = !!value_;
}
@synthesize pictureUrl;
- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
@synthesize physicalItemsArray;
@dynamic physicalItems;
- (BOOL) hasMoneyRedPacket {
  return !!hasMoneyRedPacket_;
}
- (void) setHasMoneyRedPacket:(BOOL) value_ {
  hasMoneyRedPacket_ = !!value_;
}
@synthesize moneyRedPacket;
- (BOOL) hasProbability {
  return !!hasProbability_;
}
- (void) setHasProbability:(BOOL) value_ {
  hasProbability_ = !!value_;
}
@synthesize probability;
- (BOOL) hasActualCount {
  return !!hasActualCount_;
}
- (void) setHasActualCount:(BOOL) value_ {
  hasActualCount_ = !!value_;
}
@synthesize actualCount;
- (BOOL) hasRobbedCount {
  return !!hasRobbedCount_;
}
- (void) setHasRobbedCount:(BOOL) value_ {
  hasRobbedCount_ = !!value_;
}
@synthesize robbedCount;
- (BOOL) hasActualRobbedCount {
  return !!hasActualRobbedCount_;
}
- (void) setHasActualRobbedCount:(BOOL) value_ {
  hasActualRobbedCount_ = !!value_;
}
@synthesize actualRobbedCount;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasYouHaveRobbed {
  return !!hasYouHaveRobbed_;
}
- (void) setHasYouHaveRobbed:(BOOL) value_ {
  hasYouHaveRobbed_ = !!value_;
}
- (BOOL) youHaveRobbed {
  return !!youHaveRobbed_;
}
- (void) setYouHaveRobbed:(BOOL) value_ {
  youHaveRobbed_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.type = PBRedPacketTypeRedPacketTypeNil;
    self.title = @"";
    self.desc = @"";
    self.count = 0;
    self.minCost = 0;
    self.maxCost = 0;
    self.startTimestamp = 0L;
    self.canBeRob = YES;
    self.pictureUrl = @"";
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.moneyRedPacket = [PBMoneyRedPacket defaultInstance];
    self.probability = 0;
    self.actualCount = 0;
    self.robbedCount = 0;
    self.actualRobbedCount = 0;
    self.createdAt = 0L;
    self.youHaveRobbed = NO;
  }
  return self;
}
static PBRedPacket* defaultPBRedPacketInstance = nil;
+ (void) initialize {
  if (self == [PBRedPacket class]) {
    defaultPBRedPacketInstance = [[PBRedPacket alloc] init];
  }
}
+ (PBRedPacket*) defaultInstance {
  return defaultPBRedPacketInstance;
}
- (PBRedPacket*) defaultInstance {
  return defaultPBRedPacketInstance;
}
- (NSArray *)physicalItems {
  return physicalItemsArray;
}
- (PBRedPacketPhysicalItem*)physicalItemsAtIndex:(NSUInteger)index {
  return [physicalItemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasDesc) {
    [output writeString:4 value:self.desc];
  }
  if (self.hasCount) {
    [output writeSInt32:5 value:self.count];
  }
  if (self.hasMinCost) {
    [output writeFloat:6 value:self.minCost];
  }
  if (self.hasMaxCost) {
    [output writeFloat:7 value:self.maxCost];
  }
  if (self.hasStartTimestamp) {
    [output writeSInt64:8 value:self.startTimestamp];
  }
  if (self.hasCanBeRob) {
    [output writeBool:9 value:self.canBeRob];
  }
  if (self.hasPictureUrl) {
    [output writeString:10 value:self.pictureUrl];
  }
  if (self.hasSenderPassportId) {
    [output writeSInt64:11 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:12 value:self.systemSender];
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  if (self.hasMoneyRedPacket) {
    [output writeMessage:14 value:self.moneyRedPacket];
  }
  if (self.hasProbability) {
    [output writeFloat:15 value:self.probability];
  }
  if (self.hasActualCount) {
    [output writeSInt32:16 value:self.actualCount];
  }
  if (self.hasRobbedCount) {
    [output writeSInt32:17 value:self.robbedCount];
  }
  if (self.hasActualRobbedCount) {
    [output writeSInt32:18 value:self.actualRobbedCount];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:19 value:self.createdAt];
  }
  if (self.hasYouHaveRobbed) {
    [output writeBool:20 value:self.youHaveRobbed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(4, self.desc);
  }
  if (self.hasCount) {
    size_ += computeSInt32Size(5, self.count);
  }
  if (self.hasMinCost) {
    size_ += computeFloatSize(6, self.minCost);
  }
  if (self.hasMaxCost) {
    size_ += computeFloatSize(7, self.maxCost);
  }
  if (self.hasStartTimestamp) {
    size_ += computeSInt64Size(8, self.startTimestamp);
  }
  if (self.hasCanBeRob) {
    size_ += computeBoolSize(9, self.canBeRob);
  }
  if (self.hasPictureUrl) {
    size_ += computeStringSize(10, self.pictureUrl);
  }
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(11, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(12, self.systemSender);
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  if (self.hasMoneyRedPacket) {
    size_ += computeMessageSize(14, self.moneyRedPacket);
  }
  if (self.hasProbability) {
    size_ += computeFloatSize(15, self.probability);
  }
  if (self.hasActualCount) {
    size_ += computeSInt32Size(16, self.actualCount);
  }
  if (self.hasRobbedCount) {
    size_ += computeSInt32Size(17, self.robbedCount);
  }
  if (self.hasActualRobbedCount) {
    size_ += computeSInt32Size(18, self.actualRobbedCount);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(19, self.createdAt);
  }
  if (self.hasYouHaveRobbed) {
    size_ += computeBoolSize(20, self.youHaveRobbed);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRedPacket*) parseFromData:(NSData*) data {
  return (PBRedPacket*)[[[PBRedPacket builder] mergeFromData:data] build];
}
+ (PBRedPacket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacket*)[[[PBRedPacket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacket*) parseFromInputStream:(NSInputStream*) input {
  return (PBRedPacket*)[[[PBRedPacket builder] mergeFromInputStream:input] build];
}
+ (PBRedPacket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacket*)[[[PBRedPacket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRedPacket*)[[[PBRedPacket builder] mergeFromCodedInputStream:input] build];
}
+ (PBRedPacket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacket*)[[[PBRedPacket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketBuilder*) builder {
  return [[PBRedPacketBuilder alloc] init];
}
+ (PBRedPacketBuilder*) builderWithPrototype:(PBRedPacket*) prototype {
  return [[PBRedPacket builder] mergeFrom:prototype];
}
- (PBRedPacketBuilder*) builder {
  return [PBRedPacket builder];
}
- (PBRedPacketBuilder*) toBuilder {
  return [PBRedPacket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasMinCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minCost", [NSNumber numberWithFloat:self.minCost]];
  }
  if (self.hasMaxCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxCost", [NSNumber numberWithFloat:self.maxCost]];
  }
  if (self.hasStartTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTimestamp", [NSNumber numberWithLongLong:self.startTimestamp]];
  }
  if (self.hasCanBeRob) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canBeRob", [NSNumber numberWithBool:self.canBeRob]];
  }
  if (self.hasPictureUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pictureUrl", self.pictureUrl];
  }
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"physicalItems"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMoneyRedPacket) {
    [output appendFormat:@"%@%@ {\n", indent, @"moneyRedPacket"];
    [self.moneyRedPacket writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasProbability) {
    [output appendFormat:@"%@%@: %@\n", indent, @"probability", [NSNumber numberWithFloat:self.probability]];
  }
  if (self.hasActualCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actualCount", [NSNumber numberWithInteger:self.actualCount]];
  }
  if (self.hasRobbedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"robbedCount", [NSNumber numberWithInteger:self.robbedCount]];
  }
  if (self.hasActualRobbedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actualRobbedCount", [NSNumber numberWithInteger:self.actualRobbedCount]];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasYouHaveRobbed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"youHaveRobbed", [NSNumber numberWithBool:self.youHaveRobbed]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRedPacket class]]) {
    return NO;
  }
  PBRedPacket *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasMinCost == otherMessage.hasMinCost &&
      (!self.hasMinCost || self.minCost == otherMessage.minCost) &&
      self.hasMaxCost == otherMessage.hasMaxCost &&
      (!self.hasMaxCost || self.maxCost == otherMessage.maxCost) &&
      self.hasStartTimestamp == otherMessage.hasStartTimestamp &&
      (!self.hasStartTimestamp || self.startTimestamp == otherMessage.startTimestamp) &&
      self.hasCanBeRob == otherMessage.hasCanBeRob &&
      (!self.hasCanBeRob || self.canBeRob == otherMessage.canBeRob) &&
      self.hasPictureUrl == otherMessage.hasPictureUrl &&
      (!self.hasPictureUrl || [self.pictureUrl isEqual:otherMessage.pictureUrl]) &&
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      [self.physicalItemsArray isEqualToArray:otherMessage.physicalItemsArray] &&
      self.hasMoneyRedPacket == otherMessage.hasMoneyRedPacket &&
      (!self.hasMoneyRedPacket || [self.moneyRedPacket isEqual:otherMessage.moneyRedPacket]) &&
      self.hasProbability == otherMessage.hasProbability &&
      (!self.hasProbability || self.probability == otherMessage.probability) &&
      self.hasActualCount == otherMessage.hasActualCount &&
      (!self.hasActualCount || self.actualCount == otherMessage.actualCount) &&
      self.hasRobbedCount == otherMessage.hasRobbedCount &&
      (!self.hasRobbedCount || self.robbedCount == otherMessage.robbedCount) &&
      self.hasActualRobbedCount == otherMessage.hasActualRobbedCount &&
      (!self.hasActualRobbedCount || self.actualRobbedCount == otherMessage.actualRobbedCount) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasYouHaveRobbed == otherMessage.hasYouHaveRobbed &&
      (!self.hasYouHaveRobbed || self.youHaveRobbed == otherMessage.youHaveRobbed) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasMinCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.minCost] hash];
  }
  if (self.hasMaxCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.maxCost] hash];
  }
  if (self.hasStartTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startTimestamp] hash];
  }
  if (self.hasCanBeRob) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.canBeRob] hash];
  }
  if (self.hasPictureUrl) {
    hashCode = hashCode * 31 + [self.pictureUrl hash];
  }
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMoneyRedPacket) {
    hashCode = hashCode * 31 + [self.moneyRedPacket hash];
  }
  if (self.hasProbability) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.probability] hash];
  }
  if (self.hasActualCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actualCount] hash];
  }
  if (self.hasRobbedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.robbedCount] hash];
  }
  if (self.hasActualRobbedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.actualRobbedCount] hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasYouHaveRobbed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.youHaveRobbed] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRedPacketBuilder()
@property (strong) PBRedPacket* result;
@end

@implementation PBRedPacketBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRedPacket alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRedPacketBuilder*) clear {
  self.result = [[PBRedPacket alloc] init];
  return self;
}
- (PBRedPacketBuilder*) clone {
  return [PBRedPacket builderWithPrototype:result];
}
- (PBRedPacket*) defaultInstance {
  return [PBRedPacket defaultInstance];
}
- (PBRedPacket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRedPacket*) buildPartial {
  PBRedPacket* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRedPacketBuilder*) mergeFrom:(PBRedPacket*) other {
  if (other == [PBRedPacket defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasMinCost) {
    [self setMinCost:other.minCost];
  }
  if (other.hasMaxCost) {
    [self setMaxCost:other.maxCost];
  }
  if (other.hasStartTimestamp) {
    [self setStartTimestamp:other.startTimestamp];
  }
  if (other.hasCanBeRob) {
    [self setCanBeRob:other.canBeRob];
  }
  if (other.hasPictureUrl) {
    [self setPictureUrl:other.pictureUrl];
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.physicalItemsArray.count > 0) {
    if (result.physicalItemsArray == nil) {
      result.physicalItemsArray = [[NSMutableArray alloc] initWithArray:other.physicalItemsArray];
    } else {
      [result.physicalItemsArray addObjectsFromArray:other.physicalItemsArray];
    }
  }
  if (other.hasMoneyRedPacket) {
    [self mergeMoneyRedPacket:other.moneyRedPacket];
  }
  if (other.hasProbability) {
    [self setProbability:other.probability];
  }
  if (other.hasActualCount) {
    [self setActualCount:other.actualCount];
  }
  if (other.hasRobbedCount) {
    [self setRobbedCount:other.robbedCount];
  }
  if (other.hasActualRobbedCount) {
    [self setActualRobbedCount:other.actualRobbedCount];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasYouHaveRobbed) {
    [self setYouHaveRobbed:other.youHaveRobbed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRedPacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRedPacketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 16: {
        PBRedPacketType value = (PBRedPacketType)[input readEnum];
        if (PBRedPacketTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setDesc:[input readString]];
        break;
      }
      case 40: {
        [self setCount:[input readSInt32]];
        break;
      }
      case 53: {
        [self setMinCost:[input readFloat]];
        break;
      }
      case 61: {
        [self setMaxCost:[input readFloat]];
        break;
      }
      case 64: {
        [self setStartTimestamp:[input readSInt64]];
        break;
      }
      case 72: {
        [self setCanBeRob:[input readBool]];
        break;
      }
      case 82: {
        [self setPictureUrl:[input readString]];
        break;
      }
      case 88: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 98: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        PBRedPacketPhysicalItemBuilder* subBuilder = [PBRedPacketPhysicalItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPhysicalItems:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        PBMoneyRedPacketBuilder* subBuilder = [PBMoneyRedPacket builder];
        if (self.hasMoneyRedPacket) {
          [subBuilder mergeFrom:self.moneyRedPacket];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMoneyRedPacket:[subBuilder buildPartial]];
        break;
      }
      case 125: {
        [self setProbability:[input readFloat]];
        break;
      }
      case 128: {
        [self setActualCount:[input readSInt32]];
        break;
      }
      case 136: {
        [self setRobbedCount:[input readSInt32]];
        break;
      }
      case 144: {
        [self setActualRobbedCount:[input readSInt32]];
        break;
      }
      case 152: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 160: {
        [self setYouHaveRobbed:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBRedPacketBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBRedPacketBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBRedPacketType) type {
  return result.type;
}
- (PBRedPacketBuilder*) setType:(PBRedPacketType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBRedPacketBuilder*) clearType {
  result.hasType = NO;
  result.type = PBRedPacketTypeRedPacketTypeNil;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (PBRedPacketBuilder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (PBRedPacketBuilder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (PBRedPacketBuilder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (PBRedPacketBuilder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (SInt32) count {
  return result.count;
}
- (PBRedPacketBuilder*) setCount:(SInt32) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBRedPacketBuilder*) clearCount {
  result.hasCount = NO;
  result.count = 0;
  return self;
}
- (BOOL) hasMinCost {
  return result.hasMinCost;
}
- (Float32) minCost {
  return result.minCost;
}
- (PBRedPacketBuilder*) setMinCost:(Float32) value {
  result.hasMinCost = YES;
  result.minCost = value;
  return self;
}
- (PBRedPacketBuilder*) clearMinCost {
  result.hasMinCost = NO;
  result.minCost = 0;
  return self;
}
- (BOOL) hasMaxCost {
  return result.hasMaxCost;
}
- (Float32) maxCost {
  return result.maxCost;
}
- (PBRedPacketBuilder*) setMaxCost:(Float32) value {
  result.hasMaxCost = YES;
  result.maxCost = value;
  return self;
}
- (PBRedPacketBuilder*) clearMaxCost {
  result.hasMaxCost = NO;
  result.maxCost = 0;
  return self;
}
- (BOOL) hasStartTimestamp {
  return result.hasStartTimestamp;
}
- (SInt64) startTimestamp {
  return result.startTimestamp;
}
- (PBRedPacketBuilder*) setStartTimestamp:(SInt64) value {
  result.hasStartTimestamp = YES;
  result.startTimestamp = value;
  return self;
}
- (PBRedPacketBuilder*) clearStartTimestamp {
  result.hasStartTimestamp = NO;
  result.startTimestamp = 0L;
  return self;
}
- (BOOL) hasCanBeRob {
  return result.hasCanBeRob;
}
- (BOOL) canBeRob {
  return result.canBeRob;
}
- (PBRedPacketBuilder*) setCanBeRob:(BOOL) value {
  result.hasCanBeRob = YES;
  result.canBeRob = value;
  return self;
}
- (PBRedPacketBuilder*) clearCanBeRob {
  result.hasCanBeRob = NO;
  result.canBeRob = YES;
  return self;
}
- (BOOL) hasPictureUrl {
  return result.hasPictureUrl;
}
- (NSString*) pictureUrl {
  return result.pictureUrl;
}
- (PBRedPacketBuilder*) setPictureUrl:(NSString*) value {
  result.hasPictureUrl = YES;
  result.pictureUrl = value;
  return self;
}
- (PBRedPacketBuilder*) clearPictureUrl {
  result.hasPictureUrl = NO;
  result.pictureUrl = @"";
  return self;
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBRedPacketBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBRedPacketBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBRedPacketBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBRedPacketBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBRedPacketBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBRedPacketBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (NSMutableArray *)physicalItems {
  return result.physicalItemsArray;
}
- (PBRedPacketPhysicalItem*)physicalItemsAtIndex:(NSUInteger)index {
  return [result physicalItemsAtIndex:index];
}
- (PBRedPacketBuilder *)addPhysicalItems:(PBRedPacketPhysicalItem*)value {
  if (result.physicalItemsArray == nil) {
    result.physicalItemsArray = [[NSMutableArray alloc]init];
  }
  [result.physicalItemsArray addObject:value];
  return self;
}
- (PBRedPacketBuilder *)setPhysicalItemsArray:(NSArray *)array {
  result.physicalItemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBRedPacketBuilder *)clearPhysicalItems {
  result.physicalItemsArray = nil;
  return self;
}
- (BOOL) hasMoneyRedPacket {
  return result.hasMoneyRedPacket;
}
- (PBMoneyRedPacket*) moneyRedPacket {
  return result.moneyRedPacket;
}
- (PBRedPacketBuilder*) setMoneyRedPacket:(PBMoneyRedPacket*) value {
  result.hasMoneyRedPacket = YES;
  result.moneyRedPacket = value;
  return self;
}
- (PBRedPacketBuilder*) setMoneyRedPacketBuilder:(PBMoneyRedPacketBuilder*) builderForValue {
  return [self setMoneyRedPacket:[builderForValue build]];
}
- (PBRedPacketBuilder*) mergeMoneyRedPacket:(PBMoneyRedPacket*) value {
  if (result.hasMoneyRedPacket &&
      result.moneyRedPacket != [PBMoneyRedPacket defaultInstance]) {
    result.moneyRedPacket =
      [[[PBMoneyRedPacket builderWithPrototype:result.moneyRedPacket] mergeFrom:value] buildPartial];
  } else {
    result.moneyRedPacket = value;
  }
  result.hasMoneyRedPacket = YES;
  return self;
}
- (PBRedPacketBuilder*) clearMoneyRedPacket {
  result.hasMoneyRedPacket = NO;
  result.moneyRedPacket = [PBMoneyRedPacket defaultInstance];
  return self;
}
- (BOOL) hasProbability {
  return result.hasProbability;
}
- (Float32) probability {
  return result.probability;
}
- (PBRedPacketBuilder*) setProbability:(Float32) value {
  result.hasProbability = YES;
  result.probability = value;
  return self;
}
- (PBRedPacketBuilder*) clearProbability {
  result.hasProbability = NO;
  result.probability = 0;
  return self;
}
- (BOOL) hasActualCount {
  return result.hasActualCount;
}
- (SInt32) actualCount {
  return result.actualCount;
}
- (PBRedPacketBuilder*) setActualCount:(SInt32) value {
  result.hasActualCount = YES;
  result.actualCount = value;
  return self;
}
- (PBRedPacketBuilder*) clearActualCount {
  result.hasActualCount = NO;
  result.actualCount = 0;
  return self;
}
- (BOOL) hasRobbedCount {
  return result.hasRobbedCount;
}
- (SInt32) robbedCount {
  return result.robbedCount;
}
- (PBRedPacketBuilder*) setRobbedCount:(SInt32) value {
  result.hasRobbedCount = YES;
  result.robbedCount = value;
  return self;
}
- (PBRedPacketBuilder*) clearRobbedCount {
  result.hasRobbedCount = NO;
  result.robbedCount = 0;
  return self;
}
- (BOOL) hasActualRobbedCount {
  return result.hasActualRobbedCount;
}
- (SInt32) actualRobbedCount {
  return result.actualRobbedCount;
}
- (PBRedPacketBuilder*) setActualRobbedCount:(SInt32) value {
  result.hasActualRobbedCount = YES;
  result.actualRobbedCount = value;
  return self;
}
- (PBRedPacketBuilder*) clearActualRobbedCount {
  result.hasActualRobbedCount = NO;
  result.actualRobbedCount = 0;
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBRedPacketBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBRedPacketBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasYouHaveRobbed {
  return result.hasYouHaveRobbed;
}
- (BOOL) youHaveRobbed {
  return result.youHaveRobbed;
}
- (PBRedPacketBuilder*) setYouHaveRobbed:(BOOL) value {
  result.hasYouHaveRobbed = YES;
  result.youHaveRobbed = value;
  return self;
}
- (PBRedPacketBuilder*) clearYouHaveRobbed {
  result.hasYouHaveRobbed = NO;
  result.youHaveRobbed = NO;
  return self;
}
@end

@interface PBRedPacketTicket ()
@property SInt64 id;
@property SInt64 redPacketId;
@property SInt64 ownerPassportId;
@property (strong) NSString* cotent;
@property PBRedPacketType type;
@property Float32 cost;
@property (strong) NSString* code;
@property SInt64 createdAt;
@property SInt64 updatedAt;
@property SInt64 robbedAt;
@property BOOL empty;
@property SInt64 receivedAt;
@property (strong) NSString* redPacketPictureUrl;
@property SInt64 fromParkId;
@end

@implementation PBRedPacketTicket

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasRedPacketId {
  return !!hasRedPacketId_;
}
- (void) setHasRedPacketId:(BOOL) value_ {
  hasRedPacketId_ = !!value_;
}
@synthesize redPacketId;
- (BOOL) hasOwnerPassportId {
  return !!hasOwnerPassportId_;
}
- (void) setHasOwnerPassportId:(BOOL) value_ {
  hasOwnerPassportId_ = !!value_;
}
@synthesize ownerPassportId;
- (BOOL) hasCotent {
  return !!hasCotent_;
}
- (void) setHasCotent:(BOOL) value_ {
  hasCotent_ = !!value_;
}
@synthesize cotent;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasCost {
  return !!hasCost_;
}
- (void) setHasCost:(BOOL) value_ {
  hasCost_ = !!value_;
}
@synthesize cost;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value_ {
  hasCode_ = !!value_;
}
@synthesize code;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) value_ {
  hasUpdatedAt_ = !!value_;
}
@synthesize updatedAt;
- (BOOL) hasRobbedAt {
  return !!hasRobbedAt_;
}
- (void) setHasRobbedAt:(BOOL) value_ {
  hasRobbedAt_ = !!value_;
}
@synthesize robbedAt;
- (BOOL) hasEmpty {
  return !!hasEmpty_;
}
- (void) setHasEmpty:(BOOL) value_ {
  hasEmpty_ = !!value_;
}
- (BOOL) empty {
  return !!empty_;
}
- (void) setEmpty:(BOOL) value_ {
  empty_ = !!value_;
}
- (BOOL) hasReceivedAt {
  return !!hasReceivedAt_;
}
- (void) setHasReceivedAt:(BOOL) value_ {
  hasReceivedAt_ = !!value_;
}
@synthesize receivedAt;
- (BOOL) hasRedPacketPictureUrl {
  return !!hasRedPacketPictureUrl_;
}
- (void) setHasRedPacketPictureUrl:(BOOL) value_ {
  hasRedPacketPictureUrl_ = !!value_;
}
@synthesize redPacketPictureUrl;
- (BOOL) hasFromParkId {
  return !!hasFromParkId_;
}
- (void) setHasFromParkId:(BOOL) value_ {
  hasFromParkId_ = !!value_;
}
@synthesize fromParkId;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.redPacketId = 0L;
    self.ownerPassportId = 0L;
    self.cotent = @"";
    self.type = PBRedPacketTypeRedPacketTypeNil;
    self.cost = 0;
    self.code = @"";
    self.createdAt = 0L;
    self.updatedAt = 0L;
    self.robbedAt = 0L;
    self.empty = NO;
    self.receivedAt = 0L;
    self.redPacketPictureUrl = @"";
    self.fromParkId = 0L;
  }
  return self;
}
static PBRedPacketTicket* defaultPBRedPacketTicketInstance = nil;
+ (void) initialize {
  if (self == [PBRedPacketTicket class]) {
    defaultPBRedPacketTicketInstance = [[PBRedPacketTicket alloc] init];
  }
}
+ (PBRedPacketTicket*) defaultInstance {
  return defaultPBRedPacketTicketInstance;
}
- (PBRedPacketTicket*) defaultInstance {
  return defaultPBRedPacketTicketInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasRedPacketId) {
    [output writeSInt64:2 value:self.redPacketId];
  }
  if (self.hasOwnerPassportId) {
    [output writeSInt64:3 value:self.ownerPassportId];
  }
  if (self.hasCotent) {
    [output writeString:4 value:self.cotent];
  }
  if (self.hasType) {
    [output writeEnum:5 value:self.type];
  }
  if (self.hasCost) {
    [output writeFloat:6 value:self.cost];
  }
  if (self.hasCode) {
    [output writeString:7 value:self.code];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:9 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeSInt64:10 value:self.updatedAt];
  }
  if (self.hasRobbedAt) {
    [output writeSInt64:11 value:self.robbedAt];
  }
  if (self.hasEmpty) {
    [output writeBool:12 value:self.empty];
  }
  if (self.hasReceivedAt) {
    [output writeSInt64:13 value:self.receivedAt];
  }
  if (self.hasRedPacketPictureUrl) {
    [output writeString:14 value:self.redPacketPictureUrl];
  }
  if (self.hasFromParkId) {
    [output writeSInt64:15 value:self.fromParkId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasRedPacketId) {
    size_ += computeSInt64Size(2, self.redPacketId);
  }
  if (self.hasOwnerPassportId) {
    size_ += computeSInt64Size(3, self.ownerPassportId);
  }
  if (self.hasCotent) {
    size_ += computeStringSize(4, self.cotent);
  }
  if (self.hasType) {
    size_ += computeEnumSize(5, self.type);
  }
  if (self.hasCost) {
    size_ += computeFloatSize(6, self.cost);
  }
  if (self.hasCode) {
    size_ += computeStringSize(7, self.code);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(9, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeSInt64Size(10, self.updatedAt);
  }
  if (self.hasRobbedAt) {
    size_ += computeSInt64Size(11, self.robbedAt);
  }
  if (self.hasEmpty) {
    size_ += computeBoolSize(12, self.empty);
  }
  if (self.hasReceivedAt) {
    size_ += computeSInt64Size(13, self.receivedAt);
  }
  if (self.hasRedPacketPictureUrl) {
    size_ += computeStringSize(14, self.redPacketPictureUrl);
  }
  if (self.hasFromParkId) {
    size_ += computeSInt64Size(15, self.fromParkId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRedPacketTicket*) parseFromData:(NSData*) data {
  return (PBRedPacketTicket*)[[[PBRedPacketTicket builder] mergeFromData:data] build];
}
+ (PBRedPacketTicket*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacketTicket*)[[[PBRedPacketTicket builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketTicket*) parseFromInputStream:(NSInputStream*) input {
  return (PBRedPacketTicket*)[[[PBRedPacketTicket builder] mergeFromInputStream:input] build];
}
+ (PBRedPacketTicket*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacketTicket*)[[[PBRedPacketTicket builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRedPacketTicket*)[[[PBRedPacketTicket builder] mergeFromCodedInputStream:input] build];
}
+ (PBRedPacketTicket*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRedPacketTicket*)[[[PBRedPacketTicket builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRedPacketTicketBuilder*) builder {
  return [[PBRedPacketTicketBuilder alloc] init];
}
+ (PBRedPacketTicketBuilder*) builderWithPrototype:(PBRedPacketTicket*) prototype {
  return [[PBRedPacketTicket builder] mergeFrom:prototype];
}
- (PBRedPacketTicketBuilder*) builder {
  return [PBRedPacketTicket builder];
}
- (PBRedPacketTicketBuilder*) toBuilder {
  return [PBRedPacketTicket builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasRedPacketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redPacketId", [NSNumber numberWithLongLong:self.redPacketId]];
  }
  if (self.hasOwnerPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerPassportId", [NSNumber numberWithLongLong:self.ownerPassportId]];
  }
  if (self.hasCotent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cotent", self.cotent];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cost", [NSNumber numberWithFloat:self.cost]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithLongLong:self.updatedAt]];
  }
  if (self.hasRobbedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"robbedAt", [NSNumber numberWithLongLong:self.robbedAt]];
  }
  if (self.hasEmpty) {
    [output appendFormat:@"%@%@: %@\n", indent, @"empty", [NSNumber numberWithBool:self.empty]];
  }
  if (self.hasReceivedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receivedAt", [NSNumber numberWithLongLong:self.receivedAt]];
  }
  if (self.hasRedPacketPictureUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redPacketPictureUrl", self.redPacketPictureUrl];
  }
  if (self.hasFromParkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromParkId", [NSNumber numberWithLongLong:self.fromParkId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRedPacketTicket class]]) {
    return NO;
  }
  PBRedPacketTicket *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasRedPacketId == otherMessage.hasRedPacketId &&
      (!self.hasRedPacketId || self.redPacketId == otherMessage.redPacketId) &&
      self.hasOwnerPassportId == otherMessage.hasOwnerPassportId &&
      (!self.hasOwnerPassportId || self.ownerPassportId == otherMessage.ownerPassportId) &&
      self.hasCotent == otherMessage.hasCotent &&
      (!self.hasCotent || [self.cotent isEqual:otherMessage.cotent]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasCost == otherMessage.hasCost &&
      (!self.hasCost || self.cost == otherMessage.cost) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      self.hasRobbedAt == otherMessage.hasRobbedAt &&
      (!self.hasRobbedAt || self.robbedAt == otherMessage.robbedAt) &&
      self.hasEmpty == otherMessage.hasEmpty &&
      (!self.hasEmpty || self.empty == otherMessage.empty) &&
      self.hasReceivedAt == otherMessage.hasReceivedAt &&
      (!self.hasReceivedAt || self.receivedAt == otherMessage.receivedAt) &&
      self.hasRedPacketPictureUrl == otherMessage.hasRedPacketPictureUrl &&
      (!self.hasRedPacketPictureUrl || [self.redPacketPictureUrl isEqual:otherMessage.redPacketPictureUrl]) &&
      self.hasFromParkId == otherMessage.hasFromParkId &&
      (!self.hasFromParkId || self.fromParkId == otherMessage.fromParkId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasRedPacketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.redPacketId] hash];
  }
  if (self.hasOwnerPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.ownerPassportId] hash];
  }
  if (self.hasCotent) {
    hashCode = hashCode * 31 + [self.cotent hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.cost] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updatedAt] hash];
  }
  if (self.hasRobbedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.robbedAt] hash];
  }
  if (self.hasEmpty) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.empty] hash];
  }
  if (self.hasReceivedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.receivedAt] hash];
  }
  if (self.hasRedPacketPictureUrl) {
    hashCode = hashCode * 31 + [self.redPacketPictureUrl hash];
  }
  if (self.hasFromParkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromParkId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRedPacketTicketBuilder()
@property (strong) PBRedPacketTicket* result;
@end

@implementation PBRedPacketTicketBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRedPacketTicket alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRedPacketTicketBuilder*) clear {
  self.result = [[PBRedPacketTicket alloc] init];
  return self;
}
- (PBRedPacketTicketBuilder*) clone {
  return [PBRedPacketTicket builderWithPrototype:result];
}
- (PBRedPacketTicket*) defaultInstance {
  return [PBRedPacketTicket defaultInstance];
}
- (PBRedPacketTicket*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRedPacketTicket*) buildPartial {
  PBRedPacketTicket* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRedPacketTicketBuilder*) mergeFrom:(PBRedPacketTicket*) other {
  if (other == [PBRedPacketTicket defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasRedPacketId) {
    [self setRedPacketId:other.redPacketId];
  }
  if (other.hasOwnerPassportId) {
    [self setOwnerPassportId:other.ownerPassportId];
  }
  if (other.hasCotent) {
    [self setCotent:other.cotent];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasCost) {
    [self setCost:other.cost];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  if (other.hasRobbedAt) {
    [self setRobbedAt:other.robbedAt];
  }
  if (other.hasEmpty) {
    [self setEmpty:other.empty];
  }
  if (other.hasReceivedAt) {
    [self setReceivedAt:other.receivedAt];
  }
  if (other.hasRedPacketPictureUrl) {
    [self setRedPacketPictureUrl:other.redPacketPictureUrl];
  }
  if (other.hasFromParkId) {
    [self setFromParkId:other.fromParkId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRedPacketTicketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRedPacketTicketBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setRedPacketId:[input readSInt64]];
        break;
      }
      case 24: {
        [self setOwnerPassportId:[input readSInt64]];
        break;
      }
      case 34: {
        [self setCotent:[input readString]];
        break;
      }
      case 40: {
        PBRedPacketType value = (PBRedPacketType)[input readEnum];
        if (PBRedPacketTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 53: {
        [self setCost:[input readFloat]];
        break;
      }
      case 58: {
        [self setCode:[input readString]];
        break;
      }
      case 72: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 80: {
        [self setUpdatedAt:[input readSInt64]];
        break;
      }
      case 88: {
        [self setRobbedAt:[input readSInt64]];
        break;
      }
      case 96: {
        [self setEmpty:[input readBool]];
        break;
      }
      case 104: {
        [self setReceivedAt:[input readSInt64]];
        break;
      }
      case 114: {
        [self setRedPacketPictureUrl:[input readString]];
        break;
      }
      case 120: {
        [self setFromParkId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBRedPacketTicketBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasRedPacketId {
  return result.hasRedPacketId;
}
- (SInt64) redPacketId {
  return result.redPacketId;
}
- (PBRedPacketTicketBuilder*) setRedPacketId:(SInt64) value {
  result.hasRedPacketId = YES;
  result.redPacketId = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearRedPacketId {
  result.hasRedPacketId = NO;
  result.redPacketId = 0L;
  return self;
}
- (BOOL) hasOwnerPassportId {
  return result.hasOwnerPassportId;
}
- (SInt64) ownerPassportId {
  return result.ownerPassportId;
}
- (PBRedPacketTicketBuilder*) setOwnerPassportId:(SInt64) value {
  result.hasOwnerPassportId = YES;
  result.ownerPassportId = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearOwnerPassportId {
  result.hasOwnerPassportId = NO;
  result.ownerPassportId = 0L;
  return self;
}
- (BOOL) hasCotent {
  return result.hasCotent;
}
- (NSString*) cotent {
  return result.cotent;
}
- (PBRedPacketTicketBuilder*) setCotent:(NSString*) value {
  result.hasCotent = YES;
  result.cotent = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearCotent {
  result.hasCotent = NO;
  result.cotent = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBRedPacketType) type {
  return result.type;
}
- (PBRedPacketTicketBuilder*) setType:(PBRedPacketType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearType {
  result.hasType = NO;
  result.type = PBRedPacketTypeRedPacketTypeNil;
  return self;
}
- (BOOL) hasCost {
  return result.hasCost;
}
- (Float32) cost {
  return result.cost;
}
- (PBRedPacketTicketBuilder*) setCost:(Float32) value {
  result.hasCost = YES;
  result.cost = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearCost {
  result.hasCost = NO;
  result.cost = 0;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (PBRedPacketTicketBuilder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBRedPacketTicketBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasUpdatedAt {
  return result.hasUpdatedAt;
}
- (SInt64) updatedAt {
  return result.updatedAt;
}
- (PBRedPacketTicketBuilder*) setUpdatedAt:(SInt64) value {
  result.hasUpdatedAt = YES;
  result.updatedAt = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearUpdatedAt {
  result.hasUpdatedAt = NO;
  result.updatedAt = 0L;
  return self;
}
- (BOOL) hasRobbedAt {
  return result.hasRobbedAt;
}
- (SInt64) robbedAt {
  return result.robbedAt;
}
- (PBRedPacketTicketBuilder*) setRobbedAt:(SInt64) value {
  result.hasRobbedAt = YES;
  result.robbedAt = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearRobbedAt {
  result.hasRobbedAt = NO;
  result.robbedAt = 0L;
  return self;
}
- (BOOL) hasEmpty {
  return result.hasEmpty;
}
- (BOOL) empty {
  return result.empty;
}
- (PBRedPacketTicketBuilder*) setEmpty:(BOOL) value {
  result.hasEmpty = YES;
  result.empty = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearEmpty {
  result.hasEmpty = NO;
  result.empty = NO;
  return self;
}
- (BOOL) hasReceivedAt {
  return result.hasReceivedAt;
}
- (SInt64) receivedAt {
  return result.receivedAt;
}
- (PBRedPacketTicketBuilder*) setReceivedAt:(SInt64) value {
  result.hasReceivedAt = YES;
  result.receivedAt = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearReceivedAt {
  result.hasReceivedAt = NO;
  result.receivedAt = 0L;
  return self;
}
- (BOOL) hasRedPacketPictureUrl {
  return result.hasRedPacketPictureUrl;
}
- (NSString*) redPacketPictureUrl {
  return result.redPacketPictureUrl;
}
- (PBRedPacketTicketBuilder*) setRedPacketPictureUrl:(NSString*) value {
  result.hasRedPacketPictureUrl = YES;
  result.redPacketPictureUrl = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearRedPacketPictureUrl {
  result.hasRedPacketPictureUrl = NO;
  result.redPacketPictureUrl = @"";
  return self;
}
- (BOOL) hasFromParkId {
  return result.hasFromParkId;
}
- (SInt64) fromParkId {
  return result.fromParkId;
}
- (PBRedPacketTicketBuilder*) setFromParkId:(SInt64) value {
  result.hasFromParkId = YES;
  result.fromParkId = value;
  return self;
}
- (PBRedPacketTicketBuilder*) clearFromParkId {
  result.hasFromParkId = NO;
  result.fromParkId = 0L;
  return self;
}
@end

@interface PBSendRedPacketReq ()
@property SInt64 myPassportId;
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property PBRedPacketType type;
@property (strong) NSString* title;
@property (strong) NSString* desc;
@property Float32 probability;
@property (strong) NSString* pictureUrl;
@property SInt64 startTimestamp;
@property (strong) NSMutableArray * physicalItemsArray;
@property (strong) PBMoneyRedPacket* moneyRedPacket;
@end

@implementation PBSendRedPacketReq

- (BOOL) hasMyPassportId {
  return !!hasMyPassportId_;
}
- (void) setHasMyPassportId:(BOOL) value_ {
  hasMyPassportId_ = !!value_;
}
@synthesize myPassportId;
- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) value_ {
  hasTitle_ = !!value_;
}
@synthesize title;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value_ {
  hasDesc_ = !!value_;
}
@synthesize desc;
- (BOOL) hasProbability {
  return !!hasProbability_;
}
- (void) setHasProbability:(BOOL) value_ {
  hasProbability_ = !!value_;
}
@synthesize probability;
- (BOOL) hasPictureUrl {
  return !!hasPictureUrl_;
}
- (void) setHasPictureUrl:(BOOL) value_ {
  hasPictureUrl_ = !!value_;
}
@synthesize pictureUrl;
- (BOOL) hasStartTimestamp {
  return !!hasStartTimestamp_;
}
- (void) setHasStartTimestamp:(BOOL) value_ {
  hasStartTimestamp_ = !!value_;
}
@synthesize startTimestamp;
@synthesize physicalItemsArray;
@dynamic physicalItems;
- (BOOL) hasMoneyRedPacket {
  return !!hasMoneyRedPacket_;
}
- (void) setHasMoneyRedPacket:(BOOL) value_ {
  hasMoneyRedPacket_ = !!value_;
}
@synthesize moneyRedPacket;
- (id) init {
  if ((self = [super init])) {
    self.myPassportId = 0L;
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.type = PBRedPacketTypeRedPacketTypeNil;
    self.title = @"";
    self.desc = @"";
    self.probability = 0;
    self.pictureUrl = @"";
    self.startTimestamp = 0L;
    self.moneyRedPacket = [PBMoneyRedPacket defaultInstance];
  }
  return self;
}
static PBSendRedPacketReq* defaultPBSendRedPacketReqInstance = nil;
+ (void) initialize {
  if (self == [PBSendRedPacketReq class]) {
    defaultPBSendRedPacketReqInstance = [[PBSendRedPacketReq alloc] init];
  }
}
+ (PBSendRedPacketReq*) defaultInstance {
  return defaultPBSendRedPacketReqInstance;
}
- (PBSendRedPacketReq*) defaultInstance {
  return defaultPBSendRedPacketReqInstance;
}
- (NSArray *)physicalItems {
  return physicalItemsArray;
}
- (PBRedPacketPhysicalItem*)physicalItemsAtIndex:(NSUInteger)index {
  return [physicalItemsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMyPassportId) {
    [output writeSInt64:1 value:self.myPassportId];
  }
  if (self.hasSenderPassportId) {
    [output writeSInt64:2 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:3 value:self.systemSender];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasTitle) {
    [output writeString:5 value:self.title];
  }
  if (self.hasDesc) {
    [output writeString:6 value:self.desc];
  }
  if (self.hasProbability) {
    [output writeFloat:7 value:self.probability];
  }
  if (self.hasPictureUrl) {
    [output writeString:8 value:self.pictureUrl];
  }
  if (self.hasStartTimestamp) {
    [output writeSInt64:9 value:self.startTimestamp];
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  if (self.hasMoneyRedPacket) {
    [output writeMessage:11 value:self.moneyRedPacket];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyPassportId) {
    size_ += computeSInt64Size(1, self.myPassportId);
  }
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(2, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(3, self.systemSender);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(5, self.title);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(6, self.desc);
  }
  if (self.hasProbability) {
    size_ += computeFloatSize(7, self.probability);
  }
  if (self.hasPictureUrl) {
    size_ += computeStringSize(8, self.pictureUrl);
  }
  if (self.hasStartTimestamp) {
    size_ += computeSInt64Size(9, self.startTimestamp);
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  if (self.hasMoneyRedPacket) {
    size_ += computeMessageSize(11, self.moneyRedPacket);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSendRedPacketReq*) parseFromData:(NSData*) data {
  return (PBSendRedPacketReq*)[[[PBSendRedPacketReq builder] mergeFromData:data] build];
}
+ (PBSendRedPacketReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendRedPacketReq*)[[[PBSendRedPacketReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSendRedPacketReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBSendRedPacketReq*)[[[PBSendRedPacketReq builder] mergeFromInputStream:input] build];
}
+ (PBSendRedPacketReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendRedPacketReq*)[[[PBSendRedPacketReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendRedPacketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSendRedPacketReq*)[[[PBSendRedPacketReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBSendRedPacketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendRedPacketReq*)[[[PBSendRedPacketReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendRedPacketReqBuilder*) builder {
  return [[PBSendRedPacketReqBuilder alloc] init];
}
+ (PBSendRedPacketReqBuilder*) builderWithPrototype:(PBSendRedPacketReq*) prototype {
  return [[PBSendRedPacketReq builder] mergeFrom:prototype];
}
- (PBSendRedPacketReqBuilder*) builder {
  return [PBSendRedPacketReq builder];
}
- (PBSendRedPacketReqBuilder*) toBuilder {
  return [PBSendRedPacketReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMyPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myPassportId", [NSNumber numberWithLongLong:self.myPassportId]];
  }
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasProbability) {
    [output appendFormat:@"%@%@: %@\n", indent, @"probability", [NSNumber numberWithFloat:self.probability]];
  }
  if (self.hasPictureUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pictureUrl", self.pictureUrl];
  }
  if (self.hasStartTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTimestamp", [NSNumber numberWithLongLong:self.startTimestamp]];
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"physicalItems"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMoneyRedPacket) {
    [output appendFormat:@"%@%@ {\n", indent, @"moneyRedPacket"];
    [self.moneyRedPacket writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSendRedPacketReq class]]) {
    return NO;
  }
  PBSendRedPacketReq *otherMessage = other;
  return
      self.hasMyPassportId == otherMessage.hasMyPassportId &&
      (!self.hasMyPassportId || self.myPassportId == otherMessage.myPassportId) &&
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasProbability == otherMessage.hasProbability &&
      (!self.hasProbability || self.probability == otherMessage.probability) &&
      self.hasPictureUrl == otherMessage.hasPictureUrl &&
      (!self.hasPictureUrl || [self.pictureUrl isEqual:otherMessage.pictureUrl]) &&
      self.hasStartTimestamp == otherMessage.hasStartTimestamp &&
      (!self.hasStartTimestamp || self.startTimestamp == otherMessage.startTimestamp) &&
      [self.physicalItemsArray isEqualToArray:otherMessage.physicalItemsArray] &&
      self.hasMoneyRedPacket == otherMessage.hasMoneyRedPacket &&
      (!self.hasMoneyRedPacket || [self.moneyRedPacket isEqual:otherMessage.moneyRedPacket]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMyPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myPassportId] hash];
  }
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasProbability) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.probability] hash];
  }
  if (self.hasPictureUrl) {
    hashCode = hashCode * 31 + [self.pictureUrl hash];
  }
  if (self.hasStartTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startTimestamp] hash];
  }
  [self.physicalItemsArray enumerateObjectsUsingBlock:^(PBRedPacketPhysicalItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasMoneyRedPacket) {
    hashCode = hashCode * 31 + [self.moneyRedPacket hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSendRedPacketReqBuilder()
@property (strong) PBSendRedPacketReq* result;
@end

@implementation PBSendRedPacketReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSendRedPacketReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSendRedPacketReqBuilder*) clear {
  self.result = [[PBSendRedPacketReq alloc] init];
  return self;
}
- (PBSendRedPacketReqBuilder*) clone {
  return [PBSendRedPacketReq builderWithPrototype:result];
}
- (PBSendRedPacketReq*) defaultInstance {
  return [PBSendRedPacketReq defaultInstance];
}
- (PBSendRedPacketReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSendRedPacketReq*) buildPartial {
  PBSendRedPacketReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSendRedPacketReqBuilder*) mergeFrom:(PBSendRedPacketReq*) other {
  if (other == [PBSendRedPacketReq defaultInstance]) {
    return self;
  }
  if (other.hasMyPassportId) {
    [self setMyPassportId:other.myPassportId];
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasProbability) {
    [self setProbability:other.probability];
  }
  if (other.hasPictureUrl) {
    [self setPictureUrl:other.pictureUrl];
  }
  if (other.hasStartTimestamp) {
    [self setStartTimestamp:other.startTimestamp];
  }
  if (other.physicalItemsArray.count > 0) {
    if (result.physicalItemsArray == nil) {
      result.physicalItemsArray = [[NSMutableArray alloc] initWithArray:other.physicalItemsArray];
    } else {
      [result.physicalItemsArray addObjectsFromArray:other.physicalItemsArray];
    }
  }
  if (other.hasMoneyRedPacket) {
    [self mergeMoneyRedPacket:other.moneyRedPacket];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSendRedPacketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSendRedPacketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyPassportId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 26: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        PBRedPacketType value = (PBRedPacketType)[input readEnum];
        if (PBRedPacketTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setTitle:[input readString]];
        break;
      }
      case 50: {
        [self setDesc:[input readString]];
        break;
      }
      case 61: {
        [self setProbability:[input readFloat]];
        break;
      }
      case 66: {
        [self setPictureUrl:[input readString]];
        break;
      }
      case 72: {
        [self setStartTimestamp:[input readSInt64]];
        break;
      }
      case 82: {
        PBRedPacketPhysicalItemBuilder* subBuilder = [PBRedPacketPhysicalItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPhysicalItems:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        PBMoneyRedPacketBuilder* subBuilder = [PBMoneyRedPacket builder];
        if (self.hasMoneyRedPacket) {
          [subBuilder mergeFrom:self.moneyRedPacket];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMoneyRedPacket:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMyPassportId {
  return result.hasMyPassportId;
}
- (SInt64) myPassportId {
  return result.myPassportId;
}
- (PBSendRedPacketReqBuilder*) setMyPassportId:(SInt64) value {
  result.hasMyPassportId = YES;
  result.myPassportId = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearMyPassportId {
  result.hasMyPassportId = NO;
  result.myPassportId = 0L;
  return self;
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBSendRedPacketReqBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBSendRedPacketReqBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBSendRedPacketReqBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBRedPacketType) type {
  return result.type;
}
- (PBSendRedPacketReqBuilder*) setType:(PBRedPacketType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearType {
  result.hasType = NO;
  result.type = PBRedPacketTypeRedPacketTypeNil;
  return self;
}
- (BOOL) hasTitle {
  return result.hasTitle;
}
- (NSString*) title {
  return result.title;
}
- (PBSendRedPacketReqBuilder*) setTitle:(NSString*) value {
  result.hasTitle = YES;
  result.title = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearTitle {
  result.hasTitle = NO;
  result.title = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (PBSendRedPacketReqBuilder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasProbability {
  return result.hasProbability;
}
- (Float32) probability {
  return result.probability;
}
- (PBSendRedPacketReqBuilder*) setProbability:(Float32) value {
  result.hasProbability = YES;
  result.probability = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearProbability {
  result.hasProbability = NO;
  result.probability = 0;
  return self;
}
- (BOOL) hasPictureUrl {
  return result.hasPictureUrl;
}
- (NSString*) pictureUrl {
  return result.pictureUrl;
}
- (PBSendRedPacketReqBuilder*) setPictureUrl:(NSString*) value {
  result.hasPictureUrl = YES;
  result.pictureUrl = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearPictureUrl {
  result.hasPictureUrl = NO;
  result.pictureUrl = @"";
  return self;
}
- (BOOL) hasStartTimestamp {
  return result.hasStartTimestamp;
}
- (SInt64) startTimestamp {
  return result.startTimestamp;
}
- (PBSendRedPacketReqBuilder*) setStartTimestamp:(SInt64) value {
  result.hasStartTimestamp = YES;
  result.startTimestamp = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearStartTimestamp {
  result.hasStartTimestamp = NO;
  result.startTimestamp = 0L;
  return self;
}
- (NSMutableArray *)physicalItems {
  return result.physicalItemsArray;
}
- (PBRedPacketPhysicalItem*)physicalItemsAtIndex:(NSUInteger)index {
  return [result physicalItemsAtIndex:index];
}
- (PBSendRedPacketReqBuilder *)addPhysicalItems:(PBRedPacketPhysicalItem*)value {
  if (result.physicalItemsArray == nil) {
    result.physicalItemsArray = [[NSMutableArray alloc]init];
  }
  [result.physicalItemsArray addObject:value];
  return self;
}
- (PBSendRedPacketReqBuilder *)setPhysicalItemsArray:(NSArray *)array {
  result.physicalItemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSendRedPacketReqBuilder *)clearPhysicalItems {
  result.physicalItemsArray = nil;
  return self;
}
- (BOOL) hasMoneyRedPacket {
  return result.hasMoneyRedPacket;
}
- (PBMoneyRedPacket*) moneyRedPacket {
  return result.moneyRedPacket;
}
- (PBSendRedPacketReqBuilder*) setMoneyRedPacket:(PBMoneyRedPacket*) value {
  result.hasMoneyRedPacket = YES;
  result.moneyRedPacket = value;
  return self;
}
- (PBSendRedPacketReqBuilder*) setMoneyRedPacketBuilder:(PBMoneyRedPacketBuilder*) builderForValue {
  return [self setMoneyRedPacket:[builderForValue build]];
}
- (PBSendRedPacketReqBuilder*) mergeMoneyRedPacket:(PBMoneyRedPacket*) value {
  if (result.hasMoneyRedPacket &&
      result.moneyRedPacket != [PBMoneyRedPacket defaultInstance]) {
    result.moneyRedPacket =
      [[[PBMoneyRedPacket builderWithPrototype:result.moneyRedPacket] mergeFrom:value] buildPartial];
  } else {
    result.moneyRedPacket = value;
  }
  result.hasMoneyRedPacket = YES;
  return self;
}
- (PBSendRedPacketReqBuilder*) clearMoneyRedPacket {
  result.hasMoneyRedPacket = NO;
  result.moneyRedPacket = [PBMoneyRedPacket defaultInstance];
  return self;
}
@end

@interface PBSendRedPacketResp ()
@property (strong) PBRedPacket* redPacket;
@end

@implementation PBSendRedPacketResp

- (BOOL) hasRedPacket {
  return !!hasRedPacket_;
}
- (void) setHasRedPacket:(BOOL) value_ {
  hasRedPacket_ = !!value_;
}
@synthesize redPacket;
- (id) init {
  if ((self = [super init])) {
    self.redPacket = [PBRedPacket defaultInstance];
  }
  return self;
}
static PBSendRedPacketResp* defaultPBSendRedPacketRespInstance = nil;
+ (void) initialize {
  if (self == [PBSendRedPacketResp class]) {
    defaultPBSendRedPacketRespInstance = [[PBSendRedPacketResp alloc] init];
  }
}
+ (PBSendRedPacketResp*) defaultInstance {
  return defaultPBSendRedPacketRespInstance;
}
- (PBSendRedPacketResp*) defaultInstance {
  return defaultPBSendRedPacketRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRedPacket) {
    [output writeMessage:1 value:self.redPacket];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRedPacket) {
    size_ += computeMessageSize(1, self.redPacket);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSendRedPacketResp*) parseFromData:(NSData*) data {
  return (PBSendRedPacketResp*)[[[PBSendRedPacketResp builder] mergeFromData:data] build];
}
+ (PBSendRedPacketResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendRedPacketResp*)[[[PBSendRedPacketResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSendRedPacketResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBSendRedPacketResp*)[[[PBSendRedPacketResp builder] mergeFromInputStream:input] build];
}
+ (PBSendRedPacketResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendRedPacketResp*)[[[PBSendRedPacketResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendRedPacketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSendRedPacketResp*)[[[PBSendRedPacketResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBSendRedPacketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendRedPacketResp*)[[[PBSendRedPacketResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendRedPacketRespBuilder*) builder {
  return [[PBSendRedPacketRespBuilder alloc] init];
}
+ (PBSendRedPacketRespBuilder*) builderWithPrototype:(PBSendRedPacketResp*) prototype {
  return [[PBSendRedPacketResp builder] mergeFrom:prototype];
}
- (PBSendRedPacketRespBuilder*) builder {
  return [PBSendRedPacketResp builder];
}
- (PBSendRedPacketRespBuilder*) toBuilder {
  return [PBSendRedPacketResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRedPacket) {
    [output appendFormat:@"%@%@ {\n", indent, @"redPacket"];
    [self.redPacket writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSendRedPacketResp class]]) {
    return NO;
  }
  PBSendRedPacketResp *otherMessage = other;
  return
      self.hasRedPacket == otherMessage.hasRedPacket &&
      (!self.hasRedPacket || [self.redPacket isEqual:otherMessage.redPacket]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRedPacket) {
    hashCode = hashCode * 31 + [self.redPacket hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSendRedPacketRespBuilder()
@property (strong) PBSendRedPacketResp* result;
@end

@implementation PBSendRedPacketRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSendRedPacketResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSendRedPacketRespBuilder*) clear {
  self.result = [[PBSendRedPacketResp alloc] init];
  return self;
}
- (PBSendRedPacketRespBuilder*) clone {
  return [PBSendRedPacketResp builderWithPrototype:result];
}
- (PBSendRedPacketResp*) defaultInstance {
  return [PBSendRedPacketResp defaultInstance];
}
- (PBSendRedPacketResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSendRedPacketResp*) buildPartial {
  PBSendRedPacketResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSendRedPacketRespBuilder*) mergeFrom:(PBSendRedPacketResp*) other {
  if (other == [PBSendRedPacketResp defaultInstance]) {
    return self;
  }
  if (other.hasRedPacket) {
    [self mergeRedPacket:other.redPacket];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSendRedPacketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSendRedPacketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRedPacketBuilder* subBuilder = [PBRedPacket builder];
        if (self.hasRedPacket) {
          [subBuilder mergeFrom:self.redPacket];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRedPacket:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRedPacket {
  return result.hasRedPacket;
}
- (PBRedPacket*) redPacket {
  return result.redPacket;
}
- (PBSendRedPacketRespBuilder*) setRedPacket:(PBRedPacket*) value {
  result.hasRedPacket = YES;
  result.redPacket = value;
  return self;
}
- (PBSendRedPacketRespBuilder*) setRedPacketBuilder:(PBRedPacketBuilder*) builderForValue {
  return [self setRedPacket:[builderForValue build]];
}
- (PBSendRedPacketRespBuilder*) mergeRedPacket:(PBRedPacket*) value {
  if (result.hasRedPacket &&
      result.redPacket != [PBRedPacket defaultInstance]) {
    result.redPacket =
      [[[PBRedPacket builderWithPrototype:result.redPacket] mergeFrom:value] buildPartial];
  } else {
    result.redPacket = value;
  }
  result.hasRedPacket = YES;
  return self;
}
- (PBSendRedPacketRespBuilder*) clearRedPacket {
  result.hasRedPacket = NO;
  result.redPacket = [PBRedPacket defaultInstance];
  return self;
}
@end

@interface PBRobRedPacketReq ()
@property SInt64 redPacketId;
@property SInt64 passportId;
@end

@implementation PBRobRedPacketReq

- (BOOL) hasRedPacketId {
  return !!hasRedPacketId_;
}
- (void) setHasRedPacketId:(BOOL) value_ {
  hasRedPacketId_ = !!value_;
}
@synthesize redPacketId;
- (BOOL) hasPassportId {
  return !!hasPassportId_;
}
- (void) setHasPassportId:(BOOL) value_ {
  hasPassportId_ = !!value_;
}
@synthesize passportId;
- (id) init {
  if ((self = [super init])) {
    self.redPacketId = 0L;
    self.passportId = 0L;
  }
  return self;
}
static PBRobRedPacketReq* defaultPBRobRedPacketReqInstance = nil;
+ (void) initialize {
  if (self == [PBRobRedPacketReq class]) {
    defaultPBRobRedPacketReqInstance = [[PBRobRedPacketReq alloc] init];
  }
}
+ (PBRobRedPacketReq*) defaultInstance {
  return defaultPBRobRedPacketReqInstance;
}
- (PBRobRedPacketReq*) defaultInstance {
  return defaultPBRobRedPacketReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRedPacketId) {
    [output writeSInt64:1 value:self.redPacketId];
  }
  if (self.hasPassportId) {
    [output writeSInt64:2 value:self.passportId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRedPacketId) {
    size_ += computeSInt64Size(1, self.redPacketId);
  }
  if (self.hasPassportId) {
    size_ += computeSInt64Size(2, self.passportId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRobRedPacketReq*) parseFromData:(NSData*) data {
  return (PBRobRedPacketReq*)[[[PBRobRedPacketReq builder] mergeFromData:data] build];
}
+ (PBRobRedPacketReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRobRedPacketReq*)[[[PBRobRedPacketReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRobRedPacketReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBRobRedPacketReq*)[[[PBRobRedPacketReq builder] mergeFromInputStream:input] build];
}
+ (PBRobRedPacketReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRobRedPacketReq*)[[[PBRobRedPacketReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRobRedPacketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRobRedPacketReq*)[[[PBRobRedPacketReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBRobRedPacketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRobRedPacketReq*)[[[PBRobRedPacketReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRobRedPacketReqBuilder*) builder {
  return [[PBRobRedPacketReqBuilder alloc] init];
}
+ (PBRobRedPacketReqBuilder*) builderWithPrototype:(PBRobRedPacketReq*) prototype {
  return [[PBRobRedPacketReq builder] mergeFrom:prototype];
}
- (PBRobRedPacketReqBuilder*) builder {
  return [PBRobRedPacketReq builder];
}
- (PBRobRedPacketReqBuilder*) toBuilder {
  return [PBRobRedPacketReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRedPacketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redPacketId", [NSNumber numberWithLongLong:self.redPacketId]];
  }
  if (self.hasPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passportId", [NSNumber numberWithLongLong:self.passportId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRobRedPacketReq class]]) {
    return NO;
  }
  PBRobRedPacketReq *otherMessage = other;
  return
      self.hasRedPacketId == otherMessage.hasRedPacketId &&
      (!self.hasRedPacketId || self.redPacketId == otherMessage.redPacketId) &&
      self.hasPassportId == otherMessage.hasPassportId &&
      (!self.hasPassportId || self.passportId == otherMessage.passportId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRedPacketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.redPacketId] hash];
  }
  if (self.hasPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.passportId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRobRedPacketReqBuilder()
@property (strong) PBRobRedPacketReq* result;
@end

@implementation PBRobRedPacketReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRobRedPacketReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRobRedPacketReqBuilder*) clear {
  self.result = [[PBRobRedPacketReq alloc] init];
  return self;
}
- (PBRobRedPacketReqBuilder*) clone {
  return [PBRobRedPacketReq builderWithPrototype:result];
}
- (PBRobRedPacketReq*) defaultInstance {
  return [PBRobRedPacketReq defaultInstance];
}
- (PBRobRedPacketReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRobRedPacketReq*) buildPartial {
  PBRobRedPacketReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRobRedPacketReqBuilder*) mergeFrom:(PBRobRedPacketReq*) other {
  if (other == [PBRobRedPacketReq defaultInstance]) {
    return self;
  }
  if (other.hasRedPacketId) {
    [self setRedPacketId:other.redPacketId];
  }
  if (other.hasPassportId) {
    [self setPassportId:other.passportId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRobRedPacketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRobRedPacketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRedPacketId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setPassportId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasRedPacketId {
  return result.hasRedPacketId;
}
- (SInt64) redPacketId {
  return result.redPacketId;
}
- (PBRobRedPacketReqBuilder*) setRedPacketId:(SInt64) value {
  result.hasRedPacketId = YES;
  result.redPacketId = value;
  return self;
}
- (PBRobRedPacketReqBuilder*) clearRedPacketId {
  result.hasRedPacketId = NO;
  result.redPacketId = 0L;
  return self;
}
- (BOOL) hasPassportId {
  return result.hasPassportId;
}
- (SInt64) passportId {
  return result.passportId;
}
- (PBRobRedPacketReqBuilder*) setPassportId:(SInt64) value {
  result.hasPassportId = YES;
  result.passportId = value;
  return self;
}
- (PBRobRedPacketReqBuilder*) clearPassportId {
  result.hasPassportId = NO;
  result.passportId = 0L;
  return self;
}
@end

@interface PBRobRedPacketResp ()
@property (strong) NSString* msg;
@property (strong) PBRedPacketTicket* ticket;
@end

@implementation PBRobRedPacketResp

- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) value_ {
  hasMsg_ = !!value_;
}
@synthesize msg;
- (BOOL) hasTicket {
  return !!hasTicket_;
}
- (void) setHasTicket:(BOOL) value_ {
  hasTicket_ = !!value_;
}
@synthesize ticket;
- (id) init {
  if ((self = [super init])) {
    self.msg = @"";
    self.ticket = [PBRedPacketTicket defaultInstance];
  }
  return self;
}
static PBRobRedPacketResp* defaultPBRobRedPacketRespInstance = nil;
+ (void) initialize {
  if (self == [PBRobRedPacketResp class]) {
    defaultPBRobRedPacketRespInstance = [[PBRobRedPacketResp alloc] init];
  }
}
+ (PBRobRedPacketResp*) defaultInstance {
  return defaultPBRobRedPacketRespInstance;
}
- (PBRobRedPacketResp*) defaultInstance {
  return defaultPBRobRedPacketRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsg) {
    [output writeString:1 value:self.msg];
  }
  if (self.hasTicket) {
    [output writeMessage:2 value:self.ticket];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMsg) {
    size_ += computeStringSize(1, self.msg);
  }
  if (self.hasTicket) {
    size_ += computeMessageSize(2, self.ticket);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRobRedPacketResp*) parseFromData:(NSData*) data {
  return (PBRobRedPacketResp*)[[[PBRobRedPacketResp builder] mergeFromData:data] build];
}
+ (PBRobRedPacketResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRobRedPacketResp*)[[[PBRobRedPacketResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRobRedPacketResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBRobRedPacketResp*)[[[PBRobRedPacketResp builder] mergeFromInputStream:input] build];
}
+ (PBRobRedPacketResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRobRedPacketResp*)[[[PBRobRedPacketResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRobRedPacketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRobRedPacketResp*)[[[PBRobRedPacketResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBRobRedPacketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRobRedPacketResp*)[[[PBRobRedPacketResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRobRedPacketRespBuilder*) builder {
  return [[PBRobRedPacketRespBuilder alloc] init];
}
+ (PBRobRedPacketRespBuilder*) builderWithPrototype:(PBRobRedPacketResp*) prototype {
  return [[PBRobRedPacketResp builder] mergeFrom:prototype];
}
- (PBRobRedPacketRespBuilder*) builder {
  return [PBRobRedPacketResp builder];
}
- (PBRobRedPacketRespBuilder*) toBuilder {
  return [PBRobRedPacketResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasTicket) {
    [output appendFormat:@"%@%@ {\n", indent, @"ticket"];
    [self.ticket writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRobRedPacketResp class]]) {
    return NO;
  }
  PBRobRedPacketResp *otherMessage = other;
  return
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasTicket == otherMessage.hasTicket &&
      (!self.hasTicket || [self.ticket isEqual:otherMessage.ticket]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasTicket) {
    hashCode = hashCode * 31 + [self.ticket hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRobRedPacketRespBuilder()
@property (strong) PBRobRedPacketResp* result;
@end

@implementation PBRobRedPacketRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRobRedPacketResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRobRedPacketRespBuilder*) clear {
  self.result = [[PBRobRedPacketResp alloc] init];
  return self;
}
- (PBRobRedPacketRespBuilder*) clone {
  return [PBRobRedPacketResp builderWithPrototype:result];
}
- (PBRobRedPacketResp*) defaultInstance {
  return [PBRobRedPacketResp defaultInstance];
}
- (PBRobRedPacketResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRobRedPacketResp*) buildPartial {
  PBRobRedPacketResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRobRedPacketRespBuilder*) mergeFrom:(PBRobRedPacketResp*) other {
  if (other == [PBRobRedPacketResp defaultInstance]) {
    return self;
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasTicket) {
    [self mergeTicket:other.ticket];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRobRedPacketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRobRedPacketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMsg:[input readString]];
        break;
      }
      case 18: {
        PBRedPacketTicketBuilder* subBuilder = [PBRedPacketTicket builder];
        if (self.hasTicket) {
          [subBuilder mergeFrom:self.ticket];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTicket:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMsg {
  return result.hasMsg;
}
- (NSString*) msg {
  return result.msg;
}
- (PBRobRedPacketRespBuilder*) setMsg:(NSString*) value {
  result.hasMsg = YES;
  result.msg = value;
  return self;
}
- (PBRobRedPacketRespBuilder*) clearMsg {
  result.hasMsg = NO;
  result.msg = @"";
  return self;
}
- (BOOL) hasTicket {
  return result.hasTicket;
}
- (PBRedPacketTicket*) ticket {
  return result.ticket;
}
- (PBRobRedPacketRespBuilder*) setTicket:(PBRedPacketTicket*) value {
  result.hasTicket = YES;
  result.ticket = value;
  return self;
}
- (PBRobRedPacketRespBuilder*) setTicketBuilder:(PBRedPacketTicketBuilder*) builderForValue {
  return [self setTicket:[builderForValue build]];
}
- (PBRobRedPacketRespBuilder*) mergeTicket:(PBRedPacketTicket*) value {
  if (result.hasTicket &&
      result.ticket != [PBRedPacketTicket defaultInstance]) {
    result.ticket =
      [[[PBRedPacketTicket builderWithPrototype:result.ticket] mergeFrom:value] buildPartial];
  } else {
    result.ticket = value;
  }
  result.hasTicket = YES;
  return self;
}
- (PBRobRedPacketRespBuilder*) clearTicket {
  result.hasTicket = NO;
  result.ticket = [PBRedPacketTicket defaultInstance];
  return self;
}
@end

@interface PBFetchRedPacketReq ()
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property PBRedPacketType typeFilter;
@property PBFetchRedPacketReqRedPacketStatus statusFilter;
@property (strong) NSString* titleSearch;
@property SInt32 page;
@property SInt64 beforeRedPacketId;
@property BOOL isSystemSender;
@end

@implementation PBFetchRedPacketReq

- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
- (BOOL) hasTypeFilter {
  return !!hasTypeFilter_;
}
- (void) setHasTypeFilter:(BOOL) value_ {
  hasTypeFilter_ = !!value_;
}
@synthesize typeFilter;
- (BOOL) hasStatusFilter {
  return !!hasStatusFilter_;
}
- (void) setHasStatusFilter:(BOOL) value_ {
  hasStatusFilter_ = !!value_;
}
@synthesize statusFilter;
- (BOOL) hasTitleSearch {
  return !!hasTitleSearch_;
}
- (void) setHasTitleSearch:(BOOL) value_ {
  hasTitleSearch_ = !!value_;
}
@synthesize titleSearch;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasBeforeRedPacketId {
  return !!hasBeforeRedPacketId_;
}
- (void) setHasBeforeRedPacketId:(BOOL) value_ {
  hasBeforeRedPacketId_ = !!value_;
}
@synthesize beforeRedPacketId;
- (BOOL) hasIsSystemSender {
  return !!hasIsSystemSender_;
}
- (void) setHasIsSystemSender:(BOOL) value_ {
  hasIsSystemSender_ = !!value_;
}
- (BOOL) isSystemSender {
  return !!isSystemSender_;
}
- (void) setIsSystemSender:(BOOL) value_ {
  isSystemSender_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.typeFilter = PBRedPacketTypeRedPacketTypeNil;
    self.statusFilter = PBFetchRedPacketReqRedPacketStatusRedPacketStatusNil;
    self.titleSearch = @"";
    self.page = 0;
    self.beforeRedPacketId = 0L;
    self.isSystemSender = YES;
  }
  return self;
}
static PBFetchRedPacketReq* defaultPBFetchRedPacketReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketReq class]) {
    defaultPBFetchRedPacketReqInstance = [[PBFetchRedPacketReq alloc] init];
  }
}
+ (PBFetchRedPacketReq*) defaultInstance {
  return defaultPBFetchRedPacketReqInstance;
}
- (PBFetchRedPacketReq*) defaultInstance {
  return defaultPBFetchRedPacketReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSenderPassportId) {
    [output writeSInt64:1 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:2 value:self.systemSender];
  }
  if (self.hasTypeFilter) {
    [output writeEnum:3 value:self.typeFilter];
  }
  if (self.hasStatusFilter) {
    [output writeEnum:4 value:self.statusFilter];
  }
  if (self.hasTitleSearch) {
    [output writeString:5 value:self.titleSearch];
  }
  if (self.hasPage) {
    [output writeSInt32:6 value:self.page];
  }
  if (self.hasBeforeRedPacketId) {
    [output writeSInt64:7 value:self.beforeRedPacketId];
  }
  if (self.hasIsSystemSender) {
    [output writeBool:8 value:self.isSystemSender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(1, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(2, self.systemSender);
  }
  if (self.hasTypeFilter) {
    size_ += computeEnumSize(3, self.typeFilter);
  }
  if (self.hasStatusFilter) {
    size_ += computeEnumSize(4, self.statusFilter);
  }
  if (self.hasTitleSearch) {
    size_ += computeStringSize(5, self.titleSearch);
  }
  if (self.hasPage) {
    size_ += computeSInt32Size(6, self.page);
  }
  if (self.hasBeforeRedPacketId) {
    size_ += computeSInt64Size(7, self.beforeRedPacketId);
  }
  if (self.hasIsSystemSender) {
    size_ += computeBoolSize(8, self.isSystemSender);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketReq*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketReq*)[[[PBFetchRedPacketReq builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketReq*)[[[PBFetchRedPacketReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketReq*)[[[PBFetchRedPacketReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketReq*)[[[PBFetchRedPacketReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketReq*)[[[PBFetchRedPacketReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketReq*)[[[PBFetchRedPacketReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketReqBuilder*) builder {
  return [[PBFetchRedPacketReqBuilder alloc] init];
}
+ (PBFetchRedPacketReqBuilder*) builderWithPrototype:(PBFetchRedPacketReq*) prototype {
  return [[PBFetchRedPacketReq builder] mergeFrom:prototype];
}
- (PBFetchRedPacketReqBuilder*) builder {
  return [PBFetchRedPacketReq builder];
}
- (PBFetchRedPacketReqBuilder*) toBuilder {
  return [PBFetchRedPacketReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTypeFilter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeFilter", [NSNumber numberWithInteger:self.typeFilter]];
  }
  if (self.hasStatusFilter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusFilter", [NSNumber numberWithInteger:self.statusFilter]];
  }
  if (self.hasTitleSearch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"titleSearch", self.titleSearch];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasBeforeRedPacketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beforeRedPacketId", [NSNumber numberWithLongLong:self.beforeRedPacketId]];
  }
  if (self.hasIsSystemSender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isSystemSender", [NSNumber numberWithBool:self.isSystemSender]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketReq class]]) {
    return NO;
  }
  PBFetchRedPacketReq *otherMessage = other;
  return
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      self.hasTypeFilter == otherMessage.hasTypeFilter &&
      (!self.hasTypeFilter || self.typeFilter == otherMessage.typeFilter) &&
      self.hasStatusFilter == otherMessage.hasStatusFilter &&
      (!self.hasStatusFilter || self.statusFilter == otherMessage.statusFilter) &&
      self.hasTitleSearch == otherMessage.hasTitleSearch &&
      (!self.hasTitleSearch || [self.titleSearch isEqual:otherMessage.titleSearch]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasBeforeRedPacketId == otherMessage.hasBeforeRedPacketId &&
      (!self.hasBeforeRedPacketId || self.beforeRedPacketId == otherMessage.beforeRedPacketId) &&
      self.hasIsSystemSender == otherMessage.hasIsSystemSender &&
      (!self.hasIsSystemSender || self.isSystemSender == otherMessage.isSystemSender) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  if (self.hasTypeFilter) {
    hashCode = hashCode * 31 + self.typeFilter;
  }
  if (self.hasStatusFilter) {
    hashCode = hashCode * 31 + self.statusFilter;
  }
  if (self.hasTitleSearch) {
    hashCode = hashCode * 31 + [self.titleSearch hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasBeforeRedPacketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.beforeRedPacketId] hash];
  }
  if (self.hasIsSystemSender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isSystemSender] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBFetchRedPacketReqRedPacketStatusIsValidValue(PBFetchRedPacketReqRedPacketStatus value) {
  switch (value) {
    case PBFetchRedPacketReqRedPacketStatusRedPacketStatusNil:
    case PBFetchRedPacketReqRedPacketStatusRedPacketStatusRobbing:
    case PBFetchRedPacketReqRedPacketStatusRedPacketStatusRobbingOut:
    case PBFetchRedPacketReqRedPacketStatusRedPacketStatusWaitRob:
      return YES;
    default:
      return NO;
  }
}
@interface PBFetchRedPacketReqBuilder()
@property (strong) PBFetchRedPacketReq* result;
@end

@implementation PBFetchRedPacketReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketReqBuilder*) clear {
  self.result = [[PBFetchRedPacketReq alloc] init];
  return self;
}
- (PBFetchRedPacketReqBuilder*) clone {
  return [PBFetchRedPacketReq builderWithPrototype:result];
}
- (PBFetchRedPacketReq*) defaultInstance {
  return [PBFetchRedPacketReq defaultInstance];
}
- (PBFetchRedPacketReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketReq*) buildPartial {
  PBFetchRedPacketReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketReqBuilder*) mergeFrom:(PBFetchRedPacketReq*) other {
  if (other == [PBFetchRedPacketReq defaultInstance]) {
    return self;
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.hasTypeFilter) {
    [self setTypeFilter:other.typeFilter];
  }
  if (other.hasStatusFilter) {
    [self setStatusFilter:other.statusFilter];
  }
  if (other.hasTitleSearch) {
    [self setTitleSearch:other.titleSearch];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasBeforeRedPacketId) {
    [self setBeforeRedPacketId:other.beforeRedPacketId];
  }
  if (other.hasIsSystemSender) {
    [self setIsSystemSender:other.isSystemSender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 18: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        PBRedPacketType value = (PBRedPacketType)[input readEnum];
        if (PBRedPacketTypeIsValidValue(value)) {
          [self setTypeFilter:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        PBFetchRedPacketReqRedPacketStatus value = (PBFetchRedPacketReqRedPacketStatus)[input readEnum];
        if (PBFetchRedPacketReqRedPacketStatusIsValidValue(value)) {
          [self setStatusFilter:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setTitleSearch:[input readString]];
        break;
      }
      case 48: {
        [self setPage:[input readSInt32]];
        break;
      }
      case 56: {
        [self setBeforeRedPacketId:[input readSInt64]];
        break;
      }
      case 64: {
        [self setIsSystemSender:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBFetchRedPacketReqBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBFetchRedPacketReqBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBFetchRedPacketReqBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (BOOL) hasTypeFilter {
  return result.hasTypeFilter;
}
- (PBRedPacketType) typeFilter {
  return result.typeFilter;
}
- (PBFetchRedPacketReqBuilder*) setTypeFilter:(PBRedPacketType) value {
  result.hasTypeFilter = YES;
  result.typeFilter = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearTypeFilter {
  result.hasTypeFilter = NO;
  result.typeFilter = PBRedPacketTypeRedPacketTypeNil;
  return self;
}
- (BOOL) hasStatusFilter {
  return result.hasStatusFilter;
}
- (PBFetchRedPacketReqRedPacketStatus) statusFilter {
  return result.statusFilter;
}
- (PBFetchRedPacketReqBuilder*) setStatusFilter:(PBFetchRedPacketReqRedPacketStatus) value {
  result.hasStatusFilter = YES;
  result.statusFilter = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearStatusFilter {
  result.hasStatusFilter = NO;
  result.statusFilter = PBFetchRedPacketReqRedPacketStatusRedPacketStatusNil;
  return self;
}
- (BOOL) hasTitleSearch {
  return result.hasTitleSearch;
}
- (NSString*) titleSearch {
  return result.titleSearch;
}
- (PBFetchRedPacketReqBuilder*) setTitleSearch:(NSString*) value {
  result.hasTitleSearch = YES;
  result.titleSearch = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearTitleSearch {
  result.hasTitleSearch = NO;
  result.titleSearch = @"";
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt32) page {
  return result.page;
}
- (PBFetchRedPacketReqBuilder*) setPage:(SInt32) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasBeforeRedPacketId {
  return result.hasBeforeRedPacketId;
}
- (SInt64) beforeRedPacketId {
  return result.beforeRedPacketId;
}
- (PBFetchRedPacketReqBuilder*) setBeforeRedPacketId:(SInt64) value {
  result.hasBeforeRedPacketId = YES;
  result.beforeRedPacketId = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearBeforeRedPacketId {
  result.hasBeforeRedPacketId = NO;
  result.beforeRedPacketId = 0L;
  return self;
}
- (BOOL) hasIsSystemSender {
  return result.hasIsSystemSender;
}
- (BOOL) isSystemSender {
  return result.isSystemSender;
}
- (PBFetchRedPacketReqBuilder*) setIsSystemSender:(BOOL) value {
  result.hasIsSystemSender = YES;
  result.isSystemSender = value;
  return self;
}
- (PBFetchRedPacketReqBuilder*) clearIsSystemSender {
  result.hasIsSystemSender = NO;
  result.isSystemSender = YES;
  return self;
}
@end

@interface PBFetchRedPacketResp ()
@property (strong) NSMutableArray * redPacketsArray;
@property SInt32 totalCount;
@property SInt32 totalPage;
@property BOOL hasMore;
@property SInt64 myTicketCount;
@property SInt64 redPacketCount;
@end

@implementation PBFetchRedPacketResp

@synthesize redPacketsArray;
@dynamic redPackets;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) value_ {
  hasTotalCount_ = !!value_;
}
@synthesize totalCount;
- (BOOL) hasTotalPage {
  return !!hasTotalPage_;
}
- (void) setHasTotalPage:(BOOL) value_ {
  hasTotalPage_ = !!value_;
}
@synthesize totalPage;
- (BOOL) hasHasMore {
  return !!hasHasMore_;
}
- (void) setHasHasMore:(BOOL) value_ {
  hasHasMore_ = !!value_;
}
- (BOOL) hasMore {
  return !!hasMore_;
}
- (void) setHasMore:(BOOL) value_ {
  hasMore_ = !!value_;
}
- (BOOL) hasMyTicketCount {
  return !!hasMyTicketCount_;
}
- (void) setHasMyTicketCount:(BOOL) value_ {
  hasMyTicketCount_ = !!value_;
}
@synthesize myTicketCount;
- (BOOL) hasRedPacketCount {
  return !!hasRedPacketCount_;
}
- (void) setHasRedPacketCount:(BOOL) value_ {
  hasRedPacketCount_ = !!value_;
}
@synthesize redPacketCount;
- (id) init {
  if ((self = [super init])) {
    self.totalCount = 0;
    self.totalPage = 0;
    self.hasMore = NO;
    self.myTicketCount = 0L;
    self.redPacketCount = 0L;
  }
  return self;
}
static PBFetchRedPacketResp* defaultPBFetchRedPacketRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketResp class]) {
    defaultPBFetchRedPacketRespInstance = [[PBFetchRedPacketResp alloc] init];
  }
}
+ (PBFetchRedPacketResp*) defaultInstance {
  return defaultPBFetchRedPacketRespInstance;
}
- (PBFetchRedPacketResp*) defaultInstance {
  return defaultPBFetchRedPacketRespInstance;
}
- (NSArray *)redPackets {
  return redPacketsArray;
}
- (PBRedPacket*)redPacketsAtIndex:(NSUInteger)index {
  return [redPacketsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasTotalCount) {
    [output writeSInt32:2 value:self.totalCount];
  }
  if (self.hasTotalPage) {
    [output writeSInt32:3 value:self.totalPage];
  }
  if (self.hasHasMore) {
    [output writeBool:4 value:self.hasMore];
  }
  if (self.hasMyTicketCount) {
    [output writeSInt64:5 value:self.myTicketCount];
  }
  if (self.hasRedPacketCount) {
    [output writeSInt64:6 value:self.redPacketCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasTotalCount) {
    size_ += computeSInt32Size(2, self.totalCount);
  }
  if (self.hasTotalPage) {
    size_ += computeSInt32Size(3, self.totalPage);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(4, self.hasMore);
  }
  if (self.hasMyTicketCount) {
    size_ += computeSInt64Size(5, self.myTicketCount);
  }
  if (self.hasRedPacketCount) {
    size_ += computeSInt64Size(6, self.redPacketCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketResp*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketResp*)[[[PBFetchRedPacketResp builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketResp*)[[[PBFetchRedPacketResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketResp*)[[[PBFetchRedPacketResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketResp*)[[[PBFetchRedPacketResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketResp*)[[[PBFetchRedPacketResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketResp*)[[[PBFetchRedPacketResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketRespBuilder*) builder {
  return [[PBFetchRedPacketRespBuilder alloc] init];
}
+ (PBFetchRedPacketRespBuilder*) builderWithPrototype:(PBFetchRedPacketResp*) prototype {
  return [[PBFetchRedPacketResp builder] mergeFrom:prototype];
}
- (PBFetchRedPacketRespBuilder*) builder {
  return [PBFetchRedPacketResp builder];
}
- (PBFetchRedPacketRespBuilder*) toBuilder {
  return [PBFetchRedPacketResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"redPackets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithInteger:self.totalCount]];
  }
  if (self.hasTotalPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPage", [NSNumber numberWithInteger:self.totalPage]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  if (self.hasMyTicketCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myTicketCount", [NSNumber numberWithLongLong:self.myTicketCount]];
  }
  if (self.hasRedPacketCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redPacketCount", [NSNumber numberWithLongLong:self.redPacketCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketResp class]]) {
    return NO;
  }
  PBFetchRedPacketResp *otherMessage = other;
  return
      [self.redPacketsArray isEqualToArray:otherMessage.redPacketsArray] &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || self.totalCount == otherMessage.totalCount) &&
      self.hasTotalPage == otherMessage.hasTotalPage &&
      (!self.hasTotalPage || self.totalPage == otherMessage.totalPage) &&
      self.hasHasMore == otherMessage.hasHasMore &&
      (!self.hasHasMore || self.hasMore == otherMessage.hasMore) &&
      self.hasMyTicketCount == otherMessage.hasMyTicketCount &&
      (!self.hasMyTicketCount || self.myTicketCount == otherMessage.myTicketCount) &&
      self.hasRedPacketCount == otherMessage.hasRedPacketCount &&
      (!self.hasRedPacketCount || self.redPacketCount == otherMessage.redPacketCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalCount] hash];
  }
  if (self.hasTotalPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalPage] hash];
  }
  if (self.hasHasMore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMore] hash];
  }
  if (self.hasMyTicketCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myTicketCount] hash];
  }
  if (self.hasRedPacketCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.redPacketCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketRespBuilder()
@property (strong) PBFetchRedPacketResp* result;
@end

@implementation PBFetchRedPacketRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketRespBuilder*) clear {
  self.result = [[PBFetchRedPacketResp alloc] init];
  return self;
}
- (PBFetchRedPacketRespBuilder*) clone {
  return [PBFetchRedPacketResp builderWithPrototype:result];
}
- (PBFetchRedPacketResp*) defaultInstance {
  return [PBFetchRedPacketResp defaultInstance];
}
- (PBFetchRedPacketResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketResp*) buildPartial {
  PBFetchRedPacketResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketRespBuilder*) mergeFrom:(PBFetchRedPacketResp*) other {
  if (other == [PBFetchRedPacketResp defaultInstance]) {
    return self;
  }
  if (other.redPacketsArray.count > 0) {
    if (result.redPacketsArray == nil) {
      result.redPacketsArray = [[NSMutableArray alloc] initWithArray:other.redPacketsArray];
    } else {
      [result.redPacketsArray addObjectsFromArray:other.redPacketsArray];
    }
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasTotalPage) {
    [self setTotalPage:other.totalPage];
  }
  if (other.hasHasMore) {
    [self setHasMore:other.hasMore];
  }
  if (other.hasMyTicketCount) {
    [self setMyTicketCount:other.myTicketCount];
  }
  if (other.hasRedPacketCount) {
    [self setRedPacketCount:other.redPacketCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRedPacketBuilder* subBuilder = [PBRedPacket builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRedPackets:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTotalCount:[input readSInt32]];
        break;
      }
      case 24: {
        [self setTotalPage:[input readSInt32]];
        break;
      }
      case 32: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 40: {
        [self setMyTicketCount:[input readSInt64]];
        break;
      }
      case 48: {
        [self setRedPacketCount:[input readSInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)redPackets {
  return result.redPacketsArray;
}
- (PBRedPacket*)redPacketsAtIndex:(NSUInteger)index {
  return [result redPacketsAtIndex:index];
}
- (PBFetchRedPacketRespBuilder *)addRedPackets:(PBRedPacket*)value {
  if (result.redPacketsArray == nil) {
    result.redPacketsArray = [[NSMutableArray alloc]init];
  }
  [result.redPacketsArray addObject:value];
  return self;
}
- (PBFetchRedPacketRespBuilder *)setRedPacketsArray:(NSArray *)array {
  result.redPacketsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchRedPacketRespBuilder *)clearRedPackets {
  result.redPacketsArray = nil;
  return self;
}
- (BOOL) hasTotalCount {
  return result.hasTotalCount;
}
- (SInt32) totalCount {
  return result.totalCount;
}
- (PBFetchRedPacketRespBuilder*) setTotalCount:(SInt32) value {
  result.hasTotalCount = YES;
  result.totalCount = value;
  return self;
}
- (PBFetchRedPacketRespBuilder*) clearTotalCount {
  result.hasTotalCount = NO;
  result.totalCount = 0;
  return self;
}
- (BOOL) hasTotalPage {
  return result.hasTotalPage;
}
- (SInt32) totalPage {
  return result.totalPage;
}
- (PBFetchRedPacketRespBuilder*) setTotalPage:(SInt32) value {
  result.hasTotalPage = YES;
  result.totalPage = value;
  return self;
}
- (PBFetchRedPacketRespBuilder*) clearTotalPage {
  result.hasTotalPage = NO;
  result.totalPage = 0;
  return self;
}
- (BOOL) hasHasMore {
  return result.hasHasMore;
}
- (BOOL) hasMore {
  return result.hasMore;
}
- (PBFetchRedPacketRespBuilder*) setHasMore:(BOOL) value {
  result.hasHasMore = YES;
  result.hasMore = value;
  return self;
}
- (PBFetchRedPacketRespBuilder*) clearHasMore {
  result.hasHasMore = NO;
  result.hasMore = NO;
  return self;
}
- (BOOL) hasMyTicketCount {
  return result.hasMyTicketCount;
}
- (SInt64) myTicketCount {
  return result.myTicketCount;
}
- (PBFetchRedPacketRespBuilder*) setMyTicketCount:(SInt64) value {
  result.hasMyTicketCount = YES;
  result.myTicketCount = value;
  return self;
}
- (PBFetchRedPacketRespBuilder*) clearMyTicketCount {
  result.hasMyTicketCount = NO;
  result.myTicketCount = 0L;
  return self;
}
- (BOOL) hasRedPacketCount {
  return result.hasRedPacketCount;
}
- (SInt64) redPacketCount {
  return result.redPacketCount;
}
- (PBFetchRedPacketRespBuilder*) setRedPacketCount:(SInt64) value {
  result.hasRedPacketCount = YES;
  result.redPacketCount = value;
  return self;
}
- (PBFetchRedPacketRespBuilder*) clearRedPacketCount {
  result.hasRedPacketCount = NO;
  result.redPacketCount = 0L;
  return self;
}
@end

@interface PBFetchRedPacketMyTicketCountReq ()
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property PBRedPacketType typeFilter;
@property PBFetchRedPacketMyTicketCountReqRedPacketStatus statusFilter;
@property (strong) NSString* titleSearch;
@property SInt32 page;
@property SInt64 beforeRedPacketId;
@property BOOL isSystemSender;
@end

@implementation PBFetchRedPacketMyTicketCountReq

- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
- (BOOL) hasTypeFilter {
  return !!hasTypeFilter_;
}
- (void) setHasTypeFilter:(BOOL) value_ {
  hasTypeFilter_ = !!value_;
}
@synthesize typeFilter;
- (BOOL) hasStatusFilter {
  return !!hasStatusFilter_;
}
- (void) setHasStatusFilter:(BOOL) value_ {
  hasStatusFilter_ = !!value_;
}
@synthesize statusFilter;
- (BOOL) hasTitleSearch {
  return !!hasTitleSearch_;
}
- (void) setHasTitleSearch:(BOOL) value_ {
  hasTitleSearch_ = !!value_;
}
@synthesize titleSearch;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasBeforeRedPacketId {
  return !!hasBeforeRedPacketId_;
}
- (void) setHasBeforeRedPacketId:(BOOL) value_ {
  hasBeforeRedPacketId_ = !!value_;
}
@synthesize beforeRedPacketId;
- (BOOL) hasIsSystemSender {
  return !!hasIsSystemSender_;
}
- (void) setHasIsSystemSender:(BOOL) value_ {
  hasIsSystemSender_ = !!value_;
}
- (BOOL) isSystemSender {
  return !!isSystemSender_;
}
- (void) setIsSystemSender:(BOOL) value_ {
  isSystemSender_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.typeFilter = PBRedPacketTypeRedPacketTypeNil;
    self.statusFilter = PBFetchRedPacketMyTicketCountReqRedPacketStatusRedPacketStatusNil;
    self.titleSearch = @"";
    self.page = 0;
    self.beforeRedPacketId = 0L;
    self.isSystemSender = YES;
  }
  return self;
}
static PBFetchRedPacketMyTicketCountReq* defaultPBFetchRedPacketMyTicketCountReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketMyTicketCountReq class]) {
    defaultPBFetchRedPacketMyTicketCountReqInstance = [[PBFetchRedPacketMyTicketCountReq alloc] init];
  }
}
+ (PBFetchRedPacketMyTicketCountReq*) defaultInstance {
  return defaultPBFetchRedPacketMyTicketCountReqInstance;
}
- (PBFetchRedPacketMyTicketCountReq*) defaultInstance {
  return defaultPBFetchRedPacketMyTicketCountReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSenderPassportId) {
    [output writeSInt64:1 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:2 value:self.systemSender];
  }
  if (self.hasTypeFilter) {
    [output writeEnum:3 value:self.typeFilter];
  }
  if (self.hasStatusFilter) {
    [output writeEnum:4 value:self.statusFilter];
  }
  if (self.hasTitleSearch) {
    [output writeString:5 value:self.titleSearch];
  }
  if (self.hasPage) {
    [output writeSInt32:6 value:self.page];
  }
  if (self.hasBeforeRedPacketId) {
    [output writeSInt64:7 value:self.beforeRedPacketId];
  }
  if (self.hasIsSystemSender) {
    [output writeBool:8 value:self.isSystemSender];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(1, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(2, self.systemSender);
  }
  if (self.hasTypeFilter) {
    size_ += computeEnumSize(3, self.typeFilter);
  }
  if (self.hasStatusFilter) {
    size_ += computeEnumSize(4, self.statusFilter);
  }
  if (self.hasTitleSearch) {
    size_ += computeStringSize(5, self.titleSearch);
  }
  if (self.hasPage) {
    size_ += computeSInt32Size(6, self.page);
  }
  if (self.hasBeforeRedPacketId) {
    size_ += computeSInt64Size(7, self.beforeRedPacketId);
  }
  if (self.hasIsSystemSender) {
    size_ += computeBoolSize(8, self.isSystemSender);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketMyTicketCountReq*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketMyTicketCountReq*)[[[PBFetchRedPacketMyTicketCountReq builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketMyTicketCountReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketMyTicketCountReq*)[[[PBFetchRedPacketMyTicketCountReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketMyTicketCountReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketMyTicketCountReq*)[[[PBFetchRedPacketMyTicketCountReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketMyTicketCountReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketMyTicketCountReq*)[[[PBFetchRedPacketMyTicketCountReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketMyTicketCountReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketMyTicketCountReq*)[[[PBFetchRedPacketMyTicketCountReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketMyTicketCountReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketMyTicketCountReq*)[[[PBFetchRedPacketMyTicketCountReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketMyTicketCountReqBuilder*) builder {
  return [[PBFetchRedPacketMyTicketCountReqBuilder alloc] init];
}
+ (PBFetchRedPacketMyTicketCountReqBuilder*) builderWithPrototype:(PBFetchRedPacketMyTicketCountReq*) prototype {
  return [[PBFetchRedPacketMyTicketCountReq builder] mergeFrom:prototype];
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) builder {
  return [PBFetchRedPacketMyTicketCountReq builder];
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) toBuilder {
  return [PBFetchRedPacketMyTicketCountReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasTypeFilter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typeFilter", [NSNumber numberWithInteger:self.typeFilter]];
  }
  if (self.hasStatusFilter) {
    [output appendFormat:@"%@%@: %@\n", indent, @"statusFilter", [NSNumber numberWithInteger:self.statusFilter]];
  }
  if (self.hasTitleSearch) {
    [output appendFormat:@"%@%@: %@\n", indent, @"titleSearch", self.titleSearch];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasBeforeRedPacketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beforeRedPacketId", [NSNumber numberWithLongLong:self.beforeRedPacketId]];
  }
  if (self.hasIsSystemSender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isSystemSender", [NSNumber numberWithBool:self.isSystemSender]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketMyTicketCountReq class]]) {
    return NO;
  }
  PBFetchRedPacketMyTicketCountReq *otherMessage = other;
  return
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      self.hasTypeFilter == otherMessage.hasTypeFilter &&
      (!self.hasTypeFilter || self.typeFilter == otherMessage.typeFilter) &&
      self.hasStatusFilter == otherMessage.hasStatusFilter &&
      (!self.hasStatusFilter || self.statusFilter == otherMessage.statusFilter) &&
      self.hasTitleSearch == otherMessage.hasTitleSearch &&
      (!self.hasTitleSearch || [self.titleSearch isEqual:otherMessage.titleSearch]) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasBeforeRedPacketId == otherMessage.hasBeforeRedPacketId &&
      (!self.hasBeforeRedPacketId || self.beforeRedPacketId == otherMessage.beforeRedPacketId) &&
      self.hasIsSystemSender == otherMessage.hasIsSystemSender &&
      (!self.hasIsSystemSender || self.isSystemSender == otherMessage.isSystemSender) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  if (self.hasTypeFilter) {
    hashCode = hashCode * 31 + self.typeFilter;
  }
  if (self.hasStatusFilter) {
    hashCode = hashCode * 31 + self.statusFilter;
  }
  if (self.hasTitleSearch) {
    hashCode = hashCode * 31 + [self.titleSearch hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasBeforeRedPacketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.beforeRedPacketId] hash];
  }
  if (self.hasIsSystemSender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isSystemSender] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBFetchRedPacketMyTicketCountReqRedPacketStatusIsValidValue(PBFetchRedPacketMyTicketCountReqRedPacketStatus value) {
  switch (value) {
    case PBFetchRedPacketMyTicketCountReqRedPacketStatusRedPacketStatusNil:
    case PBFetchRedPacketMyTicketCountReqRedPacketStatusRedPacketStatusRobbing:
    case PBFetchRedPacketMyTicketCountReqRedPacketStatusRedPacketStatusRobbingOut:
    case PBFetchRedPacketMyTicketCountReqRedPacketStatusRedPacketStatusWaitRob:
      return YES;
    default:
      return NO;
  }
}
@interface PBFetchRedPacketMyTicketCountReqBuilder()
@property (strong) PBFetchRedPacketMyTicketCountReq* result;
@end

@implementation PBFetchRedPacketMyTicketCountReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketMyTicketCountReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clear {
  self.result = [[PBFetchRedPacketMyTicketCountReq alloc] init];
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clone {
  return [PBFetchRedPacketMyTicketCountReq builderWithPrototype:result];
}
- (PBFetchRedPacketMyTicketCountReq*) defaultInstance {
  return [PBFetchRedPacketMyTicketCountReq defaultInstance];
}
- (PBFetchRedPacketMyTicketCountReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketMyTicketCountReq*) buildPartial {
  PBFetchRedPacketMyTicketCountReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) mergeFrom:(PBFetchRedPacketMyTicketCountReq*) other {
  if (other == [PBFetchRedPacketMyTicketCountReq defaultInstance]) {
    return self;
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.hasTypeFilter) {
    [self setTypeFilter:other.typeFilter];
  }
  if (other.hasStatusFilter) {
    [self setStatusFilter:other.statusFilter];
  }
  if (other.hasTitleSearch) {
    [self setTitleSearch:other.titleSearch];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasBeforeRedPacketId) {
    [self setBeforeRedPacketId:other.beforeRedPacketId];
  }
  if (other.hasIsSystemSender) {
    [self setIsSystemSender:other.isSystemSender];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 18: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        PBRedPacketType value = (PBRedPacketType)[input readEnum];
        if (PBRedPacketTypeIsValidValue(value)) {
          [self setTypeFilter:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        PBFetchRedPacketMyTicketCountReqRedPacketStatus value = (PBFetchRedPacketMyTicketCountReqRedPacketStatus)[input readEnum];
        if (PBFetchRedPacketMyTicketCountReqRedPacketStatusIsValidValue(value)) {
          [self setStatusFilter:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 42: {
        [self setTitleSearch:[input readString]];
        break;
      }
      case 48: {
        [self setPage:[input readSInt32]];
        break;
      }
      case 56: {
        [self setBeforeRedPacketId:[input readSInt64]];
        break;
      }
      case 64: {
        [self setIsSystemSender:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (BOOL) hasTypeFilter {
  return result.hasTypeFilter;
}
- (PBRedPacketType) typeFilter {
  return result.typeFilter;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setTypeFilter:(PBRedPacketType) value {
  result.hasTypeFilter = YES;
  result.typeFilter = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearTypeFilter {
  result.hasTypeFilter = NO;
  result.typeFilter = PBRedPacketTypeRedPacketTypeNil;
  return self;
}
- (BOOL) hasStatusFilter {
  return result.hasStatusFilter;
}
- (PBFetchRedPacketMyTicketCountReqRedPacketStatus) statusFilter {
  return result.statusFilter;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setStatusFilter:(PBFetchRedPacketMyTicketCountReqRedPacketStatus) value {
  result.hasStatusFilter = YES;
  result.statusFilter = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearStatusFilter {
  result.hasStatusFilter = NO;
  result.statusFilter = PBFetchRedPacketMyTicketCountReqRedPacketStatusRedPacketStatusNil;
  return self;
}
- (BOOL) hasTitleSearch {
  return result.hasTitleSearch;
}
- (NSString*) titleSearch {
  return result.titleSearch;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setTitleSearch:(NSString*) value {
  result.hasTitleSearch = YES;
  result.titleSearch = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearTitleSearch {
  result.hasTitleSearch = NO;
  result.titleSearch = @"";
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt32) page {
  return result.page;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setPage:(SInt32) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasBeforeRedPacketId {
  return result.hasBeforeRedPacketId;
}
- (SInt64) beforeRedPacketId {
  return result.beforeRedPacketId;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setBeforeRedPacketId:(SInt64) value {
  result.hasBeforeRedPacketId = YES;
  result.beforeRedPacketId = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearBeforeRedPacketId {
  result.hasBeforeRedPacketId = NO;
  result.beforeRedPacketId = 0L;
  return self;
}
- (BOOL) hasIsSystemSender {
  return result.hasIsSystemSender;
}
- (BOOL) isSystemSender {
  return result.isSystemSender;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) setIsSystemSender:(BOOL) value {
  result.hasIsSystemSender = YES;
  result.isSystemSender = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountReqBuilder*) clearIsSystemSender {
  result.hasIsSystemSender = NO;
  result.isSystemSender = YES;
  return self;
}
@end

@interface PBFetchRedPacketMyTicketCountResp ()
@property SInt64 myTicketCount;
@end

@implementation PBFetchRedPacketMyTicketCountResp

- (BOOL) hasMyTicketCount {
  return !!hasMyTicketCount_;
}
- (void) setHasMyTicketCount:(BOOL) value_ {
  hasMyTicketCount_ = !!value_;
}
@synthesize myTicketCount;
- (id) init {
  if ((self = [super init])) {
    self.myTicketCount = 0L;
  }
  return self;
}
static PBFetchRedPacketMyTicketCountResp* defaultPBFetchRedPacketMyTicketCountRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketMyTicketCountResp class]) {
    defaultPBFetchRedPacketMyTicketCountRespInstance = [[PBFetchRedPacketMyTicketCountResp alloc] init];
  }
}
+ (PBFetchRedPacketMyTicketCountResp*) defaultInstance {
  return defaultPBFetchRedPacketMyTicketCountRespInstance;
}
- (PBFetchRedPacketMyTicketCountResp*) defaultInstance {
  return defaultPBFetchRedPacketMyTicketCountRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMyTicketCount) {
    [output writeSInt64:1 value:self.myTicketCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyTicketCount) {
    size_ += computeSInt64Size(1, self.myTicketCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketMyTicketCountResp*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketMyTicketCountResp*)[[[PBFetchRedPacketMyTicketCountResp builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketMyTicketCountResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketMyTicketCountResp*)[[[PBFetchRedPacketMyTicketCountResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketMyTicketCountResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketMyTicketCountResp*)[[[PBFetchRedPacketMyTicketCountResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketMyTicketCountResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketMyTicketCountResp*)[[[PBFetchRedPacketMyTicketCountResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketMyTicketCountResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketMyTicketCountResp*)[[[PBFetchRedPacketMyTicketCountResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketMyTicketCountResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketMyTicketCountResp*)[[[PBFetchRedPacketMyTicketCountResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketMyTicketCountRespBuilder*) builder {
  return [[PBFetchRedPacketMyTicketCountRespBuilder alloc] init];
}
+ (PBFetchRedPacketMyTicketCountRespBuilder*) builderWithPrototype:(PBFetchRedPacketMyTicketCountResp*) prototype {
  return [[PBFetchRedPacketMyTicketCountResp builder] mergeFrom:prototype];
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) builder {
  return [PBFetchRedPacketMyTicketCountResp builder];
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) toBuilder {
  return [PBFetchRedPacketMyTicketCountResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMyTicketCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myTicketCount", [NSNumber numberWithLongLong:self.myTicketCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketMyTicketCountResp class]]) {
    return NO;
  }
  PBFetchRedPacketMyTicketCountResp *otherMessage = other;
  return
      self.hasMyTicketCount == otherMessage.hasMyTicketCount &&
      (!self.hasMyTicketCount || self.myTicketCount == otherMessage.myTicketCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMyTicketCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myTicketCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketMyTicketCountRespBuilder()
@property (strong) PBFetchRedPacketMyTicketCountResp* result;
@end

@implementation PBFetchRedPacketMyTicketCountRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketMyTicketCountResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) clear {
  self.result = [[PBFetchRedPacketMyTicketCountResp alloc] init];
  return self;
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) clone {
  return [PBFetchRedPacketMyTicketCountResp builderWithPrototype:result];
}
- (PBFetchRedPacketMyTicketCountResp*) defaultInstance {
  return [PBFetchRedPacketMyTicketCountResp defaultInstance];
}
- (PBFetchRedPacketMyTicketCountResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketMyTicketCountResp*) buildPartial {
  PBFetchRedPacketMyTicketCountResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) mergeFrom:(PBFetchRedPacketMyTicketCountResp*) other {
  if (other == [PBFetchRedPacketMyTicketCountResp defaultInstance]) {
    return self;
  }
  if (other.hasMyTicketCount) {
    [self setMyTicketCount:other.myTicketCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyTicketCount:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasMyTicketCount {
  return result.hasMyTicketCount;
}
- (SInt64) myTicketCount {
  return result.myTicketCount;
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) setMyTicketCount:(SInt64) value {
  result.hasMyTicketCount = YES;
  result.myTicketCount = value;
  return self;
}
- (PBFetchRedPacketMyTicketCountRespBuilder*) clearMyTicketCount {
  result.hasMyTicketCount = NO;
  result.myTicketCount = 0L;
  return self;
}
@end

@interface PBFetchRedPacketsReq ()
@property (strong) PBAppendableArray * packectIdsArray;
@end

@implementation PBFetchRedPacketsReq

@synthesize packectIdsArray;
@dynamic packectIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchRedPacketsReq* defaultPBFetchRedPacketsReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketsReq class]) {
    defaultPBFetchRedPacketsReqInstance = [[PBFetchRedPacketsReq alloc] init];
  }
}
+ (PBFetchRedPacketsReq*) defaultInstance {
  return defaultPBFetchRedPacketsReqInstance;
}
- (PBFetchRedPacketsReq*) defaultInstance {
  return defaultPBFetchRedPacketsReqInstance;
}
- (PBArray *)packectIds {
  return packectIdsArray;
}
- (SInt64)packectIdsAtIndex:(NSUInteger)index {
  return [packectIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger packectIdsArrayCount = self.packectIdsArray.count;
  if (packectIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.packectIdsArray.data;
    for (NSUInteger i = 0; i < packectIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.packectIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.packectIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketsReq*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketsReq*)[[[PBFetchRedPacketsReq builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketsReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketsReq*)[[[PBFetchRedPacketsReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketsReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketsReq*)[[[PBFetchRedPacketsReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketsReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketsReq*)[[[PBFetchRedPacketsReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketsReq*)[[[PBFetchRedPacketsReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketsReq*)[[[PBFetchRedPacketsReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketsReqBuilder*) builder {
  return [[PBFetchRedPacketsReqBuilder alloc] init];
}
+ (PBFetchRedPacketsReqBuilder*) builderWithPrototype:(PBFetchRedPacketsReq*) prototype {
  return [[PBFetchRedPacketsReq builder] mergeFrom:prototype];
}
- (PBFetchRedPacketsReqBuilder*) builder {
  return [PBFetchRedPacketsReq builder];
}
- (PBFetchRedPacketsReqBuilder*) toBuilder {
  return [PBFetchRedPacketsReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.packectIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"packectIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketsReq class]]) {
    return NO;
  }
  PBFetchRedPacketsReq *otherMessage = other;
  return
      [self.packectIdsArray isEqualToArray:otherMessage.packectIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.packectIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketsReqBuilder()
@property (strong) PBFetchRedPacketsReq* result;
@end

@implementation PBFetchRedPacketsReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketsReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketsReqBuilder*) clear {
  self.result = [[PBFetchRedPacketsReq alloc] init];
  return self;
}
- (PBFetchRedPacketsReqBuilder*) clone {
  return [PBFetchRedPacketsReq builderWithPrototype:result];
}
- (PBFetchRedPacketsReq*) defaultInstance {
  return [PBFetchRedPacketsReq defaultInstance];
}
- (PBFetchRedPacketsReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketsReq*) buildPartial {
  PBFetchRedPacketsReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketsReqBuilder*) mergeFrom:(PBFetchRedPacketsReq*) other {
  if (other == [PBFetchRedPacketsReq defaultInstance]) {
    return self;
  }
  if (other.packectIdsArray.count > 0) {
    if (result.packectIdsArray == nil) {
      result.packectIdsArray = [other.packectIdsArray copy];
    } else {
      [result.packectIdsArray appendArray:other.packectIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addPackectIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)packectIds {
  return result.packectIdsArray;
}
- (SInt64)packectIdsAtIndex:(NSUInteger)index {
  return [result packectIdsAtIndex:index];
}
- (PBFetchRedPacketsReqBuilder *)addPackectIds:(SInt64)value {
  if (result.packectIdsArray == nil) {
    result.packectIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.packectIdsArray addInt64:value];
  return self;
}
- (PBFetchRedPacketsReqBuilder *)setPackectIdsArray:(NSArray *)array {
  result.packectIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchRedPacketsReqBuilder *)setPackectIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.packectIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchRedPacketsReqBuilder *)clearPackectIds {
  result.packectIdsArray = nil;
  return self;
}
@end

@interface PBFetchRedPacketsResp ()
@property (strong) NSMutableArray * packetsArray;
@end

@implementation PBFetchRedPacketsResp

@synthesize packetsArray;
@dynamic packets;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchRedPacketsResp* defaultPBFetchRedPacketsRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketsResp class]) {
    defaultPBFetchRedPacketsRespInstance = [[PBFetchRedPacketsResp alloc] init];
  }
}
+ (PBFetchRedPacketsResp*) defaultInstance {
  return defaultPBFetchRedPacketsRespInstance;
}
- (PBFetchRedPacketsResp*) defaultInstance {
  return defaultPBFetchRedPacketsRespInstance;
}
- (NSArray *)packets {
  return packetsArray;
}
- (PBRedPacket*)packetsAtIndex:(NSUInteger)index {
  return [packetsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.packetsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.packetsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketsResp*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketsResp*)[[[PBFetchRedPacketsResp builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketsResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketsResp*)[[[PBFetchRedPacketsResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketsResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketsResp*)[[[PBFetchRedPacketsResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketsResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketsResp*)[[[PBFetchRedPacketsResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketsResp*)[[[PBFetchRedPacketsResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketsResp*)[[[PBFetchRedPacketsResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketsRespBuilder*) builder {
  return [[PBFetchRedPacketsRespBuilder alloc] init];
}
+ (PBFetchRedPacketsRespBuilder*) builderWithPrototype:(PBFetchRedPacketsResp*) prototype {
  return [[PBFetchRedPacketsResp builder] mergeFrom:prototype];
}
- (PBFetchRedPacketsRespBuilder*) builder {
  return [PBFetchRedPacketsResp builder];
}
- (PBFetchRedPacketsRespBuilder*) toBuilder {
  return [PBFetchRedPacketsResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.packetsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"packets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketsResp class]]) {
    return NO;
  }
  PBFetchRedPacketsResp *otherMessage = other;
  return
      [self.packetsArray isEqualToArray:otherMessage.packetsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.packetsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketsRespBuilder()
@property (strong) PBFetchRedPacketsResp* result;
@end

@implementation PBFetchRedPacketsRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketsResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketsRespBuilder*) clear {
  self.result = [[PBFetchRedPacketsResp alloc] init];
  return self;
}
- (PBFetchRedPacketsRespBuilder*) clone {
  return [PBFetchRedPacketsResp builderWithPrototype:result];
}
- (PBFetchRedPacketsResp*) defaultInstance {
  return [PBFetchRedPacketsResp defaultInstance];
}
- (PBFetchRedPacketsResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketsResp*) buildPartial {
  PBFetchRedPacketsResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketsRespBuilder*) mergeFrom:(PBFetchRedPacketsResp*) other {
  if (other == [PBFetchRedPacketsResp defaultInstance]) {
    return self;
  }
  if (other.packetsArray.count > 0) {
    if (result.packetsArray == nil) {
      result.packetsArray = [[NSMutableArray alloc] initWithArray:other.packetsArray];
    } else {
      [result.packetsArray addObjectsFromArray:other.packetsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRedPacketBuilder* subBuilder = [PBRedPacket builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPackets:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)packets {
  return result.packetsArray;
}
- (PBRedPacket*)packetsAtIndex:(NSUInteger)index {
  return [result packetsAtIndex:index];
}
- (PBFetchRedPacketsRespBuilder *)addPackets:(PBRedPacket*)value {
  if (result.packetsArray == nil) {
    result.packetsArray = [[NSMutableArray alloc]init];
  }
  [result.packetsArray addObject:value];
  return self;
}
- (PBFetchRedPacketsRespBuilder *)setPacketsArray:(NSArray *)array {
  result.packetsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchRedPacketsRespBuilder *)clearPackets {
  result.packetsArray = nil;
  return self;
}
@end

@interface PBFetchRedPacketTicketReq ()
@property SInt64 redPacketId;
@property SInt64 ownerPassportId;
@property SInt64 beforeTicketId;
@property SInt64 page;
@end

@implementation PBFetchRedPacketTicketReq

- (BOOL) hasRedPacketId {
  return !!hasRedPacketId_;
}
- (void) setHasRedPacketId:(BOOL) value_ {
  hasRedPacketId_ = !!value_;
}
@synthesize redPacketId;
- (BOOL) hasOwnerPassportId {
  return !!hasOwnerPassportId_;
}
- (void) setHasOwnerPassportId:(BOOL) value_ {
  hasOwnerPassportId_ = !!value_;
}
@synthesize ownerPassportId;
- (BOOL) hasBeforeTicketId {
  return !!hasBeforeTicketId_;
}
- (void) setHasBeforeTicketId:(BOOL) value_ {
  hasBeforeTicketId_ = !!value_;
}
@synthesize beforeTicketId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (id) init {
  if ((self = [super init])) {
    self.redPacketId = 0L;
    self.ownerPassportId = 0L;
    self.beforeTicketId = 0L;
    self.page = 0L;
  }
  return self;
}
static PBFetchRedPacketTicketReq* defaultPBFetchRedPacketTicketReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketTicketReq class]) {
    defaultPBFetchRedPacketTicketReqInstance = [[PBFetchRedPacketTicketReq alloc] init];
  }
}
+ (PBFetchRedPacketTicketReq*) defaultInstance {
  return defaultPBFetchRedPacketTicketReqInstance;
}
- (PBFetchRedPacketTicketReq*) defaultInstance {
  return defaultPBFetchRedPacketTicketReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRedPacketId) {
    [output writeSInt64:1 value:self.redPacketId];
  }
  if (self.hasOwnerPassportId) {
    [output writeSInt64:2 value:self.ownerPassportId];
  }
  if (self.hasBeforeTicketId) {
    [output writeSInt64:3 value:self.beforeTicketId];
  }
  if (self.hasPage) {
    [output writeSInt64:4 value:self.page];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRedPacketId) {
    size_ += computeSInt64Size(1, self.redPacketId);
  }
  if (self.hasOwnerPassportId) {
    size_ += computeSInt64Size(2, self.ownerPassportId);
  }
  if (self.hasBeforeTicketId) {
    size_ += computeSInt64Size(3, self.beforeTicketId);
  }
  if (self.hasPage) {
    size_ += computeSInt64Size(4, self.page);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketTicketReq*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketTicketReq*)[[[PBFetchRedPacketTicketReq builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketTicketReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketTicketReq*)[[[PBFetchRedPacketTicketReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketTicketReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketTicketReq*)[[[PBFetchRedPacketTicketReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketTicketReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketTicketReq*)[[[PBFetchRedPacketTicketReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketTicketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketTicketReq*)[[[PBFetchRedPacketTicketReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketTicketReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketTicketReq*)[[[PBFetchRedPacketTicketReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketTicketReqBuilder*) builder {
  return [[PBFetchRedPacketTicketReqBuilder alloc] init];
}
+ (PBFetchRedPacketTicketReqBuilder*) builderWithPrototype:(PBFetchRedPacketTicketReq*) prototype {
  return [[PBFetchRedPacketTicketReq builder] mergeFrom:prototype];
}
- (PBFetchRedPacketTicketReqBuilder*) builder {
  return [PBFetchRedPacketTicketReq builder];
}
- (PBFetchRedPacketTicketReqBuilder*) toBuilder {
  return [PBFetchRedPacketTicketReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRedPacketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redPacketId", [NSNumber numberWithLongLong:self.redPacketId]];
  }
  if (self.hasOwnerPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerPassportId", [NSNumber numberWithLongLong:self.ownerPassportId]];
  }
  if (self.hasBeforeTicketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beforeTicketId", [NSNumber numberWithLongLong:self.beforeTicketId]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithLongLong:self.page]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketTicketReq class]]) {
    return NO;
  }
  PBFetchRedPacketTicketReq *otherMessage = other;
  return
      self.hasRedPacketId == otherMessage.hasRedPacketId &&
      (!self.hasRedPacketId || self.redPacketId == otherMessage.redPacketId) &&
      self.hasOwnerPassportId == otherMessage.hasOwnerPassportId &&
      (!self.hasOwnerPassportId || self.ownerPassportId == otherMessage.ownerPassportId) &&
      self.hasBeforeTicketId == otherMessage.hasBeforeTicketId &&
      (!self.hasBeforeTicketId || self.beforeTicketId == otherMessage.beforeTicketId) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRedPacketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.redPacketId] hash];
  }
  if (self.hasOwnerPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.ownerPassportId] hash];
  }
  if (self.hasBeforeTicketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.beforeTicketId] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.page] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketTicketReqBuilder()
@property (strong) PBFetchRedPacketTicketReq* result;
@end

@implementation PBFetchRedPacketTicketReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketTicketReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketTicketReqBuilder*) clear {
  self.result = [[PBFetchRedPacketTicketReq alloc] init];
  return self;
}
- (PBFetchRedPacketTicketReqBuilder*) clone {
  return [PBFetchRedPacketTicketReq builderWithPrototype:result];
}
- (PBFetchRedPacketTicketReq*) defaultInstance {
  return [PBFetchRedPacketTicketReq defaultInstance];
}
- (PBFetchRedPacketTicketReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketTicketReq*) buildPartial {
  PBFetchRedPacketTicketReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketTicketReqBuilder*) mergeFrom:(PBFetchRedPacketTicketReq*) other {
  if (other == [PBFetchRedPacketTicketReq defaultInstance]) {
    return self;
  }
  if (other.hasRedPacketId) {
    [self setRedPacketId:other.redPacketId];
  }
  if (other.hasOwnerPassportId) {
    [self setOwnerPassportId:other.ownerPassportId];
  }
  if (other.hasBeforeTicketId) {
    [self setBeforeTicketId:other.beforeTicketId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketTicketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketTicketReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRedPacketId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setOwnerPassportId:[input readSInt64]];
        break;
      }
      case 24: {
        [self setBeforeTicketId:[input readSInt64]];
        break;
      }
      case 32: {
        [self setPage:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasRedPacketId {
  return result.hasRedPacketId;
}
- (SInt64) redPacketId {
  return result.redPacketId;
}
- (PBFetchRedPacketTicketReqBuilder*) setRedPacketId:(SInt64) value {
  result.hasRedPacketId = YES;
  result.redPacketId = value;
  return self;
}
- (PBFetchRedPacketTicketReqBuilder*) clearRedPacketId {
  result.hasRedPacketId = NO;
  result.redPacketId = 0L;
  return self;
}
- (BOOL) hasOwnerPassportId {
  return result.hasOwnerPassportId;
}
- (SInt64) ownerPassportId {
  return result.ownerPassportId;
}
- (PBFetchRedPacketTicketReqBuilder*) setOwnerPassportId:(SInt64) value {
  result.hasOwnerPassportId = YES;
  result.ownerPassportId = value;
  return self;
}
- (PBFetchRedPacketTicketReqBuilder*) clearOwnerPassportId {
  result.hasOwnerPassportId = NO;
  result.ownerPassportId = 0L;
  return self;
}
- (BOOL) hasBeforeTicketId {
  return result.hasBeforeTicketId;
}
- (SInt64) beforeTicketId {
  return result.beforeTicketId;
}
- (PBFetchRedPacketTicketReqBuilder*) setBeforeTicketId:(SInt64) value {
  result.hasBeforeTicketId = YES;
  result.beforeTicketId = value;
  return self;
}
- (PBFetchRedPacketTicketReqBuilder*) clearBeforeTicketId {
  result.hasBeforeTicketId = NO;
  result.beforeTicketId = 0L;
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt64) page {
  return result.page;
}
- (PBFetchRedPacketTicketReqBuilder*) setPage:(SInt64) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchRedPacketTicketReqBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0L;
  return self;
}
@end

@interface PBFetchRedPacketTicketResp ()
@property (strong) NSMutableArray * ticketsArray;
@property BOOL hasMore;
@property SInt64 totalCount;
@property SInt64 receivedCount;
@end

@implementation PBFetchRedPacketTicketResp

@synthesize ticketsArray;
@dynamic tickets;
- (BOOL) hasHasMore {
  return !!hasHasMore_;
}
- (void) setHasHasMore:(BOOL) value_ {
  hasHasMore_ = !!value_;
}
- (BOOL) hasMore {
  return !!hasMore_;
}
- (void) setHasMore:(BOOL) value_ {
  hasMore_ = !!value_;
}
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) value_ {
  hasTotalCount_ = !!value_;
}
@synthesize totalCount;
- (BOOL) hasReceivedCount {
  return !!hasReceivedCount_;
}
- (void) setHasReceivedCount:(BOOL) value_ {
  hasReceivedCount_ = !!value_;
}
@synthesize receivedCount;
- (id) init {
  if ((self = [super init])) {
    self.hasMore = NO;
    self.totalCount = 0L;
    self.receivedCount = 0L;
  }
  return self;
}
static PBFetchRedPacketTicketResp* defaultPBFetchRedPacketTicketRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketTicketResp class]) {
    defaultPBFetchRedPacketTicketRespInstance = [[PBFetchRedPacketTicketResp alloc] init];
  }
}
+ (PBFetchRedPacketTicketResp*) defaultInstance {
  return defaultPBFetchRedPacketTicketRespInstance;
}
- (PBFetchRedPacketTicketResp*) defaultInstance {
  return defaultPBFetchRedPacketTicketRespInstance;
}
- (NSArray *)tickets {
  return ticketsArray;
}
- (PBRedPacketTicket*)ticketsAtIndex:(NSUInteger)index {
  return [ticketsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.ticketsArray enumerateObjectsUsingBlock:^(PBRedPacketTicket *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasHasMore) {
    [output writeBool:2 value:self.hasMore];
  }
  if (self.hasTotalCount) {
    [output writeSInt64:3 value:self.totalCount];
  }
  if (self.hasReceivedCount) {
    [output writeSInt64:4 value:self.receivedCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.ticketsArray enumerateObjectsUsingBlock:^(PBRedPacketTicket *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasHasMore) {
    size_ += computeBoolSize(2, self.hasMore);
  }
  if (self.hasTotalCount) {
    size_ += computeSInt64Size(3, self.totalCount);
  }
  if (self.hasReceivedCount) {
    size_ += computeSInt64Size(4, self.receivedCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketTicketResp*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketTicketResp*)[[[PBFetchRedPacketTicketResp builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketTicketResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketTicketResp*)[[[PBFetchRedPacketTicketResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketTicketResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketTicketResp*)[[[PBFetchRedPacketTicketResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketTicketResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketTicketResp*)[[[PBFetchRedPacketTicketResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketTicketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketTicketResp*)[[[PBFetchRedPacketTicketResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketTicketResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketTicketResp*)[[[PBFetchRedPacketTicketResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketTicketRespBuilder*) builder {
  return [[PBFetchRedPacketTicketRespBuilder alloc] init];
}
+ (PBFetchRedPacketTicketRespBuilder*) builderWithPrototype:(PBFetchRedPacketTicketResp*) prototype {
  return [[PBFetchRedPacketTicketResp builder] mergeFrom:prototype];
}
- (PBFetchRedPacketTicketRespBuilder*) builder {
  return [PBFetchRedPacketTicketResp builder];
}
- (PBFetchRedPacketTicketRespBuilder*) toBuilder {
  return [PBFetchRedPacketTicketResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.ticketsArray enumerateObjectsUsingBlock:^(PBRedPacketTicket *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tickets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithLongLong:self.totalCount]];
  }
  if (self.hasReceivedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receivedCount", [NSNumber numberWithLongLong:self.receivedCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketTicketResp class]]) {
    return NO;
  }
  PBFetchRedPacketTicketResp *otherMessage = other;
  return
      [self.ticketsArray isEqualToArray:otherMessage.ticketsArray] &&
      self.hasHasMore == otherMessage.hasHasMore &&
      (!self.hasHasMore || self.hasMore == otherMessage.hasMore) &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || self.totalCount == otherMessage.totalCount) &&
      self.hasReceivedCount == otherMessage.hasReceivedCount &&
      (!self.hasReceivedCount || self.receivedCount == otherMessage.receivedCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.ticketsArray enumerateObjectsUsingBlock:^(PBRedPacketTicket *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasHasMore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMore] hash];
  }
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalCount] hash];
  }
  if (self.hasReceivedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.receivedCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketTicketRespBuilder()
@property (strong) PBFetchRedPacketTicketResp* result;
@end

@implementation PBFetchRedPacketTicketRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketTicketResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketTicketRespBuilder*) clear {
  self.result = [[PBFetchRedPacketTicketResp alloc] init];
  return self;
}
- (PBFetchRedPacketTicketRespBuilder*) clone {
  return [PBFetchRedPacketTicketResp builderWithPrototype:result];
}
- (PBFetchRedPacketTicketResp*) defaultInstance {
  return [PBFetchRedPacketTicketResp defaultInstance];
}
- (PBFetchRedPacketTicketResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketTicketResp*) buildPartial {
  PBFetchRedPacketTicketResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketTicketRespBuilder*) mergeFrom:(PBFetchRedPacketTicketResp*) other {
  if (other == [PBFetchRedPacketTicketResp defaultInstance]) {
    return self;
  }
  if (other.ticketsArray.count > 0) {
    if (result.ticketsArray == nil) {
      result.ticketsArray = [[NSMutableArray alloc] initWithArray:other.ticketsArray];
    } else {
      [result.ticketsArray addObjectsFromArray:other.ticketsArray];
    }
  }
  if (other.hasHasMore) {
    [self setHasMore:other.hasMore];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasReceivedCount) {
    [self setReceivedCount:other.receivedCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketTicketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketTicketRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRedPacketTicketBuilder* subBuilder = [PBRedPacketTicket builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTickets:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 24: {
        [self setTotalCount:[input readSInt64]];
        break;
      }
      case 32: {
        [self setReceivedCount:[input readSInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)tickets {
  return result.ticketsArray;
}
- (PBRedPacketTicket*)ticketsAtIndex:(NSUInteger)index {
  return [result ticketsAtIndex:index];
}
- (PBFetchRedPacketTicketRespBuilder *)addTickets:(PBRedPacketTicket*)value {
  if (result.ticketsArray == nil) {
    result.ticketsArray = [[NSMutableArray alloc]init];
  }
  [result.ticketsArray addObject:value];
  return self;
}
- (PBFetchRedPacketTicketRespBuilder *)setTicketsArray:(NSArray *)array {
  result.ticketsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchRedPacketTicketRespBuilder *)clearTickets {
  result.ticketsArray = nil;
  return self;
}
- (BOOL) hasHasMore {
  return result.hasHasMore;
}
- (BOOL) hasMore {
  return result.hasMore;
}
- (PBFetchRedPacketTicketRespBuilder*) setHasMore:(BOOL) value {
  result.hasHasMore = YES;
  result.hasMore = value;
  return self;
}
- (PBFetchRedPacketTicketRespBuilder*) clearHasMore {
  result.hasHasMore = NO;
  result.hasMore = NO;
  return self;
}
- (BOOL) hasTotalCount {
  return result.hasTotalCount;
}
- (SInt64) totalCount {
  return result.totalCount;
}
- (PBFetchRedPacketTicketRespBuilder*) setTotalCount:(SInt64) value {
  result.hasTotalCount = YES;
  result.totalCount = value;
  return self;
}
- (PBFetchRedPacketTicketRespBuilder*) clearTotalCount {
  result.hasTotalCount = NO;
  result.totalCount = 0L;
  return self;
}
- (BOOL) hasReceivedCount {
  return result.hasReceivedCount;
}
- (SInt64) receivedCount {
  return result.receivedCount;
}
- (PBFetchRedPacketTicketRespBuilder*) setReceivedCount:(SInt64) value {
  result.hasReceivedCount = YES;
  result.receivedCount = value;
  return self;
}
- (PBFetchRedPacketTicketRespBuilder*) clearReceivedCount {
  result.hasReceivedCount = NO;
  result.receivedCount = 0L;
  return self;
}
@end

@interface PBSetRedPacketTicketReceivedReq ()
@property SInt64 redPacketId;
@property (strong) NSString* code;
@end

@implementation PBSetRedPacketTicketReceivedReq

- (BOOL) hasRedPacketId {
  return !!hasRedPacketId_;
}
- (void) setHasRedPacketId:(BOOL) value_ {
  hasRedPacketId_ = !!value_;
}
@synthesize redPacketId;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value_ {
  hasCode_ = !!value_;
}
@synthesize code;
- (id) init {
  if ((self = [super init])) {
    self.redPacketId = 0L;
    self.code = @"";
  }
  return self;
}
static PBSetRedPacketTicketReceivedReq* defaultPBSetRedPacketTicketReceivedReqInstance = nil;
+ (void) initialize {
  if (self == [PBSetRedPacketTicketReceivedReq class]) {
    defaultPBSetRedPacketTicketReceivedReqInstance = [[PBSetRedPacketTicketReceivedReq alloc] init];
  }
}
+ (PBSetRedPacketTicketReceivedReq*) defaultInstance {
  return defaultPBSetRedPacketTicketReceivedReqInstance;
}
- (PBSetRedPacketTicketReceivedReq*) defaultInstance {
  return defaultPBSetRedPacketTicketReceivedReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRedPacketId) {
    [output writeSInt64:1 value:self.redPacketId];
  }
  if (self.hasCode) {
    [output writeString:2 value:self.code];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRedPacketId) {
    size_ += computeSInt64Size(1, self.redPacketId);
  }
  if (self.hasCode) {
    size_ += computeStringSize(2, self.code);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSetRedPacketTicketReceivedReq*) parseFromData:(NSData*) data {
  return (PBSetRedPacketTicketReceivedReq*)[[[PBSetRedPacketTicketReceivedReq builder] mergeFromData:data] build];
}
+ (PBSetRedPacketTicketReceivedReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSetRedPacketTicketReceivedReq*)[[[PBSetRedPacketTicketReceivedReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSetRedPacketTicketReceivedReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBSetRedPacketTicketReceivedReq*)[[[PBSetRedPacketTicketReceivedReq builder] mergeFromInputStream:input] build];
}
+ (PBSetRedPacketTicketReceivedReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSetRedPacketTicketReceivedReq*)[[[PBSetRedPacketTicketReceivedReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSetRedPacketTicketReceivedReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSetRedPacketTicketReceivedReq*)[[[PBSetRedPacketTicketReceivedReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBSetRedPacketTicketReceivedReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSetRedPacketTicketReceivedReq*)[[[PBSetRedPacketTicketReceivedReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSetRedPacketTicketReceivedReqBuilder*) builder {
  return [[PBSetRedPacketTicketReceivedReqBuilder alloc] init];
}
+ (PBSetRedPacketTicketReceivedReqBuilder*) builderWithPrototype:(PBSetRedPacketTicketReceivedReq*) prototype {
  return [[PBSetRedPacketTicketReceivedReq builder] mergeFrom:prototype];
}
- (PBSetRedPacketTicketReceivedReqBuilder*) builder {
  return [PBSetRedPacketTicketReceivedReq builder];
}
- (PBSetRedPacketTicketReceivedReqBuilder*) toBuilder {
  return [PBSetRedPacketTicketReceivedReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRedPacketId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redPacketId", [NSNumber numberWithLongLong:self.redPacketId]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSetRedPacketTicketReceivedReq class]]) {
    return NO;
  }
  PBSetRedPacketTicketReceivedReq *otherMessage = other;
  return
      self.hasRedPacketId == otherMessage.hasRedPacketId &&
      (!self.hasRedPacketId || self.redPacketId == otherMessage.redPacketId) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || [self.code isEqual:otherMessage.code]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRedPacketId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.redPacketId] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [self.code hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSetRedPacketTicketReceivedReqBuilder()
@property (strong) PBSetRedPacketTicketReceivedReq* result;
@end

@implementation PBSetRedPacketTicketReceivedReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSetRedPacketTicketReceivedReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) clear {
  self.result = [[PBSetRedPacketTicketReceivedReq alloc] init];
  return self;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) clone {
  return [PBSetRedPacketTicketReceivedReq builderWithPrototype:result];
}
- (PBSetRedPacketTicketReceivedReq*) defaultInstance {
  return [PBSetRedPacketTicketReceivedReq defaultInstance];
}
- (PBSetRedPacketTicketReceivedReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSetRedPacketTicketReceivedReq*) buildPartial {
  PBSetRedPacketTicketReceivedReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) mergeFrom:(PBSetRedPacketTicketReceivedReq*) other {
  if (other == [PBSetRedPacketTicketReceivedReq defaultInstance]) {
    return self;
  }
  if (other.hasRedPacketId) {
    [self setRedPacketId:other.redPacketId];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSetRedPacketTicketReceivedReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRedPacketId:[input readSInt64]];
        break;
      }
      case 18: {
        [self setCode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRedPacketId {
  return result.hasRedPacketId;
}
- (SInt64) redPacketId {
  return result.redPacketId;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) setRedPacketId:(SInt64) value {
  result.hasRedPacketId = YES;
  result.redPacketId = value;
  return self;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) clearRedPacketId {
  result.hasRedPacketId = NO;
  result.redPacketId = 0L;
  return self;
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (NSString*) code {
  return result.code;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) setCode:(NSString*) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (PBSetRedPacketTicketReceivedReqBuilder*) clearCode {
  result.hasCode = NO;
  result.code = @"";
  return self;
}
@end

@interface PBSetRedPacketTicketReceivedResp ()
@property BOOL successful;
@property (strong) NSString* msg;
@end

@implementation PBSetRedPacketTicketReceivedResp

- (BOOL) hasSuccessful {
  return !!hasSuccessful_;
}
- (void) setHasSuccessful:(BOOL) value_ {
  hasSuccessful_ = !!value_;
}
- (BOOL) successful {
  return !!successful_;
}
- (void) setSuccessful:(BOOL) value_ {
  successful_ = !!value_;
}
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) value_ {
  hasMsg_ = !!value_;
}
@synthesize msg;
- (id) init {
  if ((self = [super init])) {
    self.successful = YES;
    self.msg = @"";
  }
  return self;
}
static PBSetRedPacketTicketReceivedResp* defaultPBSetRedPacketTicketReceivedRespInstance = nil;
+ (void) initialize {
  if (self == [PBSetRedPacketTicketReceivedResp class]) {
    defaultPBSetRedPacketTicketReceivedRespInstance = [[PBSetRedPacketTicketReceivedResp alloc] init];
  }
}
+ (PBSetRedPacketTicketReceivedResp*) defaultInstance {
  return defaultPBSetRedPacketTicketReceivedRespInstance;
}
- (PBSetRedPacketTicketReceivedResp*) defaultInstance {
  return defaultPBSetRedPacketTicketReceivedRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSuccessful) {
    [output writeBool:1 value:self.successful];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSuccessful) {
    size_ += computeBoolSize(1, self.successful);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSetRedPacketTicketReceivedResp*) parseFromData:(NSData*) data {
  return (PBSetRedPacketTicketReceivedResp*)[[[PBSetRedPacketTicketReceivedResp builder] mergeFromData:data] build];
}
+ (PBSetRedPacketTicketReceivedResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSetRedPacketTicketReceivedResp*)[[[PBSetRedPacketTicketReceivedResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSetRedPacketTicketReceivedResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBSetRedPacketTicketReceivedResp*)[[[PBSetRedPacketTicketReceivedResp builder] mergeFromInputStream:input] build];
}
+ (PBSetRedPacketTicketReceivedResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSetRedPacketTicketReceivedResp*)[[[PBSetRedPacketTicketReceivedResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSetRedPacketTicketReceivedResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSetRedPacketTicketReceivedResp*)[[[PBSetRedPacketTicketReceivedResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBSetRedPacketTicketReceivedResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSetRedPacketTicketReceivedResp*)[[[PBSetRedPacketTicketReceivedResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSetRedPacketTicketReceivedRespBuilder*) builder {
  return [[PBSetRedPacketTicketReceivedRespBuilder alloc] init];
}
+ (PBSetRedPacketTicketReceivedRespBuilder*) builderWithPrototype:(PBSetRedPacketTicketReceivedResp*) prototype {
  return [[PBSetRedPacketTicketReceivedResp builder] mergeFrom:prototype];
}
- (PBSetRedPacketTicketReceivedRespBuilder*) builder {
  return [PBSetRedPacketTicketReceivedResp builder];
}
- (PBSetRedPacketTicketReceivedRespBuilder*) toBuilder {
  return [PBSetRedPacketTicketReceivedResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSuccessful) {
    [output appendFormat:@"%@%@: %@\n", indent, @"successful", [NSNumber numberWithBool:self.successful]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSetRedPacketTicketReceivedResp class]]) {
    return NO;
  }
  PBSetRedPacketTicketReceivedResp *otherMessage = other;
  return
      self.hasSuccessful == otherMessage.hasSuccessful &&
      (!self.hasSuccessful || self.successful == otherMessage.successful) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSuccessful) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.successful] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSetRedPacketTicketReceivedRespBuilder()
@property (strong) PBSetRedPacketTicketReceivedResp* result;
@end

@implementation PBSetRedPacketTicketReceivedRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSetRedPacketTicketReceivedResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) clear {
  self.result = [[PBSetRedPacketTicketReceivedResp alloc] init];
  return self;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) clone {
  return [PBSetRedPacketTicketReceivedResp builderWithPrototype:result];
}
- (PBSetRedPacketTicketReceivedResp*) defaultInstance {
  return [PBSetRedPacketTicketReceivedResp defaultInstance];
}
- (PBSetRedPacketTicketReceivedResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSetRedPacketTicketReceivedResp*) buildPartial {
  PBSetRedPacketTicketReceivedResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) mergeFrom:(PBSetRedPacketTicketReceivedResp*) other {
  if (other == [PBSetRedPacketTicketReceivedResp defaultInstance]) {
    return self;
  }
  if (other.hasSuccessful) {
    [self setSuccessful:other.successful];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSetRedPacketTicketReceivedRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSuccessful:[input readBool]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSuccessful {
  return result.hasSuccessful;
}
- (BOOL) successful {
  return result.successful;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) setSuccessful:(BOOL) value {
  result.hasSuccessful = YES;
  result.successful = value;
  return self;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) clearSuccessful {
  result.hasSuccessful = NO;
  result.successful = YES;
  return self;
}
- (BOOL) hasMsg {
  return result.hasMsg;
}
- (NSString*) msg {
  return result.msg;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) setMsg:(NSString*) value {
  result.hasMsg = YES;
  result.msg = value;
  return self;
}
- (PBSetRedPacketTicketReceivedRespBuilder*) clearMsg {
  result.hasMsg = NO;
  result.msg = @"";
  return self;
}
@end

@interface PBSendWaveReq ()
@property (strong) PBWave* wave;
@property SInt64 parkId;
@end

@implementation PBSendWaveReq

- (BOOL) hasWave {
  return !!hasWave_;
}
- (void) setHasWave:(BOOL) value_ {
  hasWave_ = !!value_;
}
@synthesize wave;
- (BOOL) hasParkId {
  return !!hasParkId_;
}
- (void) setHasParkId:(BOOL) value_ {
  hasParkId_ = !!value_;
}
@synthesize parkId;
- (id) init {
  if ((self = [super init])) {
    self.wave = [PBWave defaultInstance];
    self.parkId = 0L;
  }
  return self;
}
static PBSendWaveReq* defaultPBSendWaveReqInstance = nil;
+ (void) initialize {
  if (self == [PBSendWaveReq class]) {
    defaultPBSendWaveReqInstance = [[PBSendWaveReq alloc] init];
  }
}
+ (PBSendWaveReq*) defaultInstance {
  return defaultPBSendWaveReqInstance;
}
- (PBSendWaveReq*) defaultInstance {
  return defaultPBSendWaveReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWave) {
    [output writeMessage:1 value:self.wave];
  }
  if (self.hasParkId) {
    [output writeSInt64:2 value:self.parkId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWave) {
    size_ += computeMessageSize(1, self.wave);
  }
  if (self.hasParkId) {
    size_ += computeSInt64Size(2, self.parkId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSendWaveReq*) parseFromData:(NSData*) data {
  return (PBSendWaveReq*)[[[PBSendWaveReq builder] mergeFromData:data] build];
}
+ (PBSendWaveReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveReq*)[[[PBSendWaveReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBSendWaveReq*)[[[PBSendWaveReq builder] mergeFromInputStream:input] build];
}
+ (PBSendWaveReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveReq*)[[[PBSendWaveReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSendWaveReq*)[[[PBSendWaveReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBSendWaveReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveReq*)[[[PBSendWaveReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveReqBuilder*) builder {
  return [[PBSendWaveReqBuilder alloc] init];
}
+ (PBSendWaveReqBuilder*) builderWithPrototype:(PBSendWaveReq*) prototype {
  return [[PBSendWaveReq builder] mergeFrom:prototype];
}
- (PBSendWaveReqBuilder*) builder {
  return [PBSendWaveReq builder];
}
- (PBSendWaveReqBuilder*) toBuilder {
  return [PBSendWaveReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWave) {
    [output appendFormat:@"%@%@ {\n", indent, @"wave"];
    [self.wave writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasParkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkId", [NSNumber numberWithLongLong:self.parkId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSendWaveReq class]]) {
    return NO;
  }
  PBSendWaveReq *otherMessage = other;
  return
      self.hasWave == otherMessage.hasWave &&
      (!self.hasWave || [self.wave isEqual:otherMessage.wave]) &&
      self.hasParkId == otherMessage.hasParkId &&
      (!self.hasParkId || self.parkId == otherMessage.parkId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWave) {
    hashCode = hashCode * 31 + [self.wave hash];
  }
  if (self.hasParkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parkId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSendWaveReqBuilder()
@property (strong) PBSendWaveReq* result;
@end

@implementation PBSendWaveReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSendWaveReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSendWaveReqBuilder*) clear {
  self.result = [[PBSendWaveReq alloc] init];
  return self;
}
- (PBSendWaveReqBuilder*) clone {
  return [PBSendWaveReq builderWithPrototype:result];
}
- (PBSendWaveReq*) defaultInstance {
  return [PBSendWaveReq defaultInstance];
}
- (PBSendWaveReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSendWaveReq*) buildPartial {
  PBSendWaveReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSendWaveReqBuilder*) mergeFrom:(PBSendWaveReq*) other {
  if (other == [PBSendWaveReq defaultInstance]) {
    return self;
  }
  if (other.hasWave) {
    [self mergeWave:other.wave];
  }
  if (other.hasParkId) {
    [self setParkId:other.parkId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSendWaveReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSendWaveReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveBuilder* subBuilder = [PBWave builder];
        if (self.hasWave) {
          [subBuilder mergeFrom:self.wave];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWave:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setParkId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasWave {
  return result.hasWave;
}
- (PBWave*) wave {
  return result.wave;
}
- (PBSendWaveReqBuilder*) setWave:(PBWave*) value {
  result.hasWave = YES;
  result.wave = value;
  return self;
}
- (PBSendWaveReqBuilder*) setWaveBuilder:(PBWaveBuilder*) builderForValue {
  return [self setWave:[builderForValue build]];
}
- (PBSendWaveReqBuilder*) mergeWave:(PBWave*) value {
  if (result.hasWave &&
      result.wave != [PBWave defaultInstance]) {
    result.wave =
      [[[PBWave builderWithPrototype:result.wave] mergeFrom:value] buildPartial];
  } else {
    result.wave = value;
  }
  result.hasWave = YES;
  return self;
}
- (PBSendWaveReqBuilder*) clearWave {
  result.hasWave = NO;
  result.wave = [PBWave defaultInstance];
  return self;
}
- (BOOL) hasParkId {
  return result.hasParkId;
}
- (SInt64) parkId {
  return result.parkId;
}
- (PBSendWaveReqBuilder*) setParkId:(SInt64) value {
  result.hasParkId = YES;
  result.parkId = value;
  return self;
}
- (PBSendWaveReqBuilder*) clearParkId {
  result.hasParkId = NO;
  result.parkId = 0L;
  return self;
}
@end

@interface PBSendWaveResp ()
@property (strong) PBWave* wave;
@end

@implementation PBSendWaveResp

- (BOOL) hasWave {
  return !!hasWave_;
}
- (void) setHasWave:(BOOL) value_ {
  hasWave_ = !!value_;
}
@synthesize wave;
- (id) init {
  if ((self = [super init])) {
    self.wave = [PBWave defaultInstance];
  }
  return self;
}
static PBSendWaveResp* defaultPBSendWaveRespInstance = nil;
+ (void) initialize {
  if (self == [PBSendWaveResp class]) {
    defaultPBSendWaveRespInstance = [[PBSendWaveResp alloc] init];
  }
}
+ (PBSendWaveResp*) defaultInstance {
  return defaultPBSendWaveRespInstance;
}
- (PBSendWaveResp*) defaultInstance {
  return defaultPBSendWaveRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWave) {
    [output writeMessage:1 value:self.wave];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWave) {
    size_ += computeMessageSize(1, self.wave);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSendWaveResp*) parseFromData:(NSData*) data {
  return (PBSendWaveResp*)[[[PBSendWaveResp builder] mergeFromData:data] build];
}
+ (PBSendWaveResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveResp*)[[[PBSendWaveResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBSendWaveResp*)[[[PBSendWaveResp builder] mergeFromInputStream:input] build];
}
+ (PBSendWaveResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveResp*)[[[PBSendWaveResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSendWaveResp*)[[[PBSendWaveResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBSendWaveResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveResp*)[[[PBSendWaveResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveRespBuilder*) builder {
  return [[PBSendWaveRespBuilder alloc] init];
}
+ (PBSendWaveRespBuilder*) builderWithPrototype:(PBSendWaveResp*) prototype {
  return [[PBSendWaveResp builder] mergeFrom:prototype];
}
- (PBSendWaveRespBuilder*) builder {
  return [PBSendWaveResp builder];
}
- (PBSendWaveRespBuilder*) toBuilder {
  return [PBSendWaveResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWave) {
    [output appendFormat:@"%@%@ {\n", indent, @"wave"];
    [self.wave writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSendWaveResp class]]) {
    return NO;
  }
  PBSendWaveResp *otherMessage = other;
  return
      self.hasWave == otherMessage.hasWave &&
      (!self.hasWave || [self.wave isEqual:otherMessage.wave]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWave) {
    hashCode = hashCode * 31 + [self.wave hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSendWaveRespBuilder()
@property (strong) PBSendWaveResp* result;
@end

@implementation PBSendWaveRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSendWaveResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSendWaveRespBuilder*) clear {
  self.result = [[PBSendWaveResp alloc] init];
  return self;
}
- (PBSendWaveRespBuilder*) clone {
  return [PBSendWaveResp builderWithPrototype:result];
}
- (PBSendWaveResp*) defaultInstance {
  return [PBSendWaveResp defaultInstance];
}
- (PBSendWaveResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSendWaveResp*) buildPartial {
  PBSendWaveResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSendWaveRespBuilder*) mergeFrom:(PBSendWaveResp*) other {
  if (other == [PBSendWaveResp defaultInstance]) {
    return self;
  }
  if (other.hasWave) {
    [self mergeWave:other.wave];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSendWaveRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSendWaveRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveBuilder* subBuilder = [PBWave builder];
        if (self.hasWave) {
          [subBuilder mergeFrom:self.wave];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWave:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWave {
  return result.hasWave;
}
- (PBWave*) wave {
  return result.wave;
}
- (PBSendWaveRespBuilder*) setWave:(PBWave*) value {
  result.hasWave = YES;
  result.wave = value;
  return self;
}
- (PBSendWaveRespBuilder*) setWaveBuilder:(PBWaveBuilder*) builderForValue {
  return [self setWave:[builderForValue build]];
}
- (PBSendWaveRespBuilder*) mergeWave:(PBWave*) value {
  if (result.hasWave &&
      result.wave != [PBWave defaultInstance]) {
    result.wave =
      [[[PBWave builderWithPrototype:result.wave] mergeFrom:value] buildPartial];
  } else {
    result.wave = value;
  }
  result.hasWave = YES;
  return self;
}
- (PBSendWaveRespBuilder*) clearWave {
  result.hasWave = NO;
  result.wave = [PBWave defaultInstance];
  return self;
}
@end

@interface PBFetchWavesReq ()
@property (strong) PBAppendableArray * waveIdsArray;
@end

@implementation PBFetchWavesReq

@synthesize waveIdsArray;
@dynamic waveIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchWavesReq* defaultPBFetchWavesReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWavesReq class]) {
    defaultPBFetchWavesReqInstance = [[PBFetchWavesReq alloc] init];
  }
}
+ (PBFetchWavesReq*) defaultInstance {
  return defaultPBFetchWavesReqInstance;
}
- (PBFetchWavesReq*) defaultInstance {
  return defaultPBFetchWavesReqInstance;
}
- (PBArray *)waveIds {
  return waveIdsArray;
}
- (SInt64)waveIdsAtIndex:(NSUInteger)index {
  return [waveIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger waveIdsArrayCount = self.waveIdsArray.count;
  if (waveIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.waveIdsArray.data;
    for (NSUInteger i = 0; i < waveIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.waveIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.waveIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWavesReq*) parseFromData:(NSData*) data {
  return (PBFetchWavesReq*)[[[PBFetchWavesReq builder] mergeFromData:data] build];
}
+ (PBFetchWavesReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesReq*)[[[PBFetchWavesReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWavesReq*)[[[PBFetchWavesReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchWavesReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesReq*)[[[PBFetchWavesReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWavesReq*)[[[PBFetchWavesReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWavesReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesReq*)[[[PBFetchWavesReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesReqBuilder*) builder {
  return [[PBFetchWavesReqBuilder alloc] init];
}
+ (PBFetchWavesReqBuilder*) builderWithPrototype:(PBFetchWavesReq*) prototype {
  return [[PBFetchWavesReq builder] mergeFrom:prototype];
}
- (PBFetchWavesReqBuilder*) builder {
  return [PBFetchWavesReq builder];
}
- (PBFetchWavesReqBuilder*) toBuilder {
  return [PBFetchWavesReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.waveIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWavesReq class]]) {
    return NO;
  }
  PBFetchWavesReq *otherMessage = other;
  return
      [self.waveIdsArray isEqualToArray:otherMessage.waveIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.waveIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWavesReqBuilder()
@property (strong) PBFetchWavesReq* result;
@end

@implementation PBFetchWavesReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWavesReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWavesReqBuilder*) clear {
  self.result = [[PBFetchWavesReq alloc] init];
  return self;
}
- (PBFetchWavesReqBuilder*) clone {
  return [PBFetchWavesReq builderWithPrototype:result];
}
- (PBFetchWavesReq*) defaultInstance {
  return [PBFetchWavesReq defaultInstance];
}
- (PBFetchWavesReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWavesReq*) buildPartial {
  PBFetchWavesReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWavesReqBuilder*) mergeFrom:(PBFetchWavesReq*) other {
  if (other == [PBFetchWavesReq defaultInstance]) {
    return self;
  }
  if (other.waveIdsArray.count > 0) {
    if (result.waveIdsArray == nil) {
      result.waveIdsArray = [other.waveIdsArray copy];
    } else {
      [result.waveIdsArray appendArray:other.waveIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWavesReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWavesReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addWaveIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)waveIds {
  return result.waveIdsArray;
}
- (SInt64)waveIdsAtIndex:(NSUInteger)index {
  return [result waveIdsAtIndex:index];
}
- (PBFetchWavesReqBuilder *)addWaveIds:(SInt64)value {
  if (result.waveIdsArray == nil) {
    result.waveIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.waveIdsArray addInt64:value];
  return self;
}
- (PBFetchWavesReqBuilder *)setWaveIdsArray:(NSArray *)array {
  result.waveIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWavesReqBuilder *)setWaveIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.waveIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWavesReqBuilder *)clearWaveIds {
  result.waveIdsArray = nil;
  return self;
}
@end

@interface PBFetchWavesResp ()
@property (strong) NSMutableArray * wavesArray;
@end

@implementation PBFetchWavesResp

@synthesize wavesArray;
@dynamic waves;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchWavesResp* defaultPBFetchWavesRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWavesResp class]) {
    defaultPBFetchWavesRespInstance = [[PBFetchWavesResp alloc] init];
  }
}
+ (PBFetchWavesResp*) defaultInstance {
  return defaultPBFetchWavesRespInstance;
}
- (PBFetchWavesResp*) defaultInstance {
  return defaultPBFetchWavesRespInstance;
}
- (NSArray *)waves {
  return wavesArray;
}
- (PBWave*)wavesAtIndex:(NSUInteger)index {
  return [wavesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWavesResp*) parseFromData:(NSData*) data {
  return (PBFetchWavesResp*)[[[PBFetchWavesResp builder] mergeFromData:data] build];
}
+ (PBFetchWavesResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesResp*)[[[PBFetchWavesResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWavesResp*)[[[PBFetchWavesResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchWavesResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesResp*)[[[PBFetchWavesResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWavesResp*)[[[PBFetchWavesResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWavesResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesResp*)[[[PBFetchWavesResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesRespBuilder*) builder {
  return [[PBFetchWavesRespBuilder alloc] init];
}
+ (PBFetchWavesRespBuilder*) builderWithPrototype:(PBFetchWavesResp*) prototype {
  return [[PBFetchWavesResp builder] mergeFrom:prototype];
}
- (PBFetchWavesRespBuilder*) builder {
  return [PBFetchWavesResp builder];
}
- (PBFetchWavesRespBuilder*) toBuilder {
  return [PBFetchWavesResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"waves"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWavesResp class]]) {
    return NO;
  }
  PBFetchWavesResp *otherMessage = other;
  return
      [self.wavesArray isEqualToArray:otherMessage.wavesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWavesRespBuilder()
@property (strong) PBFetchWavesResp* result;
@end

@implementation PBFetchWavesRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWavesResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWavesRespBuilder*) clear {
  self.result = [[PBFetchWavesResp alloc] init];
  return self;
}
- (PBFetchWavesRespBuilder*) clone {
  return [PBFetchWavesResp builderWithPrototype:result];
}
- (PBFetchWavesResp*) defaultInstance {
  return [PBFetchWavesResp defaultInstance];
}
- (PBFetchWavesResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWavesResp*) buildPartial {
  PBFetchWavesResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWavesRespBuilder*) mergeFrom:(PBFetchWavesResp*) other {
  if (other == [PBFetchWavesResp defaultInstance]) {
    return self;
  }
  if (other.wavesArray.count > 0) {
    if (result.wavesArray == nil) {
      result.wavesArray = [[NSMutableArray alloc] initWithArray:other.wavesArray];
    } else {
      [result.wavesArray addObjectsFromArray:other.wavesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWavesRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWavesRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveBuilder* subBuilder = [PBWave builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWaves:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)waves {
  return result.wavesArray;
}
- (PBWave*)wavesAtIndex:(NSUInteger)index {
  return [result wavesAtIndex:index];
}
- (PBFetchWavesRespBuilder *)addWaves:(PBWave*)value {
  if (result.wavesArray == nil) {
    result.wavesArray = [[NSMutableArray alloc]init];
  }
  [result.wavesArray addObject:value];
  return self;
}
- (PBFetchWavesRespBuilder *)setWavesArray:(NSArray *)array {
  result.wavesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchWavesRespBuilder *)clearWaves {
  result.wavesArray = nil;
  return self;
}
@end

@interface PBFetchWavesAndComentsReq ()
@property (strong) PBAppendableArray * waveIdsArray;
@end

@implementation PBFetchWavesAndComentsReq

@synthesize waveIdsArray;
@dynamic waveIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchWavesAndComentsReq* defaultPBFetchWavesAndComentsReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWavesAndComentsReq class]) {
    defaultPBFetchWavesAndComentsReqInstance = [[PBFetchWavesAndComentsReq alloc] init];
  }
}
+ (PBFetchWavesAndComentsReq*) defaultInstance {
  return defaultPBFetchWavesAndComentsReqInstance;
}
- (PBFetchWavesAndComentsReq*) defaultInstance {
  return defaultPBFetchWavesAndComentsReqInstance;
}
- (PBArray *)waveIds {
  return waveIdsArray;
}
- (SInt64)waveIdsAtIndex:(NSUInteger)index {
  return [waveIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger waveIdsArrayCount = self.waveIdsArray.count;
  if (waveIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.waveIdsArray.data;
    for (NSUInteger i = 0; i < waveIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.waveIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.waveIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWavesAndComentsReq*) parseFromData:(NSData*) data {
  return (PBFetchWavesAndComentsReq*)[[[PBFetchWavesAndComentsReq builder] mergeFromData:data] build];
}
+ (PBFetchWavesAndComentsReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsReq*)[[[PBFetchWavesAndComentsReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWavesAndComentsReq*)[[[PBFetchWavesAndComentsReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchWavesAndComentsReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsReq*)[[[PBFetchWavesAndComentsReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWavesAndComentsReq*)[[[PBFetchWavesAndComentsReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWavesAndComentsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsReq*)[[[PBFetchWavesAndComentsReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsReqBuilder*) builder {
  return [[PBFetchWavesAndComentsReqBuilder alloc] init];
}
+ (PBFetchWavesAndComentsReqBuilder*) builderWithPrototype:(PBFetchWavesAndComentsReq*) prototype {
  return [[PBFetchWavesAndComentsReq builder] mergeFrom:prototype];
}
- (PBFetchWavesAndComentsReqBuilder*) builder {
  return [PBFetchWavesAndComentsReq builder];
}
- (PBFetchWavesAndComentsReqBuilder*) toBuilder {
  return [PBFetchWavesAndComentsReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.waveIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWavesAndComentsReq class]]) {
    return NO;
  }
  PBFetchWavesAndComentsReq *otherMessage = other;
  return
      [self.waveIdsArray isEqualToArray:otherMessage.waveIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.waveIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWavesAndComentsReqBuilder()
@property (strong) PBFetchWavesAndComentsReq* result;
@end

@implementation PBFetchWavesAndComentsReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWavesAndComentsReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWavesAndComentsReqBuilder*) clear {
  self.result = [[PBFetchWavesAndComentsReq alloc] init];
  return self;
}
- (PBFetchWavesAndComentsReqBuilder*) clone {
  return [PBFetchWavesAndComentsReq builderWithPrototype:result];
}
- (PBFetchWavesAndComentsReq*) defaultInstance {
  return [PBFetchWavesAndComentsReq defaultInstance];
}
- (PBFetchWavesAndComentsReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWavesAndComentsReq*) buildPartial {
  PBFetchWavesAndComentsReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWavesAndComentsReqBuilder*) mergeFrom:(PBFetchWavesAndComentsReq*) other {
  if (other == [PBFetchWavesAndComentsReq defaultInstance]) {
    return self;
  }
  if (other.waveIdsArray.count > 0) {
    if (result.waveIdsArray == nil) {
      result.waveIdsArray = [other.waveIdsArray copy];
    } else {
      [result.waveIdsArray appendArray:other.waveIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWavesAndComentsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWavesAndComentsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addWaveIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)waveIds {
  return result.waveIdsArray;
}
- (SInt64)waveIdsAtIndex:(NSUInteger)index {
  return [result waveIdsAtIndex:index];
}
- (PBFetchWavesAndComentsReqBuilder *)addWaveIds:(SInt64)value {
  if (result.waveIdsArray == nil) {
    result.waveIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.waveIdsArray addInt64:value];
  return self;
}
- (PBFetchWavesAndComentsReqBuilder *)setWaveIdsArray:(NSArray *)array {
  result.waveIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWavesAndComentsReqBuilder *)setWaveIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.waveIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWavesAndComentsReqBuilder *)clearWaveIds {
  result.waveIdsArray = nil;
  return self;
}
@end

@interface PBFetchWavesAndComentsResp ()
@property (strong) NSMutableArray * abstractsArray;
@end

@implementation PBFetchWavesAndComentsResp

@synthesize abstractsArray;
@dynamic abstracts;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchWavesAndComentsResp* defaultPBFetchWavesAndComentsRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWavesAndComentsResp class]) {
    defaultPBFetchWavesAndComentsRespInstance = [[PBFetchWavesAndComentsResp alloc] init];
  }
}
+ (PBFetchWavesAndComentsResp*) defaultInstance {
  return defaultPBFetchWavesAndComentsRespInstance;
}
- (PBFetchWavesAndComentsResp*) defaultInstance {
  return defaultPBFetchWavesAndComentsRespInstance;
}
- (NSArray *)abstracts {
  return abstractsArray;
}
- (PBFetchWavesAndComentsRespPBWaveAbstract*)abstractsAtIndex:(NSUInteger)index {
  return [abstractsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWavesAndComentsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWavesAndComentsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWavesAndComentsResp*) parseFromData:(NSData*) data {
  return (PBFetchWavesAndComentsResp*)[[[PBFetchWavesAndComentsResp builder] mergeFromData:data] build];
}
+ (PBFetchWavesAndComentsResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsResp*)[[[PBFetchWavesAndComentsResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWavesAndComentsResp*)[[[PBFetchWavesAndComentsResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchWavesAndComentsResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsResp*)[[[PBFetchWavesAndComentsResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWavesAndComentsResp*)[[[PBFetchWavesAndComentsResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWavesAndComentsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsResp*)[[[PBFetchWavesAndComentsResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsRespBuilder*) builder {
  return [[PBFetchWavesAndComentsRespBuilder alloc] init];
}
+ (PBFetchWavesAndComentsRespBuilder*) builderWithPrototype:(PBFetchWavesAndComentsResp*) prototype {
  return [[PBFetchWavesAndComentsResp builder] mergeFrom:prototype];
}
- (PBFetchWavesAndComentsRespBuilder*) builder {
  return [PBFetchWavesAndComentsResp builder];
}
- (PBFetchWavesAndComentsRespBuilder*) toBuilder {
  return [PBFetchWavesAndComentsResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWavesAndComentsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"abstracts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWavesAndComentsResp class]]) {
    return NO;
  }
  PBFetchWavesAndComentsResp *otherMessage = other;
  return
      [self.abstractsArray isEqualToArray:otherMessage.abstractsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWavesAndComentsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWavesAndComentsRespPBWaveAbstract ()
@property SInt64 waveId;
@property (strong) PBAppendableArray * topTextCommentIdsArray;
@property SInt32 likeCommentCount;
@property SInt32 textCommentCount;
@property SInt64 youLikeCommentId;
@property (strong) PBWave* wave;
@end

@implementation PBFetchWavesAndComentsRespPBWaveAbstract

- (BOOL) hasWaveId {
  return !!hasWaveId_;
}
- (void) setHasWaveId:(BOOL) value_ {
  hasWaveId_ = !!value_;
}
@synthesize waveId;
@synthesize topTextCommentIdsArray;
@dynamic topTextCommentIds;
- (BOOL) hasLikeCommentCount {
  return !!hasLikeCommentCount_;
}
- (void) setHasLikeCommentCount:(BOOL) value_ {
  hasLikeCommentCount_ = !!value_;
}
@synthesize likeCommentCount;
- (BOOL) hasTextCommentCount {
  return !!hasTextCommentCount_;
}
- (void) setHasTextCommentCount:(BOOL) value_ {
  hasTextCommentCount_ = !!value_;
}
@synthesize textCommentCount;
- (BOOL) hasYouLikeCommentId {
  return !!hasYouLikeCommentId_;
}
- (void) setHasYouLikeCommentId:(BOOL) value_ {
  hasYouLikeCommentId_ = !!value_;
}
@synthesize youLikeCommentId;
- (BOOL) hasWave {
  return !!hasWave_;
}
- (void) setHasWave:(BOOL) value_ {
  hasWave_ = !!value_;
}
@synthesize wave;
- (id) init {
  if ((self = [super init])) {
    self.waveId = 0L;
    self.likeCommentCount = 0;
    self.textCommentCount = 0;
    self.youLikeCommentId = 0L;
    self.wave = [PBWave defaultInstance];
  }
  return self;
}
static PBFetchWavesAndComentsRespPBWaveAbstract* defaultPBFetchWavesAndComentsRespPBWaveAbstractInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWavesAndComentsRespPBWaveAbstract class]) {
    defaultPBFetchWavesAndComentsRespPBWaveAbstractInstance = [[PBFetchWavesAndComentsRespPBWaveAbstract alloc] init];
  }
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) defaultInstance {
  return defaultPBFetchWavesAndComentsRespPBWaveAbstractInstance;
}
- (PBFetchWavesAndComentsRespPBWaveAbstract*) defaultInstance {
  return defaultPBFetchWavesAndComentsRespPBWaveAbstractInstance;
}
- (PBArray *)topTextCommentIds {
  return topTextCommentIdsArray;
}
- (SInt64)topTextCommentIdsAtIndex:(NSUInteger)index {
  return [topTextCommentIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWaveId) {
    [output writeSInt64:1 value:self.waveId];
  }
  const NSUInteger topTextCommentIdsArrayCount = self.topTextCommentIdsArray.count;
  if (topTextCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.topTextCommentIdsArray.data;
    for (NSUInteger i = 0; i < topTextCommentIdsArrayCount; ++i) {
      [output writeSInt64:2 value:values[i]];
    }
  }
  if (self.hasLikeCommentCount) {
    [output writeSInt32:3 value:self.likeCommentCount];
  }
  if (self.hasTextCommentCount) {
    [output writeSInt32:4 value:self.textCommentCount];
  }
  if (self.hasYouLikeCommentId) {
    [output writeSInt64:5 value:self.youLikeCommentId];
  }
  if (self.hasWave) {
    [output writeMessage:6 value:self.wave];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWaveId) {
    size_ += computeSInt64Size(1, self.waveId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.topTextCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.topTextCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasLikeCommentCount) {
    size_ += computeSInt32Size(3, self.likeCommentCount);
  }
  if (self.hasTextCommentCount) {
    size_ += computeSInt32Size(4, self.textCommentCount);
  }
  if (self.hasYouLikeCommentId) {
    size_ += computeSInt64Size(5, self.youLikeCommentId);
  }
  if (self.hasWave) {
    size_ += computeMessageSize(6, self.wave);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) parseFromData:(NSData*) data {
  return (PBFetchWavesAndComentsRespPBWaveAbstract*)[[[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFromData:data] build];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsRespPBWaveAbstract*)[[[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWavesAndComentsRespPBWaveAbstract*)[[[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFromInputStream:input] build];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsRespPBWaveAbstract*)[[[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWavesAndComentsRespPBWaveAbstract*)[[[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstract*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWavesAndComentsRespPBWaveAbstract*)[[[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) builder {
  return [[PBFetchWavesAndComentsRespPBWaveAbstractBuilder alloc] init];
}
+ (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) builderWithPrototype:(PBFetchWavesAndComentsRespPBWaveAbstract*) prototype {
  return [[PBFetchWavesAndComentsRespPBWaveAbstract builder] mergeFrom:prototype];
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) builder {
  return [PBFetchWavesAndComentsRespPBWaveAbstract builder];
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) toBuilder {
  return [PBFetchWavesAndComentsRespPBWaveAbstract builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveId", [NSNumber numberWithLongLong:self.waveId]];
  }
  [self.topTextCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topTextCommentIds", obj];
  }];
  if (self.hasLikeCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"likeCommentCount", [NSNumber numberWithInteger:self.likeCommentCount]];
  }
  if (self.hasTextCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textCommentCount", [NSNumber numberWithInteger:self.textCommentCount]];
  }
  if (self.hasYouLikeCommentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"youLikeCommentId", [NSNumber numberWithLongLong:self.youLikeCommentId]];
  }
  if (self.hasWave) {
    [output appendFormat:@"%@%@ {\n", indent, @"wave"];
    [self.wave writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWavesAndComentsRespPBWaveAbstract class]]) {
    return NO;
  }
  PBFetchWavesAndComentsRespPBWaveAbstract *otherMessage = other;
  return
      self.hasWaveId == otherMessage.hasWaveId &&
      (!self.hasWaveId || self.waveId == otherMessage.waveId) &&
      [self.topTextCommentIdsArray isEqualToArray:otherMessage.topTextCommentIdsArray] &&
      self.hasLikeCommentCount == otherMessage.hasLikeCommentCount &&
      (!self.hasLikeCommentCount || self.likeCommentCount == otherMessage.likeCommentCount) &&
      self.hasTextCommentCount == otherMessage.hasTextCommentCount &&
      (!self.hasTextCommentCount || self.textCommentCount == otherMessage.textCommentCount) &&
      self.hasYouLikeCommentId == otherMessage.hasYouLikeCommentId &&
      (!self.hasYouLikeCommentId || self.youLikeCommentId == otherMessage.youLikeCommentId) &&
      self.hasWave == otherMessage.hasWave &&
      (!self.hasWave || [self.wave isEqual:otherMessage.wave]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.waveId] hash];
  }
  [self.topTextCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasLikeCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.likeCommentCount] hash];
  }
  if (self.hasTextCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.textCommentCount] hash];
  }
  if (self.hasYouLikeCommentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.youLikeCommentId] hash];
  }
  if (self.hasWave) {
    hashCode = hashCode * 31 + [self.wave hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWavesAndComentsRespPBWaveAbstractBuilder()
@property (strong) PBFetchWavesAndComentsRespPBWaveAbstract* result;
@end

@implementation PBFetchWavesAndComentsRespPBWaveAbstractBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWavesAndComentsRespPBWaveAbstract alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clear {
  self.result = [[PBFetchWavesAndComentsRespPBWaveAbstract alloc] init];
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clone {
  return [PBFetchWavesAndComentsRespPBWaveAbstract builderWithPrototype:result];
}
- (PBFetchWavesAndComentsRespPBWaveAbstract*) defaultInstance {
  return [PBFetchWavesAndComentsRespPBWaveAbstract defaultInstance];
}
- (PBFetchWavesAndComentsRespPBWaveAbstract*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWavesAndComentsRespPBWaveAbstract*) buildPartial {
  PBFetchWavesAndComentsRespPBWaveAbstract* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) mergeFrom:(PBFetchWavesAndComentsRespPBWaveAbstract*) other {
  if (other == [PBFetchWavesAndComentsRespPBWaveAbstract defaultInstance]) {
    return self;
  }
  if (other.hasWaveId) {
    [self setWaveId:other.waveId];
  }
  if (other.topTextCommentIdsArray.count > 0) {
    if (result.topTextCommentIdsArray == nil) {
      result.topTextCommentIdsArray = [other.topTextCommentIdsArray copy];
    } else {
      [result.topTextCommentIdsArray appendArray:other.topTextCommentIdsArray];
    }
  }
  if (other.hasLikeCommentCount) {
    [self setLikeCommentCount:other.likeCommentCount];
  }
  if (other.hasTextCommentCount) {
    [self setTextCommentCount:other.textCommentCount];
  }
  if (other.hasYouLikeCommentId) {
    [self setYouLikeCommentId:other.youLikeCommentId];
  }
  if (other.hasWave) {
    [self mergeWave:other.wave];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWaveId:[input readSInt64]];
        break;
      }
      case 16: {
        [self addTopTextCommentIds:[input readSInt64]];
        break;
      }
      case 24: {
        [self setLikeCommentCount:[input readSInt32]];
        break;
      }
      case 32: {
        [self setTextCommentCount:[input readSInt32]];
        break;
      }
      case 40: {
        [self setYouLikeCommentId:[input readSInt64]];
        break;
      }
      case 50: {
        PBWaveBuilder* subBuilder = [PBWave builder];
        if (self.hasWave) {
          [subBuilder mergeFrom:self.wave];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWave:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWaveId {
  return result.hasWaveId;
}
- (SInt64) waveId {
  return result.waveId;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) setWaveId:(SInt64) value {
  result.hasWaveId = YES;
  result.waveId = value;
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clearWaveId {
  result.hasWaveId = NO;
  result.waveId = 0L;
  return self;
}
- (PBAppendableArray *)topTextCommentIds {
  return result.topTextCommentIdsArray;
}
- (SInt64)topTextCommentIdsAtIndex:(NSUInteger)index {
  return [result topTextCommentIdsAtIndex:index];
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder *)addTopTextCommentIds:(SInt64)value {
  if (result.topTextCommentIdsArray == nil) {
    result.topTextCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.topTextCommentIdsArray addInt64:value];
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder *)setTopTextCommentIdsArray:(NSArray *)array {
  result.topTextCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder *)setTopTextCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.topTextCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder *)clearTopTextCommentIds {
  result.topTextCommentIdsArray = nil;
  return self;
}
- (BOOL) hasLikeCommentCount {
  return result.hasLikeCommentCount;
}
- (SInt32) likeCommentCount {
  return result.likeCommentCount;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) setLikeCommentCount:(SInt32) value {
  result.hasLikeCommentCount = YES;
  result.likeCommentCount = value;
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clearLikeCommentCount {
  result.hasLikeCommentCount = NO;
  result.likeCommentCount = 0;
  return self;
}
- (BOOL) hasTextCommentCount {
  return result.hasTextCommentCount;
}
- (SInt32) textCommentCount {
  return result.textCommentCount;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) setTextCommentCount:(SInt32) value {
  result.hasTextCommentCount = YES;
  result.textCommentCount = value;
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clearTextCommentCount {
  result.hasTextCommentCount = NO;
  result.textCommentCount = 0;
  return self;
}
- (BOOL) hasYouLikeCommentId {
  return result.hasYouLikeCommentId;
}
- (SInt64) youLikeCommentId {
  return result.youLikeCommentId;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) setYouLikeCommentId:(SInt64) value {
  result.hasYouLikeCommentId = YES;
  result.youLikeCommentId = value;
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clearYouLikeCommentId {
  result.hasYouLikeCommentId = NO;
  result.youLikeCommentId = 0L;
  return self;
}
- (BOOL) hasWave {
  return result.hasWave;
}
- (PBWave*) wave {
  return result.wave;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) setWave:(PBWave*) value {
  result.hasWave = YES;
  result.wave = value;
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) setWaveBuilder:(PBWaveBuilder*) builderForValue {
  return [self setWave:[builderForValue build]];
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) mergeWave:(PBWave*) value {
  if (result.hasWave &&
      result.wave != [PBWave defaultInstance]) {
    result.wave =
      [[[PBWave builderWithPrototype:result.wave] mergeFrom:value] buildPartial];
  } else {
    result.wave = value;
  }
  result.hasWave = YES;
  return self;
}
- (PBFetchWavesAndComentsRespPBWaveAbstractBuilder*) clearWave {
  result.hasWave = NO;
  result.wave = [PBWave defaultInstance];
  return self;
}
@end

@interface PBFetchWavesAndComentsRespBuilder()
@property (strong) PBFetchWavesAndComentsResp* result;
@end

@implementation PBFetchWavesAndComentsRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWavesAndComentsResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWavesAndComentsRespBuilder*) clear {
  self.result = [[PBFetchWavesAndComentsResp alloc] init];
  return self;
}
- (PBFetchWavesAndComentsRespBuilder*) clone {
  return [PBFetchWavesAndComentsResp builderWithPrototype:result];
}
- (PBFetchWavesAndComentsResp*) defaultInstance {
  return [PBFetchWavesAndComentsResp defaultInstance];
}
- (PBFetchWavesAndComentsResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWavesAndComentsResp*) buildPartial {
  PBFetchWavesAndComentsResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWavesAndComentsRespBuilder*) mergeFrom:(PBFetchWavesAndComentsResp*) other {
  if (other == [PBFetchWavesAndComentsResp defaultInstance]) {
    return self;
  }
  if (other.abstractsArray.count > 0) {
    if (result.abstractsArray == nil) {
      result.abstractsArray = [[NSMutableArray alloc] initWithArray:other.abstractsArray];
    } else {
      [result.abstractsArray addObjectsFromArray:other.abstractsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWavesAndComentsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWavesAndComentsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBFetchWavesAndComentsRespPBWaveAbstractBuilder* subBuilder = [PBFetchWavesAndComentsRespPBWaveAbstract builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAbstracts:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)abstracts {
  return result.abstractsArray;
}
- (PBFetchWavesAndComentsRespPBWaveAbstract*)abstractsAtIndex:(NSUInteger)index {
  return [result abstractsAtIndex:index];
}
- (PBFetchWavesAndComentsRespBuilder *)addAbstracts:(PBFetchWavesAndComentsRespPBWaveAbstract*)value {
  if (result.abstractsArray == nil) {
    result.abstractsArray = [[NSMutableArray alloc]init];
  }
  [result.abstractsArray addObject:value];
  return self;
}
- (PBFetchWavesAndComentsRespBuilder *)setAbstractsArray:(NSArray *)array {
  result.abstractsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchWavesAndComentsRespBuilder *)clearAbstracts {
  result.abstractsArray = nil;
  return self;
}
@end

@interface PBSendWaveCommentReq ()
@property (strong) PBWaveComment* comment;
@end

@implementation PBSendWaveCommentReq

- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (id) init {
  if ((self = [super init])) {
    self.comment = [PBWaveComment defaultInstance];
  }
  return self;
}
static PBSendWaveCommentReq* defaultPBSendWaveCommentReqInstance = nil;
+ (void) initialize {
  if (self == [PBSendWaveCommentReq class]) {
    defaultPBSendWaveCommentReqInstance = [[PBSendWaveCommentReq alloc] init];
  }
}
+ (PBSendWaveCommentReq*) defaultInstance {
  return defaultPBSendWaveCommentReqInstance;
}
- (PBSendWaveCommentReq*) defaultInstance {
  return defaultPBSendWaveCommentReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasComment) {
    [output writeMessage:1 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasComment) {
    size_ += computeMessageSize(1, self.comment);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSendWaveCommentReq*) parseFromData:(NSData*) data {
  return (PBSendWaveCommentReq*)[[[PBSendWaveCommentReq builder] mergeFromData:data] build];
}
+ (PBSendWaveCommentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveCommentReq*)[[[PBSendWaveCommentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveCommentReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBSendWaveCommentReq*)[[[PBSendWaveCommentReq builder] mergeFromInputStream:input] build];
}
+ (PBSendWaveCommentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveCommentReq*)[[[PBSendWaveCommentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSendWaveCommentReq*)[[[PBSendWaveCommentReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBSendWaveCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveCommentReq*)[[[PBSendWaveCommentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveCommentReqBuilder*) builder {
  return [[PBSendWaveCommentReqBuilder alloc] init];
}
+ (PBSendWaveCommentReqBuilder*) builderWithPrototype:(PBSendWaveCommentReq*) prototype {
  return [[PBSendWaveCommentReq builder] mergeFrom:prototype];
}
- (PBSendWaveCommentReqBuilder*) builder {
  return [PBSendWaveCommentReq builder];
}
- (PBSendWaveCommentReqBuilder*) toBuilder {
  return [PBSendWaveCommentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasComment) {
    [output appendFormat:@"%@%@ {\n", indent, @"comment"];
    [self.comment writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSendWaveCommentReq class]]) {
    return NO;
  }
  PBSendWaveCommentReq *otherMessage = other;
  return
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSendWaveCommentReqBuilder()
@property (strong) PBSendWaveCommentReq* result;
@end

@implementation PBSendWaveCommentReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSendWaveCommentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSendWaveCommentReqBuilder*) clear {
  self.result = [[PBSendWaveCommentReq alloc] init];
  return self;
}
- (PBSendWaveCommentReqBuilder*) clone {
  return [PBSendWaveCommentReq builderWithPrototype:result];
}
- (PBSendWaveCommentReq*) defaultInstance {
  return [PBSendWaveCommentReq defaultInstance];
}
- (PBSendWaveCommentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSendWaveCommentReq*) buildPartial {
  PBSendWaveCommentReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSendWaveCommentReqBuilder*) mergeFrom:(PBSendWaveCommentReq*) other {
  if (other == [PBSendWaveCommentReq defaultInstance]) {
    return self;
  }
  if (other.hasComment) {
    [self mergeComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSendWaveCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSendWaveCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveCommentBuilder* subBuilder = [PBWaveComment builder];
        if (self.hasComment) {
          [subBuilder mergeFrom:self.comment];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setComment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (PBWaveComment*) comment {
  return result.comment;
}
- (PBSendWaveCommentReqBuilder*) setComment:(PBWaveComment*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (PBSendWaveCommentReqBuilder*) setCommentBuilder:(PBWaveCommentBuilder*) builderForValue {
  return [self setComment:[builderForValue build]];
}
- (PBSendWaveCommentReqBuilder*) mergeComment:(PBWaveComment*) value {
  if (result.hasComment &&
      result.comment != [PBWaveComment defaultInstance]) {
    result.comment =
      [[[PBWaveComment builderWithPrototype:result.comment] mergeFrom:value] buildPartial];
  } else {
    result.comment = value;
  }
  result.hasComment = YES;
  return self;
}
- (PBSendWaveCommentReqBuilder*) clearComment {
  result.hasComment = NO;
  result.comment = [PBWaveComment defaultInstance];
  return self;
}
@end

@interface PBSendWaveCommentResp ()
@property (strong) PBWaveComment* comment;
@end

@implementation PBSendWaveCommentResp

- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (id) init {
  if ((self = [super init])) {
    self.comment = [PBWaveComment defaultInstance];
  }
  return self;
}
static PBSendWaveCommentResp* defaultPBSendWaveCommentRespInstance = nil;
+ (void) initialize {
  if (self == [PBSendWaveCommentResp class]) {
    defaultPBSendWaveCommentRespInstance = [[PBSendWaveCommentResp alloc] init];
  }
}
+ (PBSendWaveCommentResp*) defaultInstance {
  return defaultPBSendWaveCommentRespInstance;
}
- (PBSendWaveCommentResp*) defaultInstance {
  return defaultPBSendWaveCommentRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasComment) {
    [output writeMessage:1 value:self.comment];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasComment) {
    size_ += computeMessageSize(1, self.comment);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSendWaveCommentResp*) parseFromData:(NSData*) data {
  return (PBSendWaveCommentResp*)[[[PBSendWaveCommentResp builder] mergeFromData:data] build];
}
+ (PBSendWaveCommentResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveCommentResp*)[[[PBSendWaveCommentResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveCommentResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBSendWaveCommentResp*)[[[PBSendWaveCommentResp builder] mergeFromInputStream:input] build];
}
+ (PBSendWaveCommentResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveCommentResp*)[[[PBSendWaveCommentResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveCommentResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSendWaveCommentResp*)[[[PBSendWaveCommentResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBSendWaveCommentResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSendWaveCommentResp*)[[[PBSendWaveCommentResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSendWaveCommentRespBuilder*) builder {
  return [[PBSendWaveCommentRespBuilder alloc] init];
}
+ (PBSendWaveCommentRespBuilder*) builderWithPrototype:(PBSendWaveCommentResp*) prototype {
  return [[PBSendWaveCommentResp builder] mergeFrom:prototype];
}
- (PBSendWaveCommentRespBuilder*) builder {
  return [PBSendWaveCommentResp builder];
}
- (PBSendWaveCommentRespBuilder*) toBuilder {
  return [PBSendWaveCommentResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasComment) {
    [output appendFormat:@"%@%@ {\n", indent, @"comment"];
    [self.comment writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSendWaveCommentResp class]]) {
    return NO;
  }
  PBSendWaveCommentResp *otherMessage = other;
  return
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSendWaveCommentRespBuilder()
@property (strong) PBSendWaveCommentResp* result;
@end

@implementation PBSendWaveCommentRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBSendWaveCommentResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBSendWaveCommentRespBuilder*) clear {
  self.result = [[PBSendWaveCommentResp alloc] init];
  return self;
}
- (PBSendWaveCommentRespBuilder*) clone {
  return [PBSendWaveCommentResp builderWithPrototype:result];
}
- (PBSendWaveCommentResp*) defaultInstance {
  return [PBSendWaveCommentResp defaultInstance];
}
- (PBSendWaveCommentResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSendWaveCommentResp*) buildPartial {
  PBSendWaveCommentResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBSendWaveCommentRespBuilder*) mergeFrom:(PBSendWaveCommentResp*) other {
  if (other == [PBSendWaveCommentResp defaultInstance]) {
    return self;
  }
  if (other.hasComment) {
    [self mergeComment:other.comment];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSendWaveCommentRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSendWaveCommentRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveCommentBuilder* subBuilder = [PBWaveComment builder];
        if (self.hasComment) {
          [subBuilder mergeFrom:self.comment];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setComment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (PBWaveComment*) comment {
  return result.comment;
}
- (PBSendWaveCommentRespBuilder*) setComment:(PBWaveComment*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (PBSendWaveCommentRespBuilder*) setCommentBuilder:(PBWaveCommentBuilder*) builderForValue {
  return [self setComment:[builderForValue build]];
}
- (PBSendWaveCommentRespBuilder*) mergeComment:(PBWaveComment*) value {
  if (result.hasComment &&
      result.comment != [PBWaveComment defaultInstance]) {
    result.comment =
      [[[PBWaveComment builderWithPrototype:result.comment] mergeFrom:value] buildPartial];
  } else {
    result.comment = value;
  }
  result.hasComment = YES;
  return self;
}
- (PBSendWaveCommentRespBuilder*) clearComment {
  result.hasComment = NO;
  result.comment = [PBWaveComment defaultInstance];
  return self;
}
@end

@interface PBFetchWaveCommentReq ()
@property (strong) PBAppendableArray * commentIdsArray;
@end

@implementation PBFetchWaveCommentReq

@synthesize commentIdsArray;
@dynamic commentIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchWaveCommentReq* defaultPBFetchWaveCommentReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveCommentReq class]) {
    defaultPBFetchWaveCommentReqInstance = [[PBFetchWaveCommentReq alloc] init];
  }
}
+ (PBFetchWaveCommentReq*) defaultInstance {
  return defaultPBFetchWaveCommentReqInstance;
}
- (PBFetchWaveCommentReq*) defaultInstance {
  return defaultPBFetchWaveCommentReqInstance;
}
- (PBArray *)commentIds {
  return commentIdsArray;
}
- (SInt64)commentIdsAtIndex:(NSUInteger)index {
  return [commentIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger commentIdsArrayCount = self.commentIdsArray.count;
  if (commentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.commentIdsArray.data;
    for (NSUInteger i = 0; i < commentIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.commentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.commentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveCommentReq*) parseFromData:(NSData*) data {
  return (PBFetchWaveCommentReq*)[[[PBFetchWaveCommentReq builder] mergeFromData:data] build];
}
+ (PBFetchWaveCommentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentReq*)[[[PBFetchWaveCommentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveCommentReq*)[[[PBFetchWaveCommentReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveCommentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentReq*)[[[PBFetchWaveCommentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveCommentReq*)[[[PBFetchWaveCommentReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentReq*)[[[PBFetchWaveCommentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentReqBuilder*) builder {
  return [[PBFetchWaveCommentReqBuilder alloc] init];
}
+ (PBFetchWaveCommentReqBuilder*) builderWithPrototype:(PBFetchWaveCommentReq*) prototype {
  return [[PBFetchWaveCommentReq builder] mergeFrom:prototype];
}
- (PBFetchWaveCommentReqBuilder*) builder {
  return [PBFetchWaveCommentReq builder];
}
- (PBFetchWaveCommentReqBuilder*) toBuilder {
  return [PBFetchWaveCommentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.commentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"commentIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveCommentReq class]]) {
    return NO;
  }
  PBFetchWaveCommentReq *otherMessage = other;
  return
      [self.commentIdsArray isEqualToArray:otherMessage.commentIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.commentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveCommentReqBuilder()
@property (strong) PBFetchWaveCommentReq* result;
@end

@implementation PBFetchWaveCommentReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveCommentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveCommentReqBuilder*) clear {
  self.result = [[PBFetchWaveCommentReq alloc] init];
  return self;
}
- (PBFetchWaveCommentReqBuilder*) clone {
  return [PBFetchWaveCommentReq builderWithPrototype:result];
}
- (PBFetchWaveCommentReq*) defaultInstance {
  return [PBFetchWaveCommentReq defaultInstance];
}
- (PBFetchWaveCommentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveCommentReq*) buildPartial {
  PBFetchWaveCommentReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveCommentReqBuilder*) mergeFrom:(PBFetchWaveCommentReq*) other {
  if (other == [PBFetchWaveCommentReq defaultInstance]) {
    return self;
  }
  if (other.commentIdsArray.count > 0) {
    if (result.commentIdsArray == nil) {
      result.commentIdsArray = [other.commentIdsArray copy];
    } else {
      [result.commentIdsArray appendArray:other.commentIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addCommentIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)commentIds {
  return result.commentIdsArray;
}
- (SInt64)commentIdsAtIndex:(NSUInteger)index {
  return [result commentIdsAtIndex:index];
}
- (PBFetchWaveCommentReqBuilder *)addCommentIds:(SInt64)value {
  if (result.commentIdsArray == nil) {
    result.commentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.commentIdsArray addInt64:value];
  return self;
}
- (PBFetchWaveCommentReqBuilder *)setCommentIdsArray:(NSArray *)array {
  result.commentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWaveCommentReqBuilder *)setCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.commentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWaveCommentReqBuilder *)clearCommentIds {
  result.commentIdsArray = nil;
  return self;
}
@end

@interface PBFetchWaveCommentResp ()
@property (strong) NSMutableArray * commentsArray;
@end

@implementation PBFetchWaveCommentResp

@synthesize commentsArray;
@dynamic comments;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchWaveCommentResp* defaultPBFetchWaveCommentRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveCommentResp class]) {
    defaultPBFetchWaveCommentRespInstance = [[PBFetchWaveCommentResp alloc] init];
  }
}
+ (PBFetchWaveCommentResp*) defaultInstance {
  return defaultPBFetchWaveCommentRespInstance;
}
- (PBFetchWaveCommentResp*) defaultInstance {
  return defaultPBFetchWaveCommentRespInstance;
}
- (NSArray *)comments {
  return commentsArray;
}
- (PBWaveComment*)commentsAtIndex:(NSUInteger)index {
  return [commentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveCommentResp*) parseFromData:(NSData*) data {
  return (PBFetchWaveCommentResp*)[[[PBFetchWaveCommentResp builder] mergeFromData:data] build];
}
+ (PBFetchWaveCommentResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentResp*)[[[PBFetchWaveCommentResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveCommentResp*)[[[PBFetchWaveCommentResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveCommentResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentResp*)[[[PBFetchWaveCommentResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveCommentResp*)[[[PBFetchWaveCommentResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveCommentResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentResp*)[[[PBFetchWaveCommentResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentRespBuilder*) builder {
  return [[PBFetchWaveCommentRespBuilder alloc] init];
}
+ (PBFetchWaveCommentRespBuilder*) builderWithPrototype:(PBFetchWaveCommentResp*) prototype {
  return [[PBFetchWaveCommentResp builder] mergeFrom:prototype];
}
- (PBFetchWaveCommentRespBuilder*) builder {
  return [PBFetchWaveCommentResp builder];
}
- (PBFetchWaveCommentRespBuilder*) toBuilder {
  return [PBFetchWaveCommentResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"comments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveCommentResp class]]) {
    return NO;
  }
  PBFetchWaveCommentResp *otherMessage = other;
  return
      [self.commentsArray isEqualToArray:otherMessage.commentsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveCommentRespBuilder()
@property (strong) PBFetchWaveCommentResp* result;
@end

@implementation PBFetchWaveCommentRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveCommentResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveCommentRespBuilder*) clear {
  self.result = [[PBFetchWaveCommentResp alloc] init];
  return self;
}
- (PBFetchWaveCommentRespBuilder*) clone {
  return [PBFetchWaveCommentResp builderWithPrototype:result];
}
- (PBFetchWaveCommentResp*) defaultInstance {
  return [PBFetchWaveCommentResp defaultInstance];
}
- (PBFetchWaveCommentResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveCommentResp*) buildPartial {
  PBFetchWaveCommentResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveCommentRespBuilder*) mergeFrom:(PBFetchWaveCommentResp*) other {
  if (other == [PBFetchWaveCommentResp defaultInstance]) {
    return self;
  }
  if (other.commentsArray.count > 0) {
    if (result.commentsArray == nil) {
      result.commentsArray = [[NSMutableArray alloc] initWithArray:other.commentsArray];
    } else {
      [result.commentsArray addObjectsFromArray:other.commentsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveCommentRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveCommentRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveCommentBuilder* subBuilder = [PBWaveComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComments:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)comments {
  return result.commentsArray;
}
- (PBWaveComment*)commentsAtIndex:(NSUInteger)index {
  return [result commentsAtIndex:index];
}
- (PBFetchWaveCommentRespBuilder *)addComments:(PBWaveComment*)value {
  if (result.commentsArray == nil) {
    result.commentsArray = [[NSMutableArray alloc]init];
  }
  [result.commentsArray addObject:value];
  return self;
}
- (PBFetchWaveCommentRespBuilder *)setCommentsArray:(NSArray *)array {
  result.commentsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchWaveCommentRespBuilder *)clearComments {
  result.commentsArray = nil;
  return self;
}
@end

@interface PBDeleteWaveReq ()
@property (strong) PBAppendableArray * waveIdsArray;
@end

@implementation PBDeleteWaveReq

@synthesize waveIdsArray;
@dynamic waveIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBDeleteWaveReq* defaultPBDeleteWaveReqInstance = nil;
+ (void) initialize {
  if (self == [PBDeleteWaveReq class]) {
    defaultPBDeleteWaveReqInstance = [[PBDeleteWaveReq alloc] init];
  }
}
+ (PBDeleteWaveReq*) defaultInstance {
  return defaultPBDeleteWaveReqInstance;
}
- (PBDeleteWaveReq*) defaultInstance {
  return defaultPBDeleteWaveReqInstance;
}
- (PBArray *)waveIds {
  return waveIdsArray;
}
- (SInt64)waveIdsAtIndex:(NSUInteger)index {
  return [waveIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger waveIdsArrayCount = self.waveIdsArray.count;
  if (waveIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.waveIdsArray.data;
    for (NSUInteger i = 0; i < waveIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.waveIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.waveIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDeleteWaveReq*) parseFromData:(NSData*) data {
  return (PBDeleteWaveReq*)[[[PBDeleteWaveReq builder] mergeFromData:data] build];
}
+ (PBDeleteWaveReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveReq*)[[[PBDeleteWaveReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBDeleteWaveReq*)[[[PBDeleteWaveReq builder] mergeFromInputStream:input] build];
}
+ (PBDeleteWaveReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveReq*)[[[PBDeleteWaveReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDeleteWaveReq*)[[[PBDeleteWaveReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBDeleteWaveReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveReq*)[[[PBDeleteWaveReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveReqBuilder*) builder {
  return [[PBDeleteWaveReqBuilder alloc] init];
}
+ (PBDeleteWaveReqBuilder*) builderWithPrototype:(PBDeleteWaveReq*) prototype {
  return [[PBDeleteWaveReq builder] mergeFrom:prototype];
}
- (PBDeleteWaveReqBuilder*) builder {
  return [PBDeleteWaveReq builder];
}
- (PBDeleteWaveReqBuilder*) toBuilder {
  return [PBDeleteWaveReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.waveIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDeleteWaveReq class]]) {
    return NO;
  }
  PBDeleteWaveReq *otherMessage = other;
  return
      [self.waveIdsArray isEqualToArray:otherMessage.waveIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.waveIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDeleteWaveReqBuilder()
@property (strong) PBDeleteWaveReq* result;
@end

@implementation PBDeleteWaveReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBDeleteWaveReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDeleteWaveReqBuilder*) clear {
  self.result = [[PBDeleteWaveReq alloc] init];
  return self;
}
- (PBDeleteWaveReqBuilder*) clone {
  return [PBDeleteWaveReq builderWithPrototype:result];
}
- (PBDeleteWaveReq*) defaultInstance {
  return [PBDeleteWaveReq defaultInstance];
}
- (PBDeleteWaveReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDeleteWaveReq*) buildPartial {
  PBDeleteWaveReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBDeleteWaveReqBuilder*) mergeFrom:(PBDeleteWaveReq*) other {
  if (other == [PBDeleteWaveReq defaultInstance]) {
    return self;
  }
  if (other.waveIdsArray.count > 0) {
    if (result.waveIdsArray == nil) {
      result.waveIdsArray = [other.waveIdsArray copy];
    } else {
      [result.waveIdsArray appendArray:other.waveIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDeleteWaveReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDeleteWaveReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addWaveIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)waveIds {
  return result.waveIdsArray;
}
- (SInt64)waveIdsAtIndex:(NSUInteger)index {
  return [result waveIdsAtIndex:index];
}
- (PBDeleteWaveReqBuilder *)addWaveIds:(SInt64)value {
  if (result.waveIdsArray == nil) {
    result.waveIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.waveIdsArray addInt64:value];
  return self;
}
- (PBDeleteWaveReqBuilder *)setWaveIdsArray:(NSArray *)array {
  result.waveIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveReqBuilder *)setWaveIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.waveIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveReqBuilder *)clearWaveIds {
  result.waveIdsArray = nil;
  return self;
}
@end

@interface PBDeleteWaveResp ()
@property (strong) PBAppendableArray * deletedWaveIdsArray;
@end

@implementation PBDeleteWaveResp

@synthesize deletedWaveIdsArray;
@dynamic deletedWaveIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBDeleteWaveResp* defaultPBDeleteWaveRespInstance = nil;
+ (void) initialize {
  if (self == [PBDeleteWaveResp class]) {
    defaultPBDeleteWaveRespInstance = [[PBDeleteWaveResp alloc] init];
  }
}
+ (PBDeleteWaveResp*) defaultInstance {
  return defaultPBDeleteWaveRespInstance;
}
- (PBDeleteWaveResp*) defaultInstance {
  return defaultPBDeleteWaveRespInstance;
}
- (PBArray *)deletedWaveIds {
  return deletedWaveIdsArray;
}
- (SInt64)deletedWaveIdsAtIndex:(NSUInteger)index {
  return [deletedWaveIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger deletedWaveIdsArrayCount = self.deletedWaveIdsArray.count;
  if (deletedWaveIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.deletedWaveIdsArray.data;
    for (NSUInteger i = 0; i < deletedWaveIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.deletedWaveIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.deletedWaveIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDeleteWaveResp*) parseFromData:(NSData*) data {
  return (PBDeleteWaveResp*)[[[PBDeleteWaveResp builder] mergeFromData:data] build];
}
+ (PBDeleteWaveResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveResp*)[[[PBDeleteWaveResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBDeleteWaveResp*)[[[PBDeleteWaveResp builder] mergeFromInputStream:input] build];
}
+ (PBDeleteWaveResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveResp*)[[[PBDeleteWaveResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDeleteWaveResp*)[[[PBDeleteWaveResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBDeleteWaveResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveResp*)[[[PBDeleteWaveResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveRespBuilder*) builder {
  return [[PBDeleteWaveRespBuilder alloc] init];
}
+ (PBDeleteWaveRespBuilder*) builderWithPrototype:(PBDeleteWaveResp*) prototype {
  return [[PBDeleteWaveResp builder] mergeFrom:prototype];
}
- (PBDeleteWaveRespBuilder*) builder {
  return [PBDeleteWaveResp builder];
}
- (PBDeleteWaveRespBuilder*) toBuilder {
  return [PBDeleteWaveResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.deletedWaveIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deletedWaveIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDeleteWaveResp class]]) {
    return NO;
  }
  PBDeleteWaveResp *otherMessage = other;
  return
      [self.deletedWaveIdsArray isEqualToArray:otherMessage.deletedWaveIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.deletedWaveIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDeleteWaveRespBuilder()
@property (strong) PBDeleteWaveResp* result;
@end

@implementation PBDeleteWaveRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBDeleteWaveResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDeleteWaveRespBuilder*) clear {
  self.result = [[PBDeleteWaveResp alloc] init];
  return self;
}
- (PBDeleteWaveRespBuilder*) clone {
  return [PBDeleteWaveResp builderWithPrototype:result];
}
- (PBDeleteWaveResp*) defaultInstance {
  return [PBDeleteWaveResp defaultInstance];
}
- (PBDeleteWaveResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDeleteWaveResp*) buildPartial {
  PBDeleteWaveResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBDeleteWaveRespBuilder*) mergeFrom:(PBDeleteWaveResp*) other {
  if (other == [PBDeleteWaveResp defaultInstance]) {
    return self;
  }
  if (other.deletedWaveIdsArray.count > 0) {
    if (result.deletedWaveIdsArray == nil) {
      result.deletedWaveIdsArray = [other.deletedWaveIdsArray copy];
    } else {
      [result.deletedWaveIdsArray appendArray:other.deletedWaveIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDeleteWaveRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDeleteWaveRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addDeletedWaveIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)deletedWaveIds {
  return result.deletedWaveIdsArray;
}
- (SInt64)deletedWaveIdsAtIndex:(NSUInteger)index {
  return [result deletedWaveIdsAtIndex:index];
}
- (PBDeleteWaveRespBuilder *)addDeletedWaveIds:(SInt64)value {
  if (result.deletedWaveIdsArray == nil) {
    result.deletedWaveIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.deletedWaveIdsArray addInt64:value];
  return self;
}
- (PBDeleteWaveRespBuilder *)setDeletedWaveIdsArray:(NSArray *)array {
  result.deletedWaveIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveRespBuilder *)setDeletedWaveIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.deletedWaveIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveRespBuilder *)clearDeletedWaveIds {
  result.deletedWaveIdsArray = nil;
  return self;
}
@end

@interface PBFetchWaveIdsReq ()
@property SInt32 page;
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property SInt64 beforeWaveId;
@property BOOL withBody;
@property SInt64 systemSenderId;
@end

@implementation PBFetchWaveIdsReq

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
- (BOOL) hasBeforeWaveId {
  return !!hasBeforeWaveId_;
}
- (void) setHasBeforeWaveId:(BOOL) value_ {
  hasBeforeWaveId_ = !!value_;
}
@synthesize beforeWaveId;
- (BOOL) hasWithBody {
  return !!hasWithBody_;
}
- (void) setHasWithBody:(BOOL) value_ {
  hasWithBody_ = !!value_;
}
- (BOOL) withBody {
  return !!withBody_;
}
- (void) setWithBody:(BOOL) value_ {
  withBody_ = !!value_;
}
- (BOOL) hasSystemSenderId {
  return !!hasSystemSenderId_;
}
- (void) setHasSystemSenderId:(BOOL) value_ {
  hasSystemSenderId_ = !!value_;
}
@synthesize systemSenderId;
- (id) init {
  if ((self = [super init])) {
    self.page = 0;
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.beforeWaveId = 0L;
    self.withBody = NO;
    self.systemSenderId = 0L;
  }
  return self;
}
static PBFetchWaveIdsReq* defaultPBFetchWaveIdsReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveIdsReq class]) {
    defaultPBFetchWaveIdsReqInstance = [[PBFetchWaveIdsReq alloc] init];
  }
}
+ (PBFetchWaveIdsReq*) defaultInstance {
  return defaultPBFetchWaveIdsReqInstance;
}
- (PBFetchWaveIdsReq*) defaultInstance {
  return defaultPBFetchWaveIdsReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeSInt32:1 value:self.page];
  }
  if (self.hasSenderPassportId) {
    [output writeSInt64:2 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:3 value:self.systemSender];
  }
  if (self.hasBeforeWaveId) {
    [output writeSInt64:4 value:self.beforeWaveId];
  }
  if (self.hasWithBody) {
    [output writeBool:5 value:self.withBody];
  }
  if (self.hasSystemSenderId) {
    [output writeSInt64:6 value:self.systemSenderId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeSInt32Size(1, self.page);
  }
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(2, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(3, self.systemSender);
  }
  if (self.hasBeforeWaveId) {
    size_ += computeSInt64Size(4, self.beforeWaveId);
  }
  if (self.hasWithBody) {
    size_ += computeBoolSize(5, self.withBody);
  }
  if (self.hasSystemSenderId) {
    size_ += computeSInt64Size(6, self.systemSenderId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveIdsReq*) parseFromData:(NSData*) data {
  return (PBFetchWaveIdsReq*)[[[PBFetchWaveIdsReq builder] mergeFromData:data] build];
}
+ (PBFetchWaveIdsReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsReq*)[[[PBFetchWaveIdsReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveIdsReq*)[[[PBFetchWaveIdsReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveIdsReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsReq*)[[[PBFetchWaveIdsReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveIdsReq*)[[[PBFetchWaveIdsReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveIdsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsReq*)[[[PBFetchWaveIdsReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsReqBuilder*) builder {
  return [[PBFetchWaveIdsReqBuilder alloc] init];
}
+ (PBFetchWaveIdsReqBuilder*) builderWithPrototype:(PBFetchWaveIdsReq*) prototype {
  return [[PBFetchWaveIdsReq builder] mergeFrom:prototype];
}
- (PBFetchWaveIdsReqBuilder*) builder {
  return [PBFetchWaveIdsReq builder];
}
- (PBFetchWaveIdsReqBuilder*) toBuilder {
  return [PBFetchWaveIdsReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBeforeWaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beforeWaveId", [NSNumber numberWithLongLong:self.beforeWaveId]];
  }
  if (self.hasWithBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"withBody", [NSNumber numberWithBool:self.withBody]];
  }
  if (self.hasSystemSenderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"systemSenderId", [NSNumber numberWithLongLong:self.systemSenderId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveIdsReq class]]) {
    return NO;
  }
  PBFetchWaveIdsReq *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      self.hasBeforeWaveId == otherMessage.hasBeforeWaveId &&
      (!self.hasBeforeWaveId || self.beforeWaveId == otherMessage.beforeWaveId) &&
      self.hasWithBody == otherMessage.hasWithBody &&
      (!self.hasWithBody || self.withBody == otherMessage.withBody) &&
      self.hasSystemSenderId == otherMessage.hasSystemSenderId &&
      (!self.hasSystemSenderId || self.systemSenderId == otherMessage.systemSenderId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  if (self.hasBeforeWaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.beforeWaveId] hash];
  }
  if (self.hasWithBody) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.withBody] hash];
  }
  if (self.hasSystemSenderId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.systemSenderId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveIdsReqBuilder()
@property (strong) PBFetchWaveIdsReq* result;
@end

@implementation PBFetchWaveIdsReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveIdsReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveIdsReqBuilder*) clear {
  self.result = [[PBFetchWaveIdsReq alloc] init];
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clone {
  return [PBFetchWaveIdsReq builderWithPrototype:result];
}
- (PBFetchWaveIdsReq*) defaultInstance {
  return [PBFetchWaveIdsReq defaultInstance];
}
- (PBFetchWaveIdsReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveIdsReq*) buildPartial {
  PBFetchWaveIdsReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveIdsReqBuilder*) mergeFrom:(PBFetchWaveIdsReq*) other {
  if (other == [PBFetchWaveIdsReq defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.hasBeforeWaveId) {
    [self setBeforeWaveId:other.beforeWaveId];
  }
  if (other.hasWithBody) {
    [self setWithBody:other.withBody];
  }
  if (other.hasSystemSenderId) {
    [self setSystemSenderId:other.systemSenderId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveIdsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveIdsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readSInt32]];
        break;
      }
      case 16: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 26: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setBeforeWaveId:[input readSInt64]];
        break;
      }
      case 40: {
        [self setWithBody:[input readBool]];
        break;
      }
      case 48: {
        [self setSystemSenderId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt32) page {
  return result.page;
}
- (PBFetchWaveIdsReqBuilder*) setPage:(SInt32) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBFetchWaveIdsReqBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBFetchWaveIdsReqBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBFetchWaveIdsReqBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (BOOL) hasBeforeWaveId {
  return result.hasBeforeWaveId;
}
- (SInt64) beforeWaveId {
  return result.beforeWaveId;
}
- (PBFetchWaveIdsReqBuilder*) setBeforeWaveId:(SInt64) value {
  result.hasBeforeWaveId = YES;
  result.beforeWaveId = value;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clearBeforeWaveId {
  result.hasBeforeWaveId = NO;
  result.beforeWaveId = 0L;
  return self;
}
- (BOOL) hasWithBody {
  return result.hasWithBody;
}
- (BOOL) withBody {
  return result.withBody;
}
- (PBFetchWaveIdsReqBuilder*) setWithBody:(BOOL) value {
  result.hasWithBody = YES;
  result.withBody = value;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clearWithBody {
  result.hasWithBody = NO;
  result.withBody = NO;
  return self;
}
- (BOOL) hasSystemSenderId {
  return result.hasSystemSenderId;
}
- (SInt64) systemSenderId {
  return result.systemSenderId;
}
- (PBFetchWaveIdsReqBuilder*) setSystemSenderId:(SInt64) value {
  result.hasSystemSenderId = YES;
  result.systemSenderId = value;
  return self;
}
- (PBFetchWaveIdsReqBuilder*) clearSystemSenderId {
  result.hasSystemSenderId = NO;
  result.systemSenderId = 0L;
  return self;
}
@end

@interface PBFetchWaveIdsResp ()
@property SInt32 page;
@property SInt64 senderPassportId;
@property (strong) PBSystemSender* systemSender;
@property (strong) NSMutableArray * abstractsArray;
@property (strong) PBAppendableArray * myCommentIdsArray;
@property BOOL hasMore;
@property SInt32 totalCount;
@property SInt32 totalPage;
@property (strong) NSMutableArray * redPacketsArray;
@end

@implementation PBFetchWaveIdsResp

- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasSenderPassportId {
  return !!hasSenderPassportId_;
}
- (void) setHasSenderPassportId:(BOOL) value_ {
  hasSenderPassportId_ = !!value_;
}
@synthesize senderPassportId;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
@synthesize abstractsArray;
@dynamic abstracts;
@synthesize myCommentIdsArray;
@dynamic myCommentIds;
- (BOOL) hasHasMore {
  return !!hasHasMore_;
}
- (void) setHasHasMore:(BOOL) value_ {
  hasHasMore_ = !!value_;
}
- (BOOL) hasMore {
  return !!hasMore_;
}
- (void) setHasMore:(BOOL) value_ {
  hasMore_ = !!value_;
}
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) value_ {
  hasTotalCount_ = !!value_;
}
@synthesize totalCount;
- (BOOL) hasTotalPage {
  return !!hasTotalPage_;
}
- (void) setHasTotalPage:(BOOL) value_ {
  hasTotalPage_ = !!value_;
}
@synthesize totalPage;
@synthesize redPacketsArray;
@dynamic redPackets;
- (id) init {
  if ((self = [super init])) {
    self.page = 0;
    self.senderPassportId = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.hasMore = YES;
    self.totalCount = 0;
    self.totalPage = 0;
  }
  return self;
}
static PBFetchWaveIdsResp* defaultPBFetchWaveIdsRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveIdsResp class]) {
    defaultPBFetchWaveIdsRespInstance = [[PBFetchWaveIdsResp alloc] init];
  }
}
+ (PBFetchWaveIdsResp*) defaultInstance {
  return defaultPBFetchWaveIdsRespInstance;
}
- (PBFetchWaveIdsResp*) defaultInstance {
  return defaultPBFetchWaveIdsRespInstance;
}
- (NSArray *)abstracts {
  return abstractsArray;
}
- (PBFetchWaveIdsRespPBWaveAbstract*)abstractsAtIndex:(NSUInteger)index {
  return [abstractsArray objectAtIndex:index];
}
- (PBArray *)myCommentIds {
  return myCommentIdsArray;
}
- (SInt64)myCommentIdsAtIndex:(NSUInteger)index {
  return [myCommentIdsArray int64AtIndex:index];
}
- (NSArray *)redPackets {
  return redPacketsArray;
}
- (PBRedPacket*)redPacketsAtIndex:(NSUInteger)index {
  return [redPacketsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPage) {
    [output writeSInt32:1 value:self.page];
  }
  if (self.hasSenderPassportId) {
    [output writeSInt64:2 value:self.senderPassportId];
  }
  if (self.hasSystemSender) {
    [output writeMessage:3 value:self.systemSender];
  }
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWaveIdsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  const NSUInteger myCommentIdsArrayCount = self.myCommentIdsArray.count;
  if (myCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.myCommentIdsArray.data;
    for (NSUInteger i = 0; i < myCommentIdsArrayCount; ++i) {
      [output writeSInt64:5 value:values[i]];
    }
  }
  if (self.hasHasMore) {
    [output writeBool:6 value:self.hasMore];
  }
  if (self.hasTotalCount) {
    [output writeSInt32:7 value:self.totalCount];
  }
  if (self.hasTotalPage) {
    [output writeSInt32:8 value:self.totalPage];
  }
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPage) {
    size_ += computeSInt32Size(1, self.page);
  }
  if (self.hasSenderPassportId) {
    size_ += computeSInt64Size(2, self.senderPassportId);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(3, self.systemSender);
  }
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWaveIdsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.myCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.myCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(6, self.hasMore);
  }
  if (self.hasTotalCount) {
    size_ += computeSInt32Size(7, self.totalCount);
  }
  if (self.hasTotalPage) {
    size_ += computeSInt32Size(8, self.totalPage);
  }
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveIdsResp*) parseFromData:(NSData*) data {
  return (PBFetchWaveIdsResp*)[[[PBFetchWaveIdsResp builder] mergeFromData:data] build];
}
+ (PBFetchWaveIdsResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsResp*)[[[PBFetchWaveIdsResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveIdsResp*)[[[PBFetchWaveIdsResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveIdsResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsResp*)[[[PBFetchWaveIdsResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveIdsResp*)[[[PBFetchWaveIdsResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveIdsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsResp*)[[[PBFetchWaveIdsResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsRespBuilder*) builder {
  return [[PBFetchWaveIdsRespBuilder alloc] init];
}
+ (PBFetchWaveIdsRespBuilder*) builderWithPrototype:(PBFetchWaveIdsResp*) prototype {
  return [[PBFetchWaveIdsResp builder] mergeFrom:prototype];
}
- (PBFetchWaveIdsRespBuilder*) builder {
  return [PBFetchWaveIdsResp builder];
}
- (PBFetchWaveIdsRespBuilder*) toBuilder {
  return [PBFetchWaveIdsResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasSenderPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"senderPassportId", [NSNumber numberWithLongLong:self.senderPassportId]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWaveIdsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"abstracts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.myCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myCommentIds", obj];
  }];
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithInteger:self.totalCount]];
  }
  if (self.hasTotalPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPage", [NSNumber numberWithInteger:self.totalPage]];
  }
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"redPackets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveIdsResp class]]) {
    return NO;
  }
  PBFetchWaveIdsResp *otherMessage = other;
  return
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasSenderPassportId == otherMessage.hasSenderPassportId &&
      (!self.hasSenderPassportId || self.senderPassportId == otherMessage.senderPassportId) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      [self.abstractsArray isEqualToArray:otherMessage.abstractsArray] &&
      [self.myCommentIdsArray isEqualToArray:otherMessage.myCommentIdsArray] &&
      self.hasHasMore == otherMessage.hasHasMore &&
      (!self.hasHasMore || self.hasMore == otherMessage.hasMore) &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || self.totalCount == otherMessage.totalCount) &&
      self.hasTotalPage == otherMessage.hasTotalPage &&
      (!self.hasTotalPage || self.totalPage == otherMessage.totalPage) &&
      [self.redPacketsArray isEqualToArray:otherMessage.redPacketsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasSenderPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.senderPassportId] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  [self.abstractsArray enumerateObjectsUsingBlock:^(PBFetchWaveIdsRespPBWaveAbstract *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.myCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasHasMore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMore] hash];
  }
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalCount] hash];
  }
  if (self.hasTotalPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalPage] hash];
  }
  [self.redPacketsArray enumerateObjectsUsingBlock:^(PBRedPacket *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveIdsRespPBWaveAbstract ()
@property SInt64 waveId;
@property (strong) PBAppendableArray * topTextCommentIdsArray;
@property SInt32 likeCommentCount;
@property SInt32 textCommentCount;
@property SInt64 youLikeCommentId;
@property (strong) PBWave* wave;
@end

@implementation PBFetchWaveIdsRespPBWaveAbstract

- (BOOL) hasWaveId {
  return !!hasWaveId_;
}
- (void) setHasWaveId:(BOOL) value_ {
  hasWaveId_ = !!value_;
}
@synthesize waveId;
@synthesize topTextCommentIdsArray;
@dynamic topTextCommentIds;
- (BOOL) hasLikeCommentCount {
  return !!hasLikeCommentCount_;
}
- (void) setHasLikeCommentCount:(BOOL) value_ {
  hasLikeCommentCount_ = !!value_;
}
@synthesize likeCommentCount;
- (BOOL) hasTextCommentCount {
  return !!hasTextCommentCount_;
}
- (void) setHasTextCommentCount:(BOOL) value_ {
  hasTextCommentCount_ = !!value_;
}
@synthesize textCommentCount;
- (BOOL) hasYouLikeCommentId {
  return !!hasYouLikeCommentId_;
}
- (void) setHasYouLikeCommentId:(BOOL) value_ {
  hasYouLikeCommentId_ = !!value_;
}
@synthesize youLikeCommentId;
- (BOOL) hasWave {
  return !!hasWave_;
}
- (void) setHasWave:(BOOL) value_ {
  hasWave_ = !!value_;
}
@synthesize wave;
- (id) init {
  if ((self = [super init])) {
    self.waveId = 0L;
    self.likeCommentCount = 0;
    self.textCommentCount = 0;
    self.youLikeCommentId = 0L;
    self.wave = [PBWave defaultInstance];
  }
  return self;
}
static PBFetchWaveIdsRespPBWaveAbstract* defaultPBFetchWaveIdsRespPBWaveAbstractInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveIdsRespPBWaveAbstract class]) {
    defaultPBFetchWaveIdsRespPBWaveAbstractInstance = [[PBFetchWaveIdsRespPBWaveAbstract alloc] init];
  }
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) defaultInstance {
  return defaultPBFetchWaveIdsRespPBWaveAbstractInstance;
}
- (PBFetchWaveIdsRespPBWaveAbstract*) defaultInstance {
  return defaultPBFetchWaveIdsRespPBWaveAbstractInstance;
}
- (PBArray *)topTextCommentIds {
  return topTextCommentIdsArray;
}
- (SInt64)topTextCommentIdsAtIndex:(NSUInteger)index {
  return [topTextCommentIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWaveId) {
    [output writeSInt64:1 value:self.waveId];
  }
  const NSUInteger topTextCommentIdsArrayCount = self.topTextCommentIdsArray.count;
  if (topTextCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.topTextCommentIdsArray.data;
    for (NSUInteger i = 0; i < topTextCommentIdsArrayCount; ++i) {
      [output writeSInt64:2 value:values[i]];
    }
  }
  if (self.hasLikeCommentCount) {
    [output writeSInt32:3 value:self.likeCommentCount];
  }
  if (self.hasTextCommentCount) {
    [output writeSInt32:4 value:self.textCommentCount];
  }
  if (self.hasYouLikeCommentId) {
    [output writeSInt64:5 value:self.youLikeCommentId];
  }
  if (self.hasWave) {
    [output writeMessage:6 value:self.wave];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWaveId) {
    size_ += computeSInt64Size(1, self.waveId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.topTextCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.topTextCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasLikeCommentCount) {
    size_ += computeSInt32Size(3, self.likeCommentCount);
  }
  if (self.hasTextCommentCount) {
    size_ += computeSInt32Size(4, self.textCommentCount);
  }
  if (self.hasYouLikeCommentId) {
    size_ += computeSInt64Size(5, self.youLikeCommentId);
  }
  if (self.hasWave) {
    size_ += computeMessageSize(6, self.wave);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) parseFromData:(NSData*) data {
  return (PBFetchWaveIdsRespPBWaveAbstract*)[[[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFromData:data] build];
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsRespPBWaveAbstract*)[[[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveIdsRespPBWaveAbstract*)[[[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsRespPBWaveAbstract*)[[[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveIdsRespPBWaveAbstract*)[[[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveIdsRespPBWaveAbstract*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveIdsRespPBWaveAbstract*)[[[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveIdsRespPBWaveAbstractBuilder*) builder {
  return [[PBFetchWaveIdsRespPBWaveAbstractBuilder alloc] init];
}
+ (PBFetchWaveIdsRespPBWaveAbstractBuilder*) builderWithPrototype:(PBFetchWaveIdsRespPBWaveAbstract*) prototype {
  return [[PBFetchWaveIdsRespPBWaveAbstract builder] mergeFrom:prototype];
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) builder {
  return [PBFetchWaveIdsRespPBWaveAbstract builder];
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) toBuilder {
  return [PBFetchWaveIdsRespPBWaveAbstract builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveId", [NSNumber numberWithLongLong:self.waveId]];
  }
  [self.topTextCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"topTextCommentIds", obj];
  }];
  if (self.hasLikeCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"likeCommentCount", [NSNumber numberWithInteger:self.likeCommentCount]];
  }
  if (self.hasTextCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textCommentCount", [NSNumber numberWithInteger:self.textCommentCount]];
  }
  if (self.hasYouLikeCommentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"youLikeCommentId", [NSNumber numberWithLongLong:self.youLikeCommentId]];
  }
  if (self.hasWave) {
    [output appendFormat:@"%@%@ {\n", indent, @"wave"];
    [self.wave writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveIdsRespPBWaveAbstract class]]) {
    return NO;
  }
  PBFetchWaveIdsRespPBWaveAbstract *otherMessage = other;
  return
      self.hasWaveId == otherMessage.hasWaveId &&
      (!self.hasWaveId || self.waveId == otherMessage.waveId) &&
      [self.topTextCommentIdsArray isEqualToArray:otherMessage.topTextCommentIdsArray] &&
      self.hasLikeCommentCount == otherMessage.hasLikeCommentCount &&
      (!self.hasLikeCommentCount || self.likeCommentCount == otherMessage.likeCommentCount) &&
      self.hasTextCommentCount == otherMessage.hasTextCommentCount &&
      (!self.hasTextCommentCount || self.textCommentCount == otherMessage.textCommentCount) &&
      self.hasYouLikeCommentId == otherMessage.hasYouLikeCommentId &&
      (!self.hasYouLikeCommentId || self.youLikeCommentId == otherMessage.youLikeCommentId) &&
      self.hasWave == otherMessage.hasWave &&
      (!self.hasWave || [self.wave isEqual:otherMessage.wave]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.waveId] hash];
  }
  [self.topTextCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasLikeCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.likeCommentCount] hash];
  }
  if (self.hasTextCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.textCommentCount] hash];
  }
  if (self.hasYouLikeCommentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.youLikeCommentId] hash];
  }
  if (self.hasWave) {
    hashCode = hashCode * 31 + [self.wave hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveIdsRespPBWaveAbstractBuilder()
@property (strong) PBFetchWaveIdsRespPBWaveAbstract* result;
@end

@implementation PBFetchWaveIdsRespPBWaveAbstractBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveIdsRespPBWaveAbstract alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clear {
  self.result = [[PBFetchWaveIdsRespPBWaveAbstract alloc] init];
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clone {
  return [PBFetchWaveIdsRespPBWaveAbstract builderWithPrototype:result];
}
- (PBFetchWaveIdsRespPBWaveAbstract*) defaultInstance {
  return [PBFetchWaveIdsRespPBWaveAbstract defaultInstance];
}
- (PBFetchWaveIdsRespPBWaveAbstract*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveIdsRespPBWaveAbstract*) buildPartial {
  PBFetchWaveIdsRespPBWaveAbstract* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) mergeFrom:(PBFetchWaveIdsRespPBWaveAbstract*) other {
  if (other == [PBFetchWaveIdsRespPBWaveAbstract defaultInstance]) {
    return self;
  }
  if (other.hasWaveId) {
    [self setWaveId:other.waveId];
  }
  if (other.topTextCommentIdsArray.count > 0) {
    if (result.topTextCommentIdsArray == nil) {
      result.topTextCommentIdsArray = [other.topTextCommentIdsArray copy];
    } else {
      [result.topTextCommentIdsArray appendArray:other.topTextCommentIdsArray];
    }
  }
  if (other.hasLikeCommentCount) {
    [self setLikeCommentCount:other.likeCommentCount];
  }
  if (other.hasTextCommentCount) {
    [self setTextCommentCount:other.textCommentCount];
  }
  if (other.hasYouLikeCommentId) {
    [self setYouLikeCommentId:other.youLikeCommentId];
  }
  if (other.hasWave) {
    [self mergeWave:other.wave];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWaveId:[input readSInt64]];
        break;
      }
      case 16: {
        [self addTopTextCommentIds:[input readSInt64]];
        break;
      }
      case 24: {
        [self setLikeCommentCount:[input readSInt32]];
        break;
      }
      case 32: {
        [self setTextCommentCount:[input readSInt32]];
        break;
      }
      case 40: {
        [self setYouLikeCommentId:[input readSInt64]];
        break;
      }
      case 50: {
        PBWaveBuilder* subBuilder = [PBWave builder];
        if (self.hasWave) {
          [subBuilder mergeFrom:self.wave];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWave:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWaveId {
  return result.hasWaveId;
}
- (SInt64) waveId {
  return result.waveId;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) setWaveId:(SInt64) value {
  result.hasWaveId = YES;
  result.waveId = value;
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clearWaveId {
  result.hasWaveId = NO;
  result.waveId = 0L;
  return self;
}
- (PBAppendableArray *)topTextCommentIds {
  return result.topTextCommentIdsArray;
}
- (SInt64)topTextCommentIdsAtIndex:(NSUInteger)index {
  return [result topTextCommentIdsAtIndex:index];
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder *)addTopTextCommentIds:(SInt64)value {
  if (result.topTextCommentIdsArray == nil) {
    result.topTextCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.topTextCommentIdsArray addInt64:value];
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder *)setTopTextCommentIdsArray:(NSArray *)array {
  result.topTextCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder *)setTopTextCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.topTextCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder *)clearTopTextCommentIds {
  result.topTextCommentIdsArray = nil;
  return self;
}
- (BOOL) hasLikeCommentCount {
  return result.hasLikeCommentCount;
}
- (SInt32) likeCommentCount {
  return result.likeCommentCount;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) setLikeCommentCount:(SInt32) value {
  result.hasLikeCommentCount = YES;
  result.likeCommentCount = value;
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clearLikeCommentCount {
  result.hasLikeCommentCount = NO;
  result.likeCommentCount = 0;
  return self;
}
- (BOOL) hasTextCommentCount {
  return result.hasTextCommentCount;
}
- (SInt32) textCommentCount {
  return result.textCommentCount;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) setTextCommentCount:(SInt32) value {
  result.hasTextCommentCount = YES;
  result.textCommentCount = value;
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clearTextCommentCount {
  result.hasTextCommentCount = NO;
  result.textCommentCount = 0;
  return self;
}
- (BOOL) hasYouLikeCommentId {
  return result.hasYouLikeCommentId;
}
- (SInt64) youLikeCommentId {
  return result.youLikeCommentId;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) setYouLikeCommentId:(SInt64) value {
  result.hasYouLikeCommentId = YES;
  result.youLikeCommentId = value;
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clearYouLikeCommentId {
  result.hasYouLikeCommentId = NO;
  result.youLikeCommentId = 0L;
  return self;
}
- (BOOL) hasWave {
  return result.hasWave;
}
- (PBWave*) wave {
  return result.wave;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) setWave:(PBWave*) value {
  result.hasWave = YES;
  result.wave = value;
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) setWaveBuilder:(PBWaveBuilder*) builderForValue {
  return [self setWave:[builderForValue build]];
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) mergeWave:(PBWave*) value {
  if (result.hasWave &&
      result.wave != [PBWave defaultInstance]) {
    result.wave =
      [[[PBWave builderWithPrototype:result.wave] mergeFrom:value] buildPartial];
  } else {
    result.wave = value;
  }
  result.hasWave = YES;
  return self;
}
- (PBFetchWaveIdsRespPBWaveAbstractBuilder*) clearWave {
  result.hasWave = NO;
  result.wave = [PBWave defaultInstance];
  return self;
}
@end

@interface PBFetchWaveIdsRespBuilder()
@property (strong) PBFetchWaveIdsResp* result;
@end

@implementation PBFetchWaveIdsRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveIdsResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveIdsRespBuilder*) clear {
  self.result = [[PBFetchWaveIdsResp alloc] init];
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clone {
  return [PBFetchWaveIdsResp builderWithPrototype:result];
}
- (PBFetchWaveIdsResp*) defaultInstance {
  return [PBFetchWaveIdsResp defaultInstance];
}
- (PBFetchWaveIdsResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveIdsResp*) buildPartial {
  PBFetchWaveIdsResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveIdsRespBuilder*) mergeFrom:(PBFetchWaveIdsResp*) other {
  if (other == [PBFetchWaveIdsResp defaultInstance]) {
    return self;
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasSenderPassportId) {
    [self setSenderPassportId:other.senderPassportId];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.abstractsArray.count > 0) {
    if (result.abstractsArray == nil) {
      result.abstractsArray = [[NSMutableArray alloc] initWithArray:other.abstractsArray];
    } else {
      [result.abstractsArray addObjectsFromArray:other.abstractsArray];
    }
  }
  if (other.myCommentIdsArray.count > 0) {
    if (result.myCommentIdsArray == nil) {
      result.myCommentIdsArray = [other.myCommentIdsArray copy];
    } else {
      [result.myCommentIdsArray appendArray:other.myCommentIdsArray];
    }
  }
  if (other.hasHasMore) {
    [self setHasMore:other.hasMore];
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  if (other.hasTotalPage) {
    [self setTotalPage:other.totalPage];
  }
  if (other.redPacketsArray.count > 0) {
    if (result.redPacketsArray == nil) {
      result.redPacketsArray = [[NSMutableArray alloc] initWithArray:other.redPacketsArray];
    } else {
      [result.redPacketsArray addObjectsFromArray:other.redPacketsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveIdsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveIdsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPage:[input readSInt32]];
        break;
      }
      case 16: {
        [self setSenderPassportId:[input readSInt64]];
        break;
      }
      case 26: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        PBFetchWaveIdsRespPBWaveAbstractBuilder* subBuilder = [PBFetchWaveIdsRespPBWaveAbstract builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAbstracts:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self addMyCommentIds:[input readSInt64]];
        break;
      }
      case 48: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 56: {
        [self setTotalCount:[input readSInt32]];
        break;
      }
      case 64: {
        [self setTotalPage:[input readSInt32]];
        break;
      }
      case 74: {
        PBRedPacketBuilder* subBuilder = [PBRedPacket builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRedPackets:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt32) page {
  return result.page;
}
- (PBFetchWaveIdsRespBuilder*) setPage:(SInt32) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasSenderPassportId {
  return result.hasSenderPassportId;
}
- (SInt64) senderPassportId {
  return result.senderPassportId;
}
- (PBFetchWaveIdsRespBuilder*) setSenderPassportId:(SInt64) value {
  result.hasSenderPassportId = YES;
  result.senderPassportId = value;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clearSenderPassportId {
  result.hasSenderPassportId = NO;
  result.senderPassportId = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBFetchWaveIdsRespBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBFetchWaveIdsRespBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (NSMutableArray *)abstracts {
  return result.abstractsArray;
}
- (PBFetchWaveIdsRespPBWaveAbstract*)abstractsAtIndex:(NSUInteger)index {
  return [result abstractsAtIndex:index];
}
- (PBFetchWaveIdsRespBuilder *)addAbstracts:(PBFetchWaveIdsRespPBWaveAbstract*)value {
  if (result.abstractsArray == nil) {
    result.abstractsArray = [[NSMutableArray alloc]init];
  }
  [result.abstractsArray addObject:value];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)setAbstractsArray:(NSArray *)array {
  result.abstractsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)clearAbstracts {
  result.abstractsArray = nil;
  return self;
}
- (PBAppendableArray *)myCommentIds {
  return result.myCommentIdsArray;
}
- (SInt64)myCommentIdsAtIndex:(NSUInteger)index {
  return [result myCommentIdsAtIndex:index];
}
- (PBFetchWaveIdsRespBuilder *)addMyCommentIds:(SInt64)value {
  if (result.myCommentIdsArray == nil) {
    result.myCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.myCommentIdsArray addInt64:value];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)setMyCommentIdsArray:(NSArray *)array {
  result.myCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)setMyCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.myCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)clearMyCommentIds {
  result.myCommentIdsArray = nil;
  return self;
}
- (BOOL) hasHasMore {
  return result.hasHasMore;
}
- (BOOL) hasMore {
  return result.hasMore;
}
- (PBFetchWaveIdsRespBuilder*) setHasMore:(BOOL) value {
  result.hasHasMore = YES;
  result.hasMore = value;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clearHasMore {
  result.hasHasMore = NO;
  result.hasMore = YES;
  return self;
}
- (BOOL) hasTotalCount {
  return result.hasTotalCount;
}
- (SInt32) totalCount {
  return result.totalCount;
}
- (PBFetchWaveIdsRespBuilder*) setTotalCount:(SInt32) value {
  result.hasTotalCount = YES;
  result.totalCount = value;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clearTotalCount {
  result.hasTotalCount = NO;
  result.totalCount = 0;
  return self;
}
- (BOOL) hasTotalPage {
  return result.hasTotalPage;
}
- (SInt32) totalPage {
  return result.totalPage;
}
- (PBFetchWaveIdsRespBuilder*) setTotalPage:(SInt32) value {
  result.hasTotalPage = YES;
  result.totalPage = value;
  return self;
}
- (PBFetchWaveIdsRespBuilder*) clearTotalPage {
  result.hasTotalPage = NO;
  result.totalPage = 0;
  return self;
}
- (NSMutableArray *)redPackets {
  return result.redPacketsArray;
}
- (PBRedPacket*)redPacketsAtIndex:(NSUInteger)index {
  return [result redPacketsAtIndex:index];
}
- (PBFetchWaveIdsRespBuilder *)addRedPackets:(PBRedPacket*)value {
  if (result.redPacketsArray == nil) {
    result.redPacketsArray = [[NSMutableArray alloc]init];
  }
  [result.redPacketsArray addObject:value];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)setRedPacketsArray:(NSArray *)array {
  result.redPacketsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchWaveIdsRespBuilder *)clearRedPackets {
  result.redPacketsArray = nil;
  return self;
}
@end

@interface PBFetchWaveCommentIdsReq ()
@property SInt64 waveId;
@property SInt32 page;
@property SInt64 beforeTextCommentId;
@property BOOL withBody;
@end

@implementation PBFetchWaveCommentIdsReq

- (BOOL) hasWaveId {
  return !!hasWaveId_;
}
- (void) setHasWaveId:(BOOL) value_ {
  hasWaveId_ = !!value_;
}
@synthesize waveId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasBeforeTextCommentId {
  return !!hasBeforeTextCommentId_;
}
- (void) setHasBeforeTextCommentId:(BOOL) value_ {
  hasBeforeTextCommentId_ = !!value_;
}
@synthesize beforeTextCommentId;
- (BOOL) hasWithBody {
  return !!hasWithBody_;
}
- (void) setHasWithBody:(BOOL) value_ {
  hasWithBody_ = !!value_;
}
- (BOOL) withBody {
  return !!withBody_;
}
- (void) setWithBody:(BOOL) value_ {
  withBody_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.waveId = 0L;
    self.page = 0;
    self.beforeTextCommentId = 0L;
    self.withBody = NO;
  }
  return self;
}
static PBFetchWaveCommentIdsReq* defaultPBFetchWaveCommentIdsReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveCommentIdsReq class]) {
    defaultPBFetchWaveCommentIdsReqInstance = [[PBFetchWaveCommentIdsReq alloc] init];
  }
}
+ (PBFetchWaveCommentIdsReq*) defaultInstance {
  return defaultPBFetchWaveCommentIdsReqInstance;
}
- (PBFetchWaveCommentIdsReq*) defaultInstance {
  return defaultPBFetchWaveCommentIdsReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWaveId) {
    [output writeSInt64:1 value:self.waveId];
  }
  if (self.hasPage) {
    [output writeSInt32:2 value:self.page];
  }
  if (self.hasBeforeTextCommentId) {
    [output writeSInt64:3 value:self.beforeTextCommentId];
  }
  if (self.hasWithBody) {
    [output writeBool:4 value:self.withBody];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWaveId) {
    size_ += computeSInt64Size(1, self.waveId);
  }
  if (self.hasPage) {
    size_ += computeSInt32Size(2, self.page);
  }
  if (self.hasBeforeTextCommentId) {
    size_ += computeSInt64Size(3, self.beforeTextCommentId);
  }
  if (self.hasWithBody) {
    size_ += computeBoolSize(4, self.withBody);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveCommentIdsReq*) parseFromData:(NSData*) data {
  return (PBFetchWaveCommentIdsReq*)[[[PBFetchWaveCommentIdsReq builder] mergeFromData:data] build];
}
+ (PBFetchWaveCommentIdsReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentIdsReq*)[[[PBFetchWaveCommentIdsReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentIdsReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveCommentIdsReq*)[[[PBFetchWaveCommentIdsReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveCommentIdsReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentIdsReq*)[[[PBFetchWaveCommentIdsReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentIdsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveCommentIdsReq*)[[[PBFetchWaveCommentIdsReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveCommentIdsReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentIdsReq*)[[[PBFetchWaveCommentIdsReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentIdsReqBuilder*) builder {
  return [[PBFetchWaveCommentIdsReqBuilder alloc] init];
}
+ (PBFetchWaveCommentIdsReqBuilder*) builderWithPrototype:(PBFetchWaveCommentIdsReq*) prototype {
  return [[PBFetchWaveCommentIdsReq builder] mergeFrom:prototype];
}
- (PBFetchWaveCommentIdsReqBuilder*) builder {
  return [PBFetchWaveCommentIdsReq builder];
}
- (PBFetchWaveCommentIdsReqBuilder*) toBuilder {
  return [PBFetchWaveCommentIdsReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveId", [NSNumber numberWithLongLong:self.waveId]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasBeforeTextCommentId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"beforeTextCommentId", [NSNumber numberWithLongLong:self.beforeTextCommentId]];
  }
  if (self.hasWithBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"withBody", [NSNumber numberWithBool:self.withBody]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveCommentIdsReq class]]) {
    return NO;
  }
  PBFetchWaveCommentIdsReq *otherMessage = other;
  return
      self.hasWaveId == otherMessage.hasWaveId &&
      (!self.hasWaveId || self.waveId == otherMessage.waveId) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasBeforeTextCommentId == otherMessage.hasBeforeTextCommentId &&
      (!self.hasBeforeTextCommentId || self.beforeTextCommentId == otherMessage.beforeTextCommentId) &&
      self.hasWithBody == otherMessage.hasWithBody &&
      (!self.hasWithBody || self.withBody == otherMessage.withBody) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.waveId] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasBeforeTextCommentId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.beforeTextCommentId] hash];
  }
  if (self.hasWithBody) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.withBody] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveCommentIdsReqBuilder()
@property (strong) PBFetchWaveCommentIdsReq* result;
@end

@implementation PBFetchWaveCommentIdsReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveCommentIdsReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveCommentIdsReqBuilder*) clear {
  self.result = [[PBFetchWaveCommentIdsReq alloc] init];
  return self;
}
- (PBFetchWaveCommentIdsReqBuilder*) clone {
  return [PBFetchWaveCommentIdsReq builderWithPrototype:result];
}
- (PBFetchWaveCommentIdsReq*) defaultInstance {
  return [PBFetchWaveCommentIdsReq defaultInstance];
}
- (PBFetchWaveCommentIdsReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveCommentIdsReq*) buildPartial {
  PBFetchWaveCommentIdsReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveCommentIdsReqBuilder*) mergeFrom:(PBFetchWaveCommentIdsReq*) other {
  if (other == [PBFetchWaveCommentIdsReq defaultInstance]) {
    return self;
  }
  if (other.hasWaveId) {
    [self setWaveId:other.waveId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasBeforeTextCommentId) {
    [self setBeforeTextCommentId:other.beforeTextCommentId];
  }
  if (other.hasWithBody) {
    [self setWithBody:other.withBody];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveCommentIdsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveCommentIdsReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWaveId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setPage:[input readSInt32]];
        break;
      }
      case 24: {
        [self setBeforeTextCommentId:[input readSInt64]];
        break;
      }
      case 32: {
        [self setWithBody:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasWaveId {
  return result.hasWaveId;
}
- (SInt64) waveId {
  return result.waveId;
}
- (PBFetchWaveCommentIdsReqBuilder*) setWaveId:(SInt64) value {
  result.hasWaveId = YES;
  result.waveId = value;
  return self;
}
- (PBFetchWaveCommentIdsReqBuilder*) clearWaveId {
  result.hasWaveId = NO;
  result.waveId = 0L;
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt32) page {
  return result.page;
}
- (PBFetchWaveCommentIdsReqBuilder*) setPage:(SInt32) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchWaveCommentIdsReqBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasBeforeTextCommentId {
  return result.hasBeforeTextCommentId;
}
- (SInt64) beforeTextCommentId {
  return result.beforeTextCommentId;
}
- (PBFetchWaveCommentIdsReqBuilder*) setBeforeTextCommentId:(SInt64) value {
  result.hasBeforeTextCommentId = YES;
  result.beforeTextCommentId = value;
  return self;
}
- (PBFetchWaveCommentIdsReqBuilder*) clearBeforeTextCommentId {
  result.hasBeforeTextCommentId = NO;
  result.beforeTextCommentId = 0L;
  return self;
}
- (BOOL) hasWithBody {
  return result.hasWithBody;
}
- (BOOL) withBody {
  return result.withBody;
}
- (PBFetchWaveCommentIdsReqBuilder*) setWithBody:(BOOL) value {
  result.hasWithBody = YES;
  result.withBody = value;
  return self;
}
- (PBFetchWaveCommentIdsReqBuilder*) clearWithBody {
  result.hasWithBody = NO;
  result.withBody = NO;
  return self;
}
@end

@interface PBWaveCommentIds ()
@property (strong) PBAppendableArray * likeCommentIdsArray;
@property (strong) PBAppendableArray * textCommentIdsArray;
@end

@implementation PBWaveCommentIds

@synthesize likeCommentIdsArray;
@dynamic likeCommentIds;
@synthesize textCommentIdsArray;
@dynamic textCommentIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBWaveCommentIds* defaultPBWaveCommentIdsInstance = nil;
+ (void) initialize {
  if (self == [PBWaveCommentIds class]) {
    defaultPBWaveCommentIdsInstance = [[PBWaveCommentIds alloc] init];
  }
}
+ (PBWaveCommentIds*) defaultInstance {
  return defaultPBWaveCommentIdsInstance;
}
- (PBWaveCommentIds*) defaultInstance {
  return defaultPBWaveCommentIdsInstance;
}
- (PBArray *)likeCommentIds {
  return likeCommentIdsArray;
}
- (SInt64)likeCommentIdsAtIndex:(NSUInteger)index {
  return [likeCommentIdsArray int64AtIndex:index];
}
- (PBArray *)textCommentIds {
  return textCommentIdsArray;
}
- (SInt64)textCommentIdsAtIndex:(NSUInteger)index {
  return [textCommentIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger likeCommentIdsArrayCount = self.likeCommentIdsArray.count;
  if (likeCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.likeCommentIdsArray.data;
    for (NSUInteger i = 0; i < likeCommentIdsArrayCount; ++i) {
      [output writeSInt64:3 value:values[i]];
    }
  }
  const NSUInteger textCommentIdsArrayCount = self.textCommentIdsArray.count;
  if (textCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.textCommentIdsArray.data;
    for (NSUInteger i = 0; i < textCommentIdsArrayCount; ++i) {
      [output writeSInt64:4 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.likeCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.likeCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.textCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.textCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBWaveCommentIds*) parseFromData:(NSData*) data {
  return (PBWaveCommentIds*)[[[PBWaveCommentIds builder] mergeFromData:data] build];
}
+ (PBWaveCommentIds*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveCommentIds*)[[[PBWaveCommentIds builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBWaveCommentIds*) parseFromInputStream:(NSInputStream*) input {
  return (PBWaveCommentIds*)[[[PBWaveCommentIds builder] mergeFromInputStream:input] build];
}
+ (PBWaveCommentIds*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveCommentIds*)[[[PBWaveCommentIds builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveCommentIds*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBWaveCommentIds*)[[[PBWaveCommentIds builder] mergeFromCodedInputStream:input] build];
}
+ (PBWaveCommentIds*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBWaveCommentIds*)[[[PBWaveCommentIds builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBWaveCommentIdsBuilder*) builder {
  return [[PBWaveCommentIdsBuilder alloc] init];
}
+ (PBWaveCommentIdsBuilder*) builderWithPrototype:(PBWaveCommentIds*) prototype {
  return [[PBWaveCommentIds builder] mergeFrom:prototype];
}
- (PBWaveCommentIdsBuilder*) builder {
  return [PBWaveCommentIds builder];
}
- (PBWaveCommentIdsBuilder*) toBuilder {
  return [PBWaveCommentIds builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.likeCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"likeCommentIds", obj];
  }];
  [self.textCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"textCommentIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBWaveCommentIds class]]) {
    return NO;
  }
  PBWaveCommentIds *otherMessage = other;
  return
      [self.likeCommentIdsArray isEqualToArray:otherMessage.likeCommentIdsArray] &&
      [self.textCommentIdsArray isEqualToArray:otherMessage.textCommentIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.likeCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.textCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBWaveCommentIdsBuilder()
@property (strong) PBWaveCommentIds* result;
@end

@implementation PBWaveCommentIdsBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBWaveCommentIds alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBWaveCommentIdsBuilder*) clear {
  self.result = [[PBWaveCommentIds alloc] init];
  return self;
}
- (PBWaveCommentIdsBuilder*) clone {
  return [PBWaveCommentIds builderWithPrototype:result];
}
- (PBWaveCommentIds*) defaultInstance {
  return [PBWaveCommentIds defaultInstance];
}
- (PBWaveCommentIds*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBWaveCommentIds*) buildPartial {
  PBWaveCommentIds* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBWaveCommentIdsBuilder*) mergeFrom:(PBWaveCommentIds*) other {
  if (other == [PBWaveCommentIds defaultInstance]) {
    return self;
  }
  if (other.likeCommentIdsArray.count > 0) {
    if (result.likeCommentIdsArray == nil) {
      result.likeCommentIdsArray = [other.likeCommentIdsArray copy];
    } else {
      [result.likeCommentIdsArray appendArray:other.likeCommentIdsArray];
    }
  }
  if (other.textCommentIdsArray.count > 0) {
    if (result.textCommentIdsArray == nil) {
      result.textCommentIdsArray = [other.textCommentIdsArray copy];
    } else {
      [result.textCommentIdsArray appendArray:other.textCommentIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBWaveCommentIdsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBWaveCommentIdsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 24: {
        [self addLikeCommentIds:[input readSInt64]];
        break;
      }
      case 32: {
        [self addTextCommentIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)likeCommentIds {
  return result.likeCommentIdsArray;
}
- (SInt64)likeCommentIdsAtIndex:(NSUInteger)index {
  return [result likeCommentIdsAtIndex:index];
}
- (PBWaveCommentIdsBuilder *)addLikeCommentIds:(SInt64)value {
  if (result.likeCommentIdsArray == nil) {
    result.likeCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.likeCommentIdsArray addInt64:value];
  return self;
}
- (PBWaveCommentIdsBuilder *)setLikeCommentIdsArray:(NSArray *)array {
  result.likeCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBWaveCommentIdsBuilder *)setLikeCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.likeCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBWaveCommentIdsBuilder *)clearLikeCommentIds {
  result.likeCommentIdsArray = nil;
  return self;
}
- (PBAppendableArray *)textCommentIds {
  return result.textCommentIdsArray;
}
- (SInt64)textCommentIdsAtIndex:(NSUInteger)index {
  return [result textCommentIdsAtIndex:index];
}
- (PBWaveCommentIdsBuilder *)addTextCommentIds:(SInt64)value {
  if (result.textCommentIdsArray == nil) {
    result.textCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.textCommentIdsArray addInt64:value];
  return self;
}
- (PBWaveCommentIdsBuilder *)setTextCommentIdsArray:(NSArray *)array {
  result.textCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBWaveCommentIdsBuilder *)setTextCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.textCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBWaveCommentIdsBuilder *)clearTextCommentIds {
  result.textCommentIdsArray = nil;
  return self;
}
@end

@interface PBFetchWaveCommentIdsResp ()
@property SInt64 waveId;
@property SInt32 page;
@property (strong) PBWaveCommentIds* ids;
@property BOOL hasMore;
@property SInt32 totalTextCommentCount;
@property SInt32 totalTextCommentPage;
@property (strong) NSMutableArray * commentsArray;
@end

@implementation PBFetchWaveCommentIdsResp

- (BOOL) hasWaveId {
  return !!hasWaveId_;
}
- (void) setHasWaveId:(BOOL) value_ {
  hasWaveId_ = !!value_;
}
@synthesize waveId;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasIds {
  return !!hasIds_;
}
- (void) setHasIds:(BOOL) value_ {
  hasIds_ = !!value_;
}
@synthesize ids;
- (BOOL) hasHasMore {
  return !!hasHasMore_;
}
- (void) setHasHasMore:(BOOL) value_ {
  hasHasMore_ = !!value_;
}
- (BOOL) hasMore {
  return !!hasMore_;
}
- (void) setHasMore:(BOOL) value_ {
  hasMore_ = !!value_;
}
- (BOOL) hasTotalTextCommentCount {
  return !!hasTotalTextCommentCount_;
}
- (void) setHasTotalTextCommentCount:(BOOL) value_ {
  hasTotalTextCommentCount_ = !!value_;
}
@synthesize totalTextCommentCount;
- (BOOL) hasTotalTextCommentPage {
  return !!hasTotalTextCommentPage_;
}
- (void) setHasTotalTextCommentPage:(BOOL) value_ {
  hasTotalTextCommentPage_ = !!value_;
}
@synthesize totalTextCommentPage;
@synthesize commentsArray;
@dynamic comments;
- (id) init {
  if ((self = [super init])) {
    self.waveId = 0L;
    self.page = 0;
    self.ids = [PBWaveCommentIds defaultInstance];
    self.hasMore = YES;
    self.totalTextCommentCount = 0;
    self.totalTextCommentPage = 0;
  }
  return self;
}
static PBFetchWaveCommentIdsResp* defaultPBFetchWaveCommentIdsRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchWaveCommentIdsResp class]) {
    defaultPBFetchWaveCommentIdsRespInstance = [[PBFetchWaveCommentIdsResp alloc] init];
  }
}
+ (PBFetchWaveCommentIdsResp*) defaultInstance {
  return defaultPBFetchWaveCommentIdsRespInstance;
}
- (PBFetchWaveCommentIdsResp*) defaultInstance {
  return defaultPBFetchWaveCommentIdsRespInstance;
}
- (NSArray *)comments {
  return commentsArray;
}
- (PBWaveComment*)commentsAtIndex:(NSUInteger)index {
  return [commentsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasWaveId) {
    [output writeSInt64:1 value:self.waveId];
  }
  if (self.hasPage) {
    [output writeSInt32:2 value:self.page];
  }
  if (self.hasIds) {
    [output writeMessage:3 value:self.ids];
  }
  if (self.hasHasMore) {
    [output writeBool:4 value:self.hasMore];
  }
  if (self.hasTotalTextCommentCount) {
    [output writeSInt32:5 value:self.totalTextCommentCount];
  }
  if (self.hasTotalTextCommentPage) {
    [output writeSInt32:6 value:self.totalTextCommentPage];
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasWaveId) {
    size_ += computeSInt64Size(1, self.waveId);
  }
  if (self.hasPage) {
    size_ += computeSInt32Size(2, self.page);
  }
  if (self.hasIds) {
    size_ += computeMessageSize(3, self.ids);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(4, self.hasMore);
  }
  if (self.hasTotalTextCommentCount) {
    size_ += computeSInt32Size(5, self.totalTextCommentCount);
  }
  if (self.hasTotalTextCommentPage) {
    size_ += computeSInt32Size(6, self.totalTextCommentPage);
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchWaveCommentIdsResp*) parseFromData:(NSData*) data {
  return (PBFetchWaveCommentIdsResp*)[[[PBFetchWaveCommentIdsResp builder] mergeFromData:data] build];
}
+ (PBFetchWaveCommentIdsResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentIdsResp*)[[[PBFetchWaveCommentIdsResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentIdsResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchWaveCommentIdsResp*)[[[PBFetchWaveCommentIdsResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchWaveCommentIdsResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentIdsResp*)[[[PBFetchWaveCommentIdsResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentIdsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchWaveCommentIdsResp*)[[[PBFetchWaveCommentIdsResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchWaveCommentIdsResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchWaveCommentIdsResp*)[[[PBFetchWaveCommentIdsResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchWaveCommentIdsRespBuilder*) builder {
  return [[PBFetchWaveCommentIdsRespBuilder alloc] init];
}
+ (PBFetchWaveCommentIdsRespBuilder*) builderWithPrototype:(PBFetchWaveCommentIdsResp*) prototype {
  return [[PBFetchWaveCommentIdsResp builder] mergeFrom:prototype];
}
- (PBFetchWaveCommentIdsRespBuilder*) builder {
  return [PBFetchWaveCommentIdsResp builder];
}
- (PBFetchWaveCommentIdsRespBuilder*) toBuilder {
  return [PBFetchWaveCommentIdsResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasWaveId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveId", [NSNumber numberWithLongLong:self.waveId]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithInteger:self.page]];
  }
  if (self.hasIds) {
    [output appendFormat:@"%@%@ {\n", indent, @"ids"];
    [self.ids writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  if (self.hasTotalTextCommentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalTextCommentCount", [NSNumber numberWithInteger:self.totalTextCommentCount]];
  }
  if (self.hasTotalTextCommentPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalTextCommentPage", [NSNumber numberWithInteger:self.totalTextCommentPage]];
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"comments"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchWaveCommentIdsResp class]]) {
    return NO;
  }
  PBFetchWaveCommentIdsResp *otherMessage = other;
  return
      self.hasWaveId == otherMessage.hasWaveId &&
      (!self.hasWaveId || self.waveId == otherMessage.waveId) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasIds == otherMessage.hasIds &&
      (!self.hasIds || [self.ids isEqual:otherMessage.ids]) &&
      self.hasHasMore == otherMessage.hasHasMore &&
      (!self.hasHasMore || self.hasMore == otherMessage.hasMore) &&
      self.hasTotalTextCommentCount == otherMessage.hasTotalTextCommentCount &&
      (!self.hasTotalTextCommentCount || self.totalTextCommentCount == otherMessage.totalTextCommentCount) &&
      self.hasTotalTextCommentPage == otherMessage.hasTotalTextCommentPage &&
      (!self.hasTotalTextCommentPage || self.totalTextCommentPage == otherMessage.totalTextCommentPage) &&
      [self.commentsArray isEqualToArray:otherMessage.commentsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasWaveId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.waveId] hash];
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.page] hash];
  }
  if (self.hasIds) {
    hashCode = hashCode * 31 + [self.ids hash];
  }
  if (self.hasHasMore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMore] hash];
  }
  if (self.hasTotalTextCommentCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalTextCommentCount] hash];
  }
  if (self.hasTotalTextCommentPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalTextCommentPage] hash];
  }
  [self.commentsArray enumerateObjectsUsingBlock:^(PBWaveComment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchWaveCommentIdsRespBuilder()
@property (strong) PBFetchWaveCommentIdsResp* result;
@end

@implementation PBFetchWaveCommentIdsRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchWaveCommentIdsResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchWaveCommentIdsRespBuilder*) clear {
  self.result = [[PBFetchWaveCommentIdsResp alloc] init];
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clone {
  return [PBFetchWaveCommentIdsResp builderWithPrototype:result];
}
- (PBFetchWaveCommentIdsResp*) defaultInstance {
  return [PBFetchWaveCommentIdsResp defaultInstance];
}
- (PBFetchWaveCommentIdsResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchWaveCommentIdsResp*) buildPartial {
  PBFetchWaveCommentIdsResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchWaveCommentIdsRespBuilder*) mergeFrom:(PBFetchWaveCommentIdsResp*) other {
  if (other == [PBFetchWaveCommentIdsResp defaultInstance]) {
    return self;
  }
  if (other.hasWaveId) {
    [self setWaveId:other.waveId];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasIds) {
    [self mergeIds:other.ids];
  }
  if (other.hasHasMore) {
    [self setHasMore:other.hasMore];
  }
  if (other.hasTotalTextCommentCount) {
    [self setTotalTextCommentCount:other.totalTextCommentCount];
  }
  if (other.hasTotalTextCommentPage) {
    [self setTotalTextCommentPage:other.totalTextCommentPage];
  }
  if (other.commentsArray.count > 0) {
    if (result.commentsArray == nil) {
      result.commentsArray = [[NSMutableArray alloc] initWithArray:other.commentsArray];
    } else {
      [result.commentsArray addObjectsFromArray:other.commentsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchWaveCommentIdsRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setWaveId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setPage:[input readSInt32]];
        break;
      }
      case 26: {
        PBWaveCommentIdsBuilder* subBuilder = [PBWaveCommentIds builder];
        if (self.hasIds) {
          [subBuilder mergeFrom:self.ids];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setIds:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 40: {
        [self setTotalTextCommentCount:[input readSInt32]];
        break;
      }
      case 48: {
        [self setTotalTextCommentPage:[input readSInt32]];
        break;
      }
      case 58: {
        PBWaveCommentBuilder* subBuilder = [PBWaveComment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addComments:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasWaveId {
  return result.hasWaveId;
}
- (SInt64) waveId {
  return result.waveId;
}
- (PBFetchWaveCommentIdsRespBuilder*) setWaveId:(SInt64) value {
  result.hasWaveId = YES;
  result.waveId = value;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clearWaveId {
  result.hasWaveId = NO;
  result.waveId = 0L;
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt32) page {
  return result.page;
}
- (PBFetchWaveCommentIdsRespBuilder*) setPage:(SInt32) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0;
  return self;
}
- (BOOL) hasIds {
  return result.hasIds;
}
- (PBWaveCommentIds*) ids {
  return result.ids;
}
- (PBFetchWaveCommentIdsRespBuilder*) setIds:(PBWaveCommentIds*) value {
  result.hasIds = YES;
  result.ids = value;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) setIdsBuilder:(PBWaveCommentIdsBuilder*) builderForValue {
  return [self setIds:[builderForValue build]];
}
- (PBFetchWaveCommentIdsRespBuilder*) mergeIds:(PBWaveCommentIds*) value {
  if (result.hasIds &&
      result.ids != [PBWaveCommentIds defaultInstance]) {
    result.ids =
      [[[PBWaveCommentIds builderWithPrototype:result.ids] mergeFrom:value] buildPartial];
  } else {
    result.ids = value;
  }
  result.hasIds = YES;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clearIds {
  result.hasIds = NO;
  result.ids = [PBWaveCommentIds defaultInstance];
  return self;
}
- (BOOL) hasHasMore {
  return result.hasHasMore;
}
- (BOOL) hasMore {
  return result.hasMore;
}
- (PBFetchWaveCommentIdsRespBuilder*) setHasMore:(BOOL) value {
  result.hasHasMore = YES;
  result.hasMore = value;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clearHasMore {
  result.hasHasMore = NO;
  result.hasMore = YES;
  return self;
}
- (BOOL) hasTotalTextCommentCount {
  return result.hasTotalTextCommentCount;
}
- (SInt32) totalTextCommentCount {
  return result.totalTextCommentCount;
}
- (PBFetchWaveCommentIdsRespBuilder*) setTotalTextCommentCount:(SInt32) value {
  result.hasTotalTextCommentCount = YES;
  result.totalTextCommentCount = value;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clearTotalTextCommentCount {
  result.hasTotalTextCommentCount = NO;
  result.totalTextCommentCount = 0;
  return self;
}
- (BOOL) hasTotalTextCommentPage {
  return result.hasTotalTextCommentPage;
}
- (SInt32) totalTextCommentPage {
  return result.totalTextCommentPage;
}
- (PBFetchWaveCommentIdsRespBuilder*) setTotalTextCommentPage:(SInt32) value {
  result.hasTotalTextCommentPage = YES;
  result.totalTextCommentPage = value;
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder*) clearTotalTextCommentPage {
  result.hasTotalTextCommentPage = NO;
  result.totalTextCommentPage = 0;
  return self;
}
- (NSMutableArray *)comments {
  return result.commentsArray;
}
- (PBWaveComment*)commentsAtIndex:(NSUInteger)index {
  return [result commentsAtIndex:index];
}
- (PBFetchWaveCommentIdsRespBuilder *)addComments:(PBWaveComment*)value {
  if (result.commentsArray == nil) {
    result.commentsArray = [[NSMutableArray alloc]init];
  }
  [result.commentsArray addObject:value];
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder *)setCommentsArray:(NSArray *)array {
  result.commentsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchWaveCommentIdsRespBuilder *)clearComments {
  result.commentsArray = nil;
  return self;
}
@end

@interface PBDeleteWaveCommentReq ()
@property (strong) PBAppendableArray * waveCommentIdsArray;
@end

@implementation PBDeleteWaveCommentReq

@synthesize waveCommentIdsArray;
@dynamic waveCommentIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBDeleteWaveCommentReq* defaultPBDeleteWaveCommentReqInstance = nil;
+ (void) initialize {
  if (self == [PBDeleteWaveCommentReq class]) {
    defaultPBDeleteWaveCommentReqInstance = [[PBDeleteWaveCommentReq alloc] init];
  }
}
+ (PBDeleteWaveCommentReq*) defaultInstance {
  return defaultPBDeleteWaveCommentReqInstance;
}
- (PBDeleteWaveCommentReq*) defaultInstance {
  return defaultPBDeleteWaveCommentReqInstance;
}
- (PBArray *)waveCommentIds {
  return waveCommentIdsArray;
}
- (SInt64)waveCommentIdsAtIndex:(NSUInteger)index {
  return [waveCommentIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger waveCommentIdsArrayCount = self.waveCommentIdsArray.count;
  if (waveCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.waveCommentIdsArray.data;
    for (NSUInteger i = 0; i < waveCommentIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.waveCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.waveCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDeleteWaveCommentReq*) parseFromData:(NSData*) data {
  return (PBDeleteWaveCommentReq*)[[[PBDeleteWaveCommentReq builder] mergeFromData:data] build];
}
+ (PBDeleteWaveCommentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveCommentReq*)[[[PBDeleteWaveCommentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveCommentReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBDeleteWaveCommentReq*)[[[PBDeleteWaveCommentReq builder] mergeFromInputStream:input] build];
}
+ (PBDeleteWaveCommentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveCommentReq*)[[[PBDeleteWaveCommentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDeleteWaveCommentReq*)[[[PBDeleteWaveCommentReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBDeleteWaveCommentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveCommentReq*)[[[PBDeleteWaveCommentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveCommentReqBuilder*) builder {
  return [[PBDeleteWaveCommentReqBuilder alloc] init];
}
+ (PBDeleteWaveCommentReqBuilder*) builderWithPrototype:(PBDeleteWaveCommentReq*) prototype {
  return [[PBDeleteWaveCommentReq builder] mergeFrom:prototype];
}
- (PBDeleteWaveCommentReqBuilder*) builder {
  return [PBDeleteWaveCommentReq builder];
}
- (PBDeleteWaveCommentReqBuilder*) toBuilder {
  return [PBDeleteWaveCommentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.waveCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waveCommentIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDeleteWaveCommentReq class]]) {
    return NO;
  }
  PBDeleteWaveCommentReq *otherMessage = other;
  return
      [self.waveCommentIdsArray isEqualToArray:otherMessage.waveCommentIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.waveCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDeleteWaveCommentReqBuilder()
@property (strong) PBDeleteWaveCommentReq* result;
@end

@implementation PBDeleteWaveCommentReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBDeleteWaveCommentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDeleteWaveCommentReqBuilder*) clear {
  self.result = [[PBDeleteWaveCommentReq alloc] init];
  return self;
}
- (PBDeleteWaveCommentReqBuilder*) clone {
  return [PBDeleteWaveCommentReq builderWithPrototype:result];
}
- (PBDeleteWaveCommentReq*) defaultInstance {
  return [PBDeleteWaveCommentReq defaultInstance];
}
- (PBDeleteWaveCommentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDeleteWaveCommentReq*) buildPartial {
  PBDeleteWaveCommentReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBDeleteWaveCommentReqBuilder*) mergeFrom:(PBDeleteWaveCommentReq*) other {
  if (other == [PBDeleteWaveCommentReq defaultInstance]) {
    return self;
  }
  if (other.waveCommentIdsArray.count > 0) {
    if (result.waveCommentIdsArray == nil) {
      result.waveCommentIdsArray = [other.waveCommentIdsArray copy];
    } else {
      [result.waveCommentIdsArray appendArray:other.waveCommentIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDeleteWaveCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDeleteWaveCommentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addWaveCommentIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)waveCommentIds {
  return result.waveCommentIdsArray;
}
- (SInt64)waveCommentIdsAtIndex:(NSUInteger)index {
  return [result waveCommentIdsAtIndex:index];
}
- (PBDeleteWaveCommentReqBuilder *)addWaveCommentIds:(SInt64)value {
  if (result.waveCommentIdsArray == nil) {
    result.waveCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.waveCommentIdsArray addInt64:value];
  return self;
}
- (PBDeleteWaveCommentReqBuilder *)setWaveCommentIdsArray:(NSArray *)array {
  result.waveCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveCommentReqBuilder *)setWaveCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.waveCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveCommentReqBuilder *)clearWaveCommentIds {
  result.waveCommentIdsArray = nil;
  return self;
}
@end

@interface PBDeleteWaveCommentResp ()
@property (strong) PBAppendableArray * deletedWaveCommentIdsArray;
@end

@implementation PBDeleteWaveCommentResp

@synthesize deletedWaveCommentIdsArray;
@dynamic deletedWaveCommentIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBDeleteWaveCommentResp* defaultPBDeleteWaveCommentRespInstance = nil;
+ (void) initialize {
  if (self == [PBDeleteWaveCommentResp class]) {
    defaultPBDeleteWaveCommentRespInstance = [[PBDeleteWaveCommentResp alloc] init];
  }
}
+ (PBDeleteWaveCommentResp*) defaultInstance {
  return defaultPBDeleteWaveCommentRespInstance;
}
- (PBDeleteWaveCommentResp*) defaultInstance {
  return defaultPBDeleteWaveCommentRespInstance;
}
- (PBArray *)deletedWaveCommentIds {
  return deletedWaveCommentIdsArray;
}
- (SInt64)deletedWaveCommentIdsAtIndex:(NSUInteger)index {
  return [deletedWaveCommentIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger deletedWaveCommentIdsArrayCount = self.deletedWaveCommentIdsArray.count;
  if (deletedWaveCommentIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.deletedWaveCommentIdsArray.data;
    for (NSUInteger i = 0; i < deletedWaveCommentIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.deletedWaveCommentIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.deletedWaveCommentIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBDeleteWaveCommentResp*) parseFromData:(NSData*) data {
  return (PBDeleteWaveCommentResp*)[[[PBDeleteWaveCommentResp builder] mergeFromData:data] build];
}
+ (PBDeleteWaveCommentResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveCommentResp*)[[[PBDeleteWaveCommentResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveCommentResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBDeleteWaveCommentResp*)[[[PBDeleteWaveCommentResp builder] mergeFromInputStream:input] build];
}
+ (PBDeleteWaveCommentResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveCommentResp*)[[[PBDeleteWaveCommentResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveCommentResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBDeleteWaveCommentResp*)[[[PBDeleteWaveCommentResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBDeleteWaveCommentResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBDeleteWaveCommentResp*)[[[PBDeleteWaveCommentResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBDeleteWaveCommentRespBuilder*) builder {
  return [[PBDeleteWaveCommentRespBuilder alloc] init];
}
+ (PBDeleteWaveCommentRespBuilder*) builderWithPrototype:(PBDeleteWaveCommentResp*) prototype {
  return [[PBDeleteWaveCommentResp builder] mergeFrom:prototype];
}
- (PBDeleteWaveCommentRespBuilder*) builder {
  return [PBDeleteWaveCommentResp builder];
}
- (PBDeleteWaveCommentRespBuilder*) toBuilder {
  return [PBDeleteWaveCommentResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.deletedWaveCommentIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deletedWaveCommentIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBDeleteWaveCommentResp class]]) {
    return NO;
  }
  PBDeleteWaveCommentResp *otherMessage = other;
  return
      [self.deletedWaveCommentIdsArray isEqualToArray:otherMessage.deletedWaveCommentIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.deletedWaveCommentIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBDeleteWaveCommentRespBuilder()
@property (strong) PBDeleteWaveCommentResp* result;
@end

@implementation PBDeleteWaveCommentRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBDeleteWaveCommentResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBDeleteWaveCommentRespBuilder*) clear {
  self.result = [[PBDeleteWaveCommentResp alloc] init];
  return self;
}
- (PBDeleteWaveCommentRespBuilder*) clone {
  return [PBDeleteWaveCommentResp builderWithPrototype:result];
}
- (PBDeleteWaveCommentResp*) defaultInstance {
  return [PBDeleteWaveCommentResp defaultInstance];
}
- (PBDeleteWaveCommentResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBDeleteWaveCommentResp*) buildPartial {
  PBDeleteWaveCommentResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBDeleteWaveCommentRespBuilder*) mergeFrom:(PBDeleteWaveCommentResp*) other {
  if (other == [PBDeleteWaveCommentResp defaultInstance]) {
    return self;
  }
  if (other.deletedWaveCommentIdsArray.count > 0) {
    if (result.deletedWaveCommentIdsArray == nil) {
      result.deletedWaveCommentIdsArray = [other.deletedWaveCommentIdsArray copy];
    } else {
      [result.deletedWaveCommentIdsArray appendArray:other.deletedWaveCommentIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBDeleteWaveCommentRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBDeleteWaveCommentRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addDeletedWaveCommentIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)deletedWaveCommentIds {
  return result.deletedWaveCommentIdsArray;
}
- (SInt64)deletedWaveCommentIdsAtIndex:(NSUInteger)index {
  return [result deletedWaveCommentIdsAtIndex:index];
}
- (PBDeleteWaveCommentRespBuilder *)addDeletedWaveCommentIds:(SInt64)value {
  if (result.deletedWaveCommentIdsArray == nil) {
    result.deletedWaveCommentIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.deletedWaveCommentIdsArray addInt64:value];
  return self;
}
- (PBDeleteWaveCommentRespBuilder *)setDeletedWaveCommentIdsArray:(NSArray *)array {
  result.deletedWaveCommentIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveCommentRespBuilder *)setDeletedWaveCommentIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.deletedWaveCommentIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBDeleteWaveCommentRespBuilder *)clearDeletedWaveCommentIds {
  result.deletedWaveCommentIdsArray = nil;
  return self;
}
@end

@interface PBFetchRedPacketCountReq ()
@property PBFetchRedPacketCountReqClientType type;
@end

@implementation PBFetchRedPacketCountReq

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (id) init {
  if ((self = [super init])) {
    self.type = PBFetchRedPacketCountReqClientTypeTypeMobile;
  }
  return self;
}
static PBFetchRedPacketCountReq* defaultPBFetchRedPacketCountReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketCountReq class]) {
    defaultPBFetchRedPacketCountReqInstance = [[PBFetchRedPacketCountReq alloc] init];
  }
}
+ (PBFetchRedPacketCountReq*) defaultInstance {
  return defaultPBFetchRedPacketCountReqInstance;
}
- (PBFetchRedPacketCountReq*) defaultInstance {
  return defaultPBFetchRedPacketCountReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketCountReq*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketCountReq*)[[[PBFetchRedPacketCountReq builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketCountReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketCountReq*)[[[PBFetchRedPacketCountReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketCountReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketCountReq*)[[[PBFetchRedPacketCountReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketCountReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketCountReq*)[[[PBFetchRedPacketCountReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketCountReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketCountReq*)[[[PBFetchRedPacketCountReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketCountReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketCountReq*)[[[PBFetchRedPacketCountReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketCountReqBuilder*) builder {
  return [[PBFetchRedPacketCountReqBuilder alloc] init];
}
+ (PBFetchRedPacketCountReqBuilder*) builderWithPrototype:(PBFetchRedPacketCountReq*) prototype {
  return [[PBFetchRedPacketCountReq builder] mergeFrom:prototype];
}
- (PBFetchRedPacketCountReqBuilder*) builder {
  return [PBFetchRedPacketCountReq builder];
}
- (PBFetchRedPacketCountReqBuilder*) toBuilder {
  return [PBFetchRedPacketCountReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketCountReq class]]) {
    return NO;
  }
  PBFetchRedPacketCountReq *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBFetchRedPacketCountReqClientTypeIsValidValue(PBFetchRedPacketCountReqClientType value) {
  switch (value) {
    case PBFetchRedPacketCountReqClientTypeTypePhp:
    case PBFetchRedPacketCountReqClientTypeTypeMobile:
      return YES;
    default:
      return NO;
  }
}
@interface PBFetchRedPacketCountReqBuilder()
@property (strong) PBFetchRedPacketCountReq* result;
@end

@implementation PBFetchRedPacketCountReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketCountReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketCountReqBuilder*) clear {
  self.result = [[PBFetchRedPacketCountReq alloc] init];
  return self;
}
- (PBFetchRedPacketCountReqBuilder*) clone {
  return [PBFetchRedPacketCountReq builderWithPrototype:result];
}
- (PBFetchRedPacketCountReq*) defaultInstance {
  return [PBFetchRedPacketCountReq defaultInstance];
}
- (PBFetchRedPacketCountReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketCountReq*) buildPartial {
  PBFetchRedPacketCountReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketCountReqBuilder*) mergeFrom:(PBFetchRedPacketCountReq*) other {
  if (other == [PBFetchRedPacketCountReq defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketCountReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketCountReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PBFetchRedPacketCountReqClientType value = (PBFetchRedPacketCountReqClientType)[input readEnum];
        if (PBFetchRedPacketCountReqClientTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return result.hasType;
}
- (PBFetchRedPacketCountReqClientType) type {
  return result.type;
}
- (PBFetchRedPacketCountReqBuilder*) setType:(PBFetchRedPacketCountReqClientType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PBFetchRedPacketCountReqBuilder*) clearType {
  result.hasType = NO;
  result.type = PBFetchRedPacketCountReqClientTypeTypeMobile;
  return self;
}
@end

@interface PBFetchRedPacketCountResp ()
@property SInt64 count;
@end

@implementation PBFetchRedPacketCountResp

- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) value_ {
  hasCount_ = !!value_;
}
@synthesize count;
- (id) init {
  if ((self = [super init])) {
    self.count = 0L;
  }
  return self;
}
static PBFetchRedPacketCountResp* defaultPBFetchRedPacketCountRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRedPacketCountResp class]) {
    defaultPBFetchRedPacketCountRespInstance = [[PBFetchRedPacketCountResp alloc] init];
  }
}
+ (PBFetchRedPacketCountResp*) defaultInstance {
  return defaultPBFetchRedPacketCountRespInstance;
}
- (PBFetchRedPacketCountResp*) defaultInstance {
  return defaultPBFetchRedPacketCountRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCount) {
    [output writeSInt64:1 value:self.count];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCount) {
    size_ += computeSInt64Size(1, self.count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRedPacketCountResp*) parseFromData:(NSData*) data {
  return (PBFetchRedPacketCountResp*)[[[PBFetchRedPacketCountResp builder] mergeFromData:data] build];
}
+ (PBFetchRedPacketCountResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketCountResp*)[[[PBFetchRedPacketCountResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketCountResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRedPacketCountResp*)[[[PBFetchRedPacketCountResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRedPacketCountResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketCountResp*)[[[PBFetchRedPacketCountResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketCountResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRedPacketCountResp*)[[[PBFetchRedPacketCountResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRedPacketCountResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRedPacketCountResp*)[[[PBFetchRedPacketCountResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRedPacketCountRespBuilder*) builder {
  return [[PBFetchRedPacketCountRespBuilder alloc] init];
}
+ (PBFetchRedPacketCountRespBuilder*) builderWithPrototype:(PBFetchRedPacketCountResp*) prototype {
  return [[PBFetchRedPacketCountResp builder] mergeFrom:prototype];
}
- (PBFetchRedPacketCountRespBuilder*) builder {
  return [PBFetchRedPacketCountResp builder];
}
- (PBFetchRedPacketCountRespBuilder*) toBuilder {
  return [PBFetchRedPacketCountResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithLongLong:self.count]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRedPacketCountResp class]]) {
    return NO;
  }
  PBFetchRedPacketCountResp *otherMessage = other;
  return
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.count] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRedPacketCountRespBuilder()
@property (strong) PBFetchRedPacketCountResp* result;
@end

@implementation PBFetchRedPacketCountRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRedPacketCountResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRedPacketCountRespBuilder*) clear {
  self.result = [[PBFetchRedPacketCountResp alloc] init];
  return self;
}
- (PBFetchRedPacketCountRespBuilder*) clone {
  return [PBFetchRedPacketCountResp builderWithPrototype:result];
}
- (PBFetchRedPacketCountResp*) defaultInstance {
  return [PBFetchRedPacketCountResp defaultInstance];
}
- (PBFetchRedPacketCountResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRedPacketCountResp*) buildPartial {
  PBFetchRedPacketCountResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRedPacketCountRespBuilder*) mergeFrom:(PBFetchRedPacketCountResp*) other {
  if (other == [PBFetchRedPacketCountResp defaultInstance]) {
    return self;
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRedPacketCountRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRedPacketCountRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCount:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCount {
  return result.hasCount;
}
- (SInt64) count {
  return result.count;
}
- (PBFetchRedPacketCountRespBuilder*) setCount:(SInt64) value {
  result.hasCount = YES;
  result.count = value;
  return self;
}
- (PBFetchRedPacketCountRespBuilder*) clearCount {
  result.hasCount = NO;
  result.count = 0L;
  return self;
}
@end

@interface PBFetchAllWavesReq ()
@property PBFetchAllWavesReqPublishType publishType;
@property PBFetchAllWavesReqOrderType orderType;
@property SInt64 page;
@property (strong) PBSystemSender* systemSender;
@property BOOL membersIncluded;
@end

@implementation PBFetchAllWavesReq

- (BOOL) hasPublishType {
  return !!hasPublishType_;
}
- (void) setHasPublishType:(BOOL) value_ {
  hasPublishType_ = !!value_;
}
@synthesize publishType;
- (BOOL) hasOrderType {
  return !!hasOrderType_;
}
- (void) setHasOrderType:(BOOL) value_ {
  hasOrderType_ = !!value_;
}
@synthesize orderType;
- (BOOL) hasPage {
  return !!hasPage_;
}
- (void) setHasPage:(BOOL) value_ {
  hasPage_ = !!value_;
}
@synthesize page;
- (BOOL) hasSystemSender {
  return !!hasSystemSender_;
}
- (void) setHasSystemSender:(BOOL) value_ {
  hasSystemSender_ = !!value_;
}
@synthesize systemSender;
- (BOOL) hasMembersIncluded {
  return !!hasMembersIncluded_;
}
- (void) setHasMembersIncluded:(BOOL) value_ {
  hasMembersIncluded_ = !!value_;
}
- (BOOL) membersIncluded {
  return !!membersIncluded_;
}
- (void) setMembersIncluded:(BOOL) value_ {
  membersIncluded_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.publishType = PBFetchAllWavesReqPublishTypeTypeAll;
    self.orderType = PBFetchAllWavesReqOrderTypeTypeTime;
    self.page = 0L;
    self.systemSender = [PBSystemSender defaultInstance];
    self.membersIncluded = NO;
  }
  return self;
}
static PBFetchAllWavesReq* defaultPBFetchAllWavesReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchAllWavesReq class]) {
    defaultPBFetchAllWavesReqInstance = [[PBFetchAllWavesReq alloc] init];
  }
}
+ (PBFetchAllWavesReq*) defaultInstance {
  return defaultPBFetchAllWavesReqInstance;
}
- (PBFetchAllWavesReq*) defaultInstance {
  return defaultPBFetchAllWavesReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPublishType) {
    [output writeEnum:1 value:self.publishType];
  }
  if (self.hasOrderType) {
    [output writeEnum:2 value:self.orderType];
  }
  if (self.hasPage) {
    [output writeSInt64:3 value:self.page];
  }
  if (self.hasSystemSender) {
    [output writeMessage:4 value:self.systemSender];
  }
  if (self.hasMembersIncluded) {
    [output writeBool:5 value:self.membersIncluded];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPublishType) {
    size_ += computeEnumSize(1, self.publishType);
  }
  if (self.hasOrderType) {
    size_ += computeEnumSize(2, self.orderType);
  }
  if (self.hasPage) {
    size_ += computeSInt64Size(3, self.page);
  }
  if (self.hasSystemSender) {
    size_ += computeMessageSize(4, self.systemSender);
  }
  if (self.hasMembersIncluded) {
    size_ += computeBoolSize(5, self.membersIncluded);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchAllWavesReq*) parseFromData:(NSData*) data {
  return (PBFetchAllWavesReq*)[[[PBFetchAllWavesReq builder] mergeFromData:data] build];
}
+ (PBFetchAllWavesReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchAllWavesReq*)[[[PBFetchAllWavesReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchAllWavesReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchAllWavesReq*)[[[PBFetchAllWavesReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchAllWavesReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchAllWavesReq*)[[[PBFetchAllWavesReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchAllWavesReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchAllWavesReq*)[[[PBFetchAllWavesReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchAllWavesReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchAllWavesReq*)[[[PBFetchAllWavesReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchAllWavesReqBuilder*) builder {
  return [[PBFetchAllWavesReqBuilder alloc] init];
}
+ (PBFetchAllWavesReqBuilder*) builderWithPrototype:(PBFetchAllWavesReq*) prototype {
  return [[PBFetchAllWavesReq builder] mergeFrom:prototype];
}
- (PBFetchAllWavesReqBuilder*) builder {
  return [PBFetchAllWavesReq builder];
}
- (PBFetchAllWavesReqBuilder*) toBuilder {
  return [PBFetchAllWavesReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPublishType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publishType", [NSNumber numberWithInteger:self.publishType]];
  }
  if (self.hasOrderType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderType", [NSNumber numberWithInteger:self.orderType]];
  }
  if (self.hasPage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"page", [NSNumber numberWithLongLong:self.page]];
  }
  if (self.hasSystemSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"systemSender"];
    [self.systemSender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMembersIncluded) {
    [output appendFormat:@"%@%@: %@\n", indent, @"membersIncluded", [NSNumber numberWithBool:self.membersIncluded]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchAllWavesReq class]]) {
    return NO;
  }
  PBFetchAllWavesReq *otherMessage = other;
  return
      self.hasPublishType == otherMessage.hasPublishType &&
      (!self.hasPublishType || self.publishType == otherMessage.publishType) &&
      self.hasOrderType == otherMessage.hasOrderType &&
      (!self.hasOrderType || self.orderType == otherMessage.orderType) &&
      self.hasPage == otherMessage.hasPage &&
      (!self.hasPage || self.page == otherMessage.page) &&
      self.hasSystemSender == otherMessage.hasSystemSender &&
      (!self.hasSystemSender || [self.systemSender isEqual:otherMessage.systemSender]) &&
      self.hasMembersIncluded == otherMessage.hasMembersIncluded &&
      (!self.hasMembersIncluded || self.membersIncluded == otherMessage.membersIncluded) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPublishType) {
    hashCode = hashCode * 31 + self.publishType;
  }
  if (self.hasOrderType) {
    hashCode = hashCode * 31 + self.orderType;
  }
  if (self.hasPage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.page] hash];
  }
  if (self.hasSystemSender) {
    hashCode = hashCode * 31 + [self.systemSender hash];
  }
  if (self.hasMembersIncluded) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.membersIncluded] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBFetchAllWavesReqPublishTypeIsValidValue(PBFetchAllWavesReqPublishType value) {
  switch (value) {
    case PBFetchAllWavesReqPublishTypeTypeAll:
    case PBFetchAllWavesReqPublishTypeTypeNews:
    case PBFetchAllWavesReqPublishTypeTypeWave:
    case PBFetchAllWavesReqPublishTypeTypeRedPacket:
    case PBFetchAllWavesReqPublishTypeTypeNotice:
      return YES;
    default:
      return NO;
  }
}
BOOL PBFetchAllWavesReqOrderTypeIsValidValue(PBFetchAllWavesReqOrderType value) {
  switch (value) {
    case PBFetchAllWavesReqOrderTypeTypeTime:
    case PBFetchAllWavesReqOrderTypeTypeComment:
    case PBFetchAllWavesReqOrderTypeTypeLike:
      return YES;
    default:
      return NO;
  }
}
@interface PBFetchAllWavesReqBuilder()
@property (strong) PBFetchAllWavesReq* result;
@end

@implementation PBFetchAllWavesReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchAllWavesReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchAllWavesReqBuilder*) clear {
  self.result = [[PBFetchAllWavesReq alloc] init];
  return self;
}
- (PBFetchAllWavesReqBuilder*) clone {
  return [PBFetchAllWavesReq builderWithPrototype:result];
}
- (PBFetchAllWavesReq*) defaultInstance {
  return [PBFetchAllWavesReq defaultInstance];
}
- (PBFetchAllWavesReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchAllWavesReq*) buildPartial {
  PBFetchAllWavesReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchAllWavesReqBuilder*) mergeFrom:(PBFetchAllWavesReq*) other {
  if (other == [PBFetchAllWavesReq defaultInstance]) {
    return self;
  }
  if (other.hasPublishType) {
    [self setPublishType:other.publishType];
  }
  if (other.hasOrderType) {
    [self setOrderType:other.orderType];
  }
  if (other.hasPage) {
    [self setPage:other.page];
  }
  if (other.hasSystemSender) {
    [self mergeSystemSender:other.systemSender];
  }
  if (other.hasMembersIncluded) {
    [self setMembersIncluded:other.membersIncluded];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchAllWavesReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchAllWavesReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PBFetchAllWavesReqPublishType value = (PBFetchAllWavesReqPublishType)[input readEnum];
        if (PBFetchAllWavesReqPublishTypeIsValidValue(value)) {
          [self setPublishType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        PBFetchAllWavesReqOrderType value = (PBFetchAllWavesReqOrderType)[input readEnum];
        if (PBFetchAllWavesReqOrderTypeIsValidValue(value)) {
          [self setOrderType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setPage:[input readSInt64]];
        break;
      }
      case 34: {
        PBSystemSenderBuilder* subBuilder = [PBSystemSender builder];
        if (self.hasSystemSender) {
          [subBuilder mergeFrom:self.systemSender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSystemSender:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setMembersIncluded:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasPublishType {
  return result.hasPublishType;
}
- (PBFetchAllWavesReqPublishType) publishType {
  return result.publishType;
}
- (PBFetchAllWavesReqBuilder*) setPublishType:(PBFetchAllWavesReqPublishType) value {
  result.hasPublishType = YES;
  result.publishType = value;
  return self;
}
- (PBFetchAllWavesReqBuilder*) clearPublishType {
  result.hasPublishType = NO;
  result.publishType = PBFetchAllWavesReqPublishTypeTypeAll;
  return self;
}
- (BOOL) hasOrderType {
  return result.hasOrderType;
}
- (PBFetchAllWavesReqOrderType) orderType {
  return result.orderType;
}
- (PBFetchAllWavesReqBuilder*) setOrderType:(PBFetchAllWavesReqOrderType) value {
  result.hasOrderType = YES;
  result.orderType = value;
  return self;
}
- (PBFetchAllWavesReqBuilder*) clearOrderType {
  result.hasOrderType = NO;
  result.orderType = PBFetchAllWavesReqOrderTypeTypeTime;
  return self;
}
- (BOOL) hasPage {
  return result.hasPage;
}
- (SInt64) page {
  return result.page;
}
- (PBFetchAllWavesReqBuilder*) setPage:(SInt64) value {
  result.hasPage = YES;
  result.page = value;
  return self;
}
- (PBFetchAllWavesReqBuilder*) clearPage {
  result.hasPage = NO;
  result.page = 0L;
  return self;
}
- (BOOL) hasSystemSender {
  return result.hasSystemSender;
}
- (PBSystemSender*) systemSender {
  return result.systemSender;
}
- (PBFetchAllWavesReqBuilder*) setSystemSender:(PBSystemSender*) value {
  result.hasSystemSender = YES;
  result.systemSender = value;
  return self;
}
- (PBFetchAllWavesReqBuilder*) setSystemSenderBuilder:(PBSystemSenderBuilder*) builderForValue {
  return [self setSystemSender:[builderForValue build]];
}
- (PBFetchAllWavesReqBuilder*) mergeSystemSender:(PBSystemSender*) value {
  if (result.hasSystemSender &&
      result.systemSender != [PBSystemSender defaultInstance]) {
    result.systemSender =
      [[[PBSystemSender builderWithPrototype:result.systemSender] mergeFrom:value] buildPartial];
  } else {
    result.systemSender = value;
  }
  result.hasSystemSender = YES;
  return self;
}
- (PBFetchAllWavesReqBuilder*) clearSystemSender {
  result.hasSystemSender = NO;
  result.systemSender = [PBSystemSender defaultInstance];
  return self;
}
- (BOOL) hasMembersIncluded {
  return result.hasMembersIncluded;
}
- (BOOL) membersIncluded {
  return result.membersIncluded;
}
- (PBFetchAllWavesReqBuilder*) setMembersIncluded:(BOOL) value {
  result.hasMembersIncluded = YES;
  result.membersIncluded = value;
  return self;
}
- (PBFetchAllWavesReqBuilder*) clearMembersIncluded {
  result.hasMembersIncluded = NO;
  result.membersIncluded = NO;
  return self;
}
@end

@interface PBFetchAllWavesResp ()
@property (strong) NSMutableArray * wavesArray;
@property SInt64 totalCount;
@end

@implementation PBFetchAllWavesResp

@synthesize wavesArray;
@dynamic waves;
- (BOOL) hasTotalCount {
  return !!hasTotalCount_;
}
- (void) setHasTotalCount:(BOOL) value_ {
  hasTotalCount_ = !!value_;
}
@synthesize totalCount;
- (id) init {
  if ((self = [super init])) {
    self.totalCount = 0L;
  }
  return self;
}
static PBFetchAllWavesResp* defaultPBFetchAllWavesRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchAllWavesResp class]) {
    defaultPBFetchAllWavesRespInstance = [[PBFetchAllWavesResp alloc] init];
  }
}
+ (PBFetchAllWavesResp*) defaultInstance {
  return defaultPBFetchAllWavesRespInstance;
}
- (PBFetchAllWavesResp*) defaultInstance {
  return defaultPBFetchAllWavesRespInstance;
}
- (NSArray *)waves {
  return wavesArray;
}
- (PBWave*)wavesAtIndex:(NSUInteger)index {
  return [wavesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasTotalCount) {
    [output writeSInt64:2 value:self.totalCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasTotalCount) {
    size_ += computeSInt64Size(2, self.totalCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchAllWavesResp*) parseFromData:(NSData*) data {
  return (PBFetchAllWavesResp*)[[[PBFetchAllWavesResp builder] mergeFromData:data] build];
}
+ (PBFetchAllWavesResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchAllWavesResp*)[[[PBFetchAllWavesResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchAllWavesResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchAllWavesResp*)[[[PBFetchAllWavesResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchAllWavesResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchAllWavesResp*)[[[PBFetchAllWavesResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchAllWavesResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchAllWavesResp*)[[[PBFetchAllWavesResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchAllWavesResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchAllWavesResp*)[[[PBFetchAllWavesResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchAllWavesRespBuilder*) builder {
  return [[PBFetchAllWavesRespBuilder alloc] init];
}
+ (PBFetchAllWavesRespBuilder*) builderWithPrototype:(PBFetchAllWavesResp*) prototype {
  return [[PBFetchAllWavesResp builder] mergeFrom:prototype];
}
- (PBFetchAllWavesRespBuilder*) builder {
  return [PBFetchAllWavesResp builder];
}
- (PBFetchAllWavesRespBuilder*) toBuilder {
  return [PBFetchAllWavesResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"waves"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithLongLong:self.totalCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchAllWavesResp class]]) {
    return NO;
  }
  PBFetchAllWavesResp *otherMessage = other;
  return
      [self.wavesArray isEqualToArray:otherMessage.wavesArray] &&
      self.hasTotalCount == otherMessage.hasTotalCount &&
      (!self.hasTotalCount || self.totalCount == otherMessage.totalCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.wavesArray enumerateObjectsUsingBlock:^(PBWave *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTotalCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.totalCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchAllWavesRespBuilder()
@property (strong) PBFetchAllWavesResp* result;
@end

@implementation PBFetchAllWavesRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchAllWavesResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchAllWavesRespBuilder*) clear {
  self.result = [[PBFetchAllWavesResp alloc] init];
  return self;
}
- (PBFetchAllWavesRespBuilder*) clone {
  return [PBFetchAllWavesResp builderWithPrototype:result];
}
- (PBFetchAllWavesResp*) defaultInstance {
  return [PBFetchAllWavesResp defaultInstance];
}
- (PBFetchAllWavesResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchAllWavesResp*) buildPartial {
  PBFetchAllWavesResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchAllWavesRespBuilder*) mergeFrom:(PBFetchAllWavesResp*) other {
  if (other == [PBFetchAllWavesResp defaultInstance]) {
    return self;
  }
  if (other.wavesArray.count > 0) {
    if (result.wavesArray == nil) {
      result.wavesArray = [[NSMutableArray alloc] initWithArray:other.wavesArray];
    } else {
      [result.wavesArray addObjectsFromArray:other.wavesArray];
    }
  }
  if (other.hasTotalCount) {
    [self setTotalCount:other.totalCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchAllWavesRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchAllWavesRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBWaveBuilder* subBuilder = [PBWave builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addWaves:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setTotalCount:[input readSInt64]];
        break;
      }
    }
  }
}
- (NSMutableArray *)waves {
  return result.wavesArray;
}
- (PBWave*)wavesAtIndex:(NSUInteger)index {
  return [result wavesAtIndex:index];
}
- (PBFetchAllWavesRespBuilder *)addWaves:(PBWave*)value {
  if (result.wavesArray == nil) {
    result.wavesArray = [[NSMutableArray alloc]init];
  }
  [result.wavesArray addObject:value];
  return self;
}
- (PBFetchAllWavesRespBuilder *)setWavesArray:(NSArray *)array {
  result.wavesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchAllWavesRespBuilder *)clearWaves {
  result.wavesArray = nil;
  return self;
}
- (BOOL) hasTotalCount {
  return result.hasTotalCount;
}
- (SInt64) totalCount {
  return result.totalCount;
}
- (PBFetchAllWavesRespBuilder*) setTotalCount:(SInt64) value {
  result.hasTotalCount = YES;
  result.totalCount = value;
  return self;
}
- (PBFetchAllWavesRespBuilder*) clearTotalCount {
  result.hasTotalCount = NO;
  result.totalCount = 0L;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
