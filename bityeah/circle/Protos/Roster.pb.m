// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Roster.pb.h"
// @@protoc_insertion_point(imports)

@implementation RosterRoot
static id<PBExtensionField> RosterRoot_fetchRosterByPassportIdReq = nil;
static id<PBExtensionField> RosterRoot_fetchRosterByPassportIdResp = nil;
static id<PBExtensionField> RosterRoot_fetchChangedRosterReq = nil;
static id<PBExtensionField> RosterRoot_fetchChangedRosterResp = nil;
static id<PBExtensionField> RosterRoot_fetchRosterRequestReq = nil;
static id<PBExtensionField> RosterRoot_fetchRosterRequestResp = nil;
static id<PBExtensionField> RosterRoot_rosterChangedNotify = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [RosterRoot class]) {
    RosterRoot_fetchRosterByPassportIdReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:200
                                      defaultValue:[PBFetchRosterByPassportIdReq defaultInstance]
                               messageOrGroupClass:[PBFetchRosterByPassportIdReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    RosterRoot_fetchRosterByPassportIdResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:201
                                      defaultValue:[PBFetchRosterByPassportIdResp defaultInstance]
                               messageOrGroupClass:[PBFetchRosterByPassportIdResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    RosterRoot_fetchChangedRosterReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:202
                                      defaultValue:[PBFetchChangedRosterReq defaultInstance]
                               messageOrGroupClass:[PBFetchChangedRosterReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    RosterRoot_fetchChangedRosterResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:203
                                      defaultValue:[PBFetchChangedRosterResp defaultInstance]
                               messageOrGroupClass:[PBFetchChangedRosterResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    RosterRoot_fetchRosterRequestReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:204
                                      defaultValue:[PBFetchRosterRequestReq defaultInstance]
                               messageOrGroupClass:[PBFetchRosterRequestReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    RosterRoot_fetchRosterRequestResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:205
                                      defaultValue:[PBFetchRosterRequestResp defaultInstance]
                               messageOrGroupClass:[PBFetchRosterRequestResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    RosterRoot_rosterChangedNotify =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:250
                                      defaultValue:[PBRosterChangedNotify defaultInstance]
                               messageOrGroupClass:[PBRosterChangedNotify class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FrameRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:RosterRoot_fetchRosterByPassportIdReq];
  [registry addExtension:RosterRoot_fetchRosterByPassportIdResp];
  [registry addExtension:RosterRoot_fetchChangedRosterReq];
  [registry addExtension:RosterRoot_fetchChangedRosterResp];
  [registry addExtension:RosterRoot_fetchRosterRequestReq];
  [registry addExtension:RosterRoot_fetchRosterRequestResp];
  [registry addExtension:RosterRoot_rosterChangedNotify];
}
+ (id<PBExtensionField>) fetchRosterByPassportIdReq {
  return RosterRoot_fetchRosterByPassportIdReq;
}
+ (id<PBExtensionField>) fetchRosterByPassportIdResp {
  return RosterRoot_fetchRosterByPassportIdResp;
}
+ (id<PBExtensionField>) fetchChangedRosterReq {
  return RosterRoot_fetchChangedRosterReq;
}
+ (id<PBExtensionField>) fetchChangedRosterResp {
  return RosterRoot_fetchChangedRosterResp;
}
+ (id<PBExtensionField>) fetchRosterRequestReq {
  return RosterRoot_fetchRosterRequestReq;
}
+ (id<PBExtensionField>) fetchRosterRequestResp {
  return RosterRoot_fetchRosterRequestResp;
}
+ (id<PBExtensionField>) rosterChangedNotify {
  return RosterRoot_rosterChangedNotify;
}
@end

@interface PBRoster ()
@property SInt64 id;
@property SInt64 passportId;
@property SInt64 rosterPassportId;
@property (strong) NSString* rosterRemark;
@property (strong) NSString* rosterGroup;
@property PBRosterStatus status;
@property SInt64 createdAt;
@property SInt64 updatedAt;
@end

@implementation PBRoster

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasPassportId {
  return !!hasPassportId_;
}
- (void) setHasPassportId:(BOOL) value_ {
  hasPassportId_ = !!value_;
}
@synthesize passportId;
- (BOOL) hasRosterPassportId {
  return !!hasRosterPassportId_;
}
- (void) setHasRosterPassportId:(BOOL) value_ {
  hasRosterPassportId_ = !!value_;
}
@synthesize rosterPassportId;
- (BOOL) hasRosterRemark {
  return !!hasRosterRemark_;
}
- (void) setHasRosterRemark:(BOOL) value_ {
  hasRosterRemark_ = !!value_;
}
@synthesize rosterRemark;
- (BOOL) hasRosterGroup {
  return !!hasRosterGroup_;
}
- (void) setHasRosterGroup:(BOOL) value_ {
  hasRosterGroup_ = !!value_;
}
@synthesize rosterGroup;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value_ {
  hasStatus_ = !!value_;
}
@synthesize status;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) value_ {
  hasUpdatedAt_ = !!value_;
}
@synthesize updatedAt;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.passportId = 0L;
    self.rosterPassportId = 0L;
    self.rosterRemark = @"";
    self.rosterGroup = @"";
    self.status = PBRosterStatusStatusCommon;
    self.createdAt = 0L;
    self.updatedAt = 0L;
  }
  return self;
}
static PBRoster* defaultPBRosterInstance = nil;
+ (void) initialize {
  if (self == [PBRoster class]) {
    defaultPBRosterInstance = [[PBRoster alloc] init];
  }
}
+ (PBRoster*) defaultInstance {
  return defaultPBRosterInstance;
}
- (PBRoster*) defaultInstance {
  return defaultPBRosterInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasPassportId) {
    [output writeSInt64:2 value:self.passportId];
  }
  if (self.hasRosterPassportId) {
    [output writeSInt64:3 value:self.rosterPassportId];
  }
  if (self.hasRosterRemark) {
    [output writeString:4 value:self.rosterRemark];
  }
  if (self.hasRosterGroup) {
    [output writeString:5 value:self.rosterGroup];
  }
  if (self.hasStatus) {
    [output writeEnum:6 value:self.status];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:7 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeSInt64:8 value:self.updatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasPassportId) {
    size_ += computeSInt64Size(2, self.passportId);
  }
  if (self.hasRosterPassportId) {
    size_ += computeSInt64Size(3, self.rosterPassportId);
  }
  if (self.hasRosterRemark) {
    size_ += computeStringSize(4, self.rosterRemark);
  }
  if (self.hasRosterGroup) {
    size_ += computeStringSize(5, self.rosterGroup);
  }
  if (self.hasStatus) {
    size_ += computeEnumSize(6, self.status);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(7, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeSInt64Size(8, self.updatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRoster*) parseFromData:(NSData*) data {
  return (PBRoster*)[[[PBRoster builder] mergeFromData:data] build];
}
+ (PBRoster*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRoster*)[[[PBRoster builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRoster*) parseFromInputStream:(NSInputStream*) input {
  return (PBRoster*)[[[PBRoster builder] mergeFromInputStream:input] build];
}
+ (PBRoster*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRoster*)[[[PBRoster builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRoster*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRoster*)[[[PBRoster builder] mergeFromCodedInputStream:input] build];
}
+ (PBRoster*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRoster*)[[[PBRoster builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRosterBuilder*) builder {
  return [[PBRosterBuilder alloc] init];
}
+ (PBRosterBuilder*) builderWithPrototype:(PBRoster*) prototype {
  return [[PBRoster builder] mergeFrom:prototype];
}
- (PBRosterBuilder*) builder {
  return [PBRoster builder];
}
- (PBRosterBuilder*) toBuilder {
  return [PBRoster builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passportId", [NSNumber numberWithLongLong:self.passportId]];
  }
  if (self.hasRosterPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rosterPassportId", [NSNumber numberWithLongLong:self.rosterPassportId]];
  }
  if (self.hasRosterRemark) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rosterRemark", self.rosterRemark];
  }
  if (self.hasRosterGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rosterGroup", self.rosterGroup];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithLongLong:self.updatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRoster class]]) {
    return NO;
  }
  PBRoster *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasPassportId == otherMessage.hasPassportId &&
      (!self.hasPassportId || self.passportId == otherMessage.passportId) &&
      self.hasRosterPassportId == otherMessage.hasRosterPassportId &&
      (!self.hasRosterPassportId || self.rosterPassportId == otherMessage.rosterPassportId) &&
      self.hasRosterRemark == otherMessage.hasRosterRemark &&
      (!self.hasRosterRemark || [self.rosterRemark isEqual:otherMessage.rosterRemark]) &&
      self.hasRosterGroup == otherMessage.hasRosterGroup &&
      (!self.hasRosterGroup || [self.rosterGroup isEqual:otherMessage.rosterGroup]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.passportId] hash];
  }
  if (self.hasRosterPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.rosterPassportId] hash];
  }
  if (self.hasRosterRemark) {
    hashCode = hashCode * 31 + [self.rosterRemark hash];
  }
  if (self.hasRosterGroup) {
    hashCode = hashCode * 31 + [self.rosterGroup hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBRosterStatusIsValidValue(PBRosterStatus value) {
  switch (value) {
    case PBRosterStatusStatusCommon:
    case PBRosterStatusStatusDeleted:
      return YES;
    default:
      return NO;
  }
}
@interface PBRosterBuilder()
@property (strong) PBRoster* result;
@end

@implementation PBRosterBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRoster alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRosterBuilder*) clear {
  self.result = [[PBRoster alloc] init];
  return self;
}
- (PBRosterBuilder*) clone {
  return [PBRoster builderWithPrototype:result];
}
- (PBRoster*) defaultInstance {
  return [PBRoster defaultInstance];
}
- (PBRoster*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRoster*) buildPartial {
  PBRoster* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRosterBuilder*) mergeFrom:(PBRoster*) other {
  if (other == [PBRoster defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasPassportId) {
    [self setPassportId:other.passportId];
  }
  if (other.hasRosterPassportId) {
    [self setRosterPassportId:other.rosterPassportId];
  }
  if (other.hasRosterRemark) {
    [self setRosterRemark:other.rosterRemark];
  }
  if (other.hasRosterGroup) {
    [self setRosterGroup:other.rosterGroup];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRosterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRosterBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setPassportId:[input readSInt64]];
        break;
      }
      case 24: {
        [self setRosterPassportId:[input readSInt64]];
        break;
      }
      case 34: {
        [self setRosterRemark:[input readString]];
        break;
      }
      case 42: {
        [self setRosterGroup:[input readString]];
        break;
      }
      case 48: {
        PBRosterStatus value = (PBRosterStatus)[input readEnum];
        if (PBRosterStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 64: {
        [self setUpdatedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBRosterBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBRosterBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasPassportId {
  return result.hasPassportId;
}
- (SInt64) passportId {
  return result.passportId;
}
- (PBRosterBuilder*) setPassportId:(SInt64) value {
  result.hasPassportId = YES;
  result.passportId = value;
  return self;
}
- (PBRosterBuilder*) clearPassportId {
  result.hasPassportId = NO;
  result.passportId = 0L;
  return self;
}
- (BOOL) hasRosterPassportId {
  return result.hasRosterPassportId;
}
- (SInt64) rosterPassportId {
  return result.rosterPassportId;
}
- (PBRosterBuilder*) setRosterPassportId:(SInt64) value {
  result.hasRosterPassportId = YES;
  result.rosterPassportId = value;
  return self;
}
- (PBRosterBuilder*) clearRosterPassportId {
  result.hasRosterPassportId = NO;
  result.rosterPassportId = 0L;
  return self;
}
- (BOOL) hasRosterRemark {
  return result.hasRosterRemark;
}
- (NSString*) rosterRemark {
  return result.rosterRemark;
}
- (PBRosterBuilder*) setRosterRemark:(NSString*) value {
  result.hasRosterRemark = YES;
  result.rosterRemark = value;
  return self;
}
- (PBRosterBuilder*) clearRosterRemark {
  result.hasRosterRemark = NO;
  result.rosterRemark = @"";
  return self;
}
- (BOOL) hasRosterGroup {
  return result.hasRosterGroup;
}
- (NSString*) rosterGroup {
  return result.rosterGroup;
}
- (PBRosterBuilder*) setRosterGroup:(NSString*) value {
  result.hasRosterGroup = YES;
  result.rosterGroup = value;
  return self;
}
- (PBRosterBuilder*) clearRosterGroup {
  result.hasRosterGroup = NO;
  result.rosterGroup = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (PBRosterStatus) status {
  return result.status;
}
- (PBRosterBuilder*) setStatus:(PBRosterStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBRosterBuilder*) clearStatus {
  result.hasStatus = NO;
  result.status = PBRosterStatusStatusCommon;
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBRosterBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBRosterBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasUpdatedAt {
  return result.hasUpdatedAt;
}
- (SInt64) updatedAt {
  return result.updatedAt;
}
- (PBRosterBuilder*) setUpdatedAt:(SInt64) value {
  result.hasUpdatedAt = YES;
  result.updatedAt = value;
  return self;
}
- (PBRosterBuilder*) clearUpdatedAt {
  result.hasUpdatedAt = NO;
  result.updatedAt = 0L;
  return self;
}
@end

@interface PBRosterRequest ()
@property SInt64 id;
@property SInt64 fromPassportId;
@property SInt64 toPassportId;
@property (strong) NSString* verifyText;
@property PBRosterRequestStatus status;
@property (strong) NSString* remark;
@property (strong) NSString* group;
@property SInt64 createdAt;
@property SInt64 updatedAt;
@end

@implementation PBRosterRequest

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasFromPassportId {
  return !!hasFromPassportId_;
}
- (void) setHasFromPassportId:(BOOL) value_ {
  hasFromPassportId_ = !!value_;
}
@synthesize fromPassportId;
- (BOOL) hasToPassportId {
  return !!hasToPassportId_;
}
- (void) setHasToPassportId:(BOOL) value_ {
  hasToPassportId_ = !!value_;
}
@synthesize toPassportId;
- (BOOL) hasVerifyText {
  return !!hasVerifyText_;
}
- (void) setHasVerifyText:(BOOL) value_ {
  hasVerifyText_ = !!value_;
}
@synthesize verifyText;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value_ {
  hasStatus_ = !!value_;
}
@synthesize status;
- (BOOL) hasRemark {
  return !!hasRemark_;
}
- (void) setHasRemark:(BOOL) value_ {
  hasRemark_ = !!value_;
}
@synthesize remark;
- (BOOL) hasGroup {
  return !!hasGroup_;
}
- (void) setHasGroup:(BOOL) value_ {
  hasGroup_ = !!value_;
}
@synthesize group;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) value_ {
  hasUpdatedAt_ = !!value_;
}
@synthesize updatedAt;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.fromPassportId = 0L;
    self.toPassportId = 0L;
    self.verifyText = @"";
    self.status = PBRosterRequestStatusStatusWaitting;
    self.remark = @"";
    self.group = @"";
    self.createdAt = 0L;
    self.updatedAt = 0L;
  }
  return self;
}
static PBRosterRequest* defaultPBRosterRequestInstance = nil;
+ (void) initialize {
  if (self == [PBRosterRequest class]) {
    defaultPBRosterRequestInstance = [[PBRosterRequest alloc] init];
  }
}
+ (PBRosterRequest*) defaultInstance {
  return defaultPBRosterRequestInstance;
}
- (PBRosterRequest*) defaultInstance {
  return defaultPBRosterRequestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasFromPassportId) {
    [output writeSInt64:2 value:self.fromPassportId];
  }
  if (self.hasToPassportId) {
    [output writeSInt64:3 value:self.toPassportId];
  }
  if (self.hasVerifyText) {
    [output writeString:4 value:self.verifyText];
  }
  if (self.hasStatus) {
    [output writeEnum:5 value:self.status];
  }
  if (self.hasRemark) {
    [output writeString:6 value:self.remark];
  }
  if (self.hasGroup) {
    [output writeString:7 value:self.group];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:8 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeSInt64:9 value:self.updatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasFromPassportId) {
    size_ += computeSInt64Size(2, self.fromPassportId);
  }
  if (self.hasToPassportId) {
    size_ += computeSInt64Size(3, self.toPassportId);
  }
  if (self.hasVerifyText) {
    size_ += computeStringSize(4, self.verifyText);
  }
  if (self.hasStatus) {
    size_ += computeEnumSize(5, self.status);
  }
  if (self.hasRemark) {
    size_ += computeStringSize(6, self.remark);
  }
  if (self.hasGroup) {
    size_ += computeStringSize(7, self.group);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(8, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeSInt64Size(9, self.updatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRosterRequest*) parseFromData:(NSData*) data {
  return (PBRosterRequest*)[[[PBRosterRequest builder] mergeFromData:data] build];
}
+ (PBRosterRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRosterRequest*)[[[PBRosterRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRosterRequest*) parseFromInputStream:(NSInputStream*) input {
  return (PBRosterRequest*)[[[PBRosterRequest builder] mergeFromInputStream:input] build];
}
+ (PBRosterRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRosterRequest*)[[[PBRosterRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRosterRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRosterRequest*)[[[PBRosterRequest builder] mergeFromCodedInputStream:input] build];
}
+ (PBRosterRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRosterRequest*)[[[PBRosterRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRosterRequestBuilder*) builder {
  return [[PBRosterRequestBuilder alloc] init];
}
+ (PBRosterRequestBuilder*) builderWithPrototype:(PBRosterRequest*) prototype {
  return [[PBRosterRequest builder] mergeFrom:prototype];
}
- (PBRosterRequestBuilder*) builder {
  return [PBRosterRequest builder];
}
- (PBRosterRequestBuilder*) toBuilder {
  return [PBRosterRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasFromPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromPassportId", [NSNumber numberWithLongLong:self.fromPassportId]];
  }
  if (self.hasToPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toPassportId", [NSNumber numberWithLongLong:self.toPassportId]];
  }
  if (self.hasVerifyText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verifyText", self.verifyText];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  if (self.hasRemark) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remark", self.remark];
  }
  if (self.hasGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"group", self.group];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithLongLong:self.updatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRosterRequest class]]) {
    return NO;
  }
  PBRosterRequest *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasFromPassportId == otherMessage.hasFromPassportId &&
      (!self.hasFromPassportId || self.fromPassportId == otherMessage.fromPassportId) &&
      self.hasToPassportId == otherMessage.hasToPassportId &&
      (!self.hasToPassportId || self.toPassportId == otherMessage.toPassportId) &&
      self.hasVerifyText == otherMessage.hasVerifyText &&
      (!self.hasVerifyText || [self.verifyText isEqual:otherMessage.verifyText]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasRemark == otherMessage.hasRemark &&
      (!self.hasRemark || [self.remark isEqual:otherMessage.remark]) &&
      self.hasGroup == otherMessage.hasGroup &&
      (!self.hasGroup || [self.group isEqual:otherMessage.group]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasFromPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromPassportId] hash];
  }
  if (self.hasToPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toPassportId] hash];
  }
  if (self.hasVerifyText) {
    hashCode = hashCode * 31 + [self.verifyText hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasRemark) {
    hashCode = hashCode * 31 + [self.remark hash];
  }
  if (self.hasGroup) {
    hashCode = hashCode * 31 + [self.group hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBRosterRequestStatusIsValidValue(PBRosterRequestStatus value) {
  switch (value) {
    case PBRosterRequestStatusStatusWaitting:
    case PBRosterRequestStatusStatusAccepted:
    case PBRosterRequestStatusStatusRejected:
      return YES;
    default:
      return NO;
  }
}
@interface PBRosterRequestBuilder()
@property (strong) PBRosterRequest* result;
@end

@implementation PBRosterRequestBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRosterRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRosterRequestBuilder*) clear {
  self.result = [[PBRosterRequest alloc] init];
  return self;
}
- (PBRosterRequestBuilder*) clone {
  return [PBRosterRequest builderWithPrototype:result];
}
- (PBRosterRequest*) defaultInstance {
  return [PBRosterRequest defaultInstance];
}
- (PBRosterRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRosterRequest*) buildPartial {
  PBRosterRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRosterRequestBuilder*) mergeFrom:(PBRosterRequest*) other {
  if (other == [PBRosterRequest defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasFromPassportId) {
    [self setFromPassportId:other.fromPassportId];
  }
  if (other.hasToPassportId) {
    [self setToPassportId:other.toPassportId];
  }
  if (other.hasVerifyText) {
    [self setVerifyText:other.verifyText];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasRemark) {
    [self setRemark:other.remark];
  }
  if (other.hasGroup) {
    [self setGroup:other.group];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRosterRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRosterRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setFromPassportId:[input readSInt64]];
        break;
      }
      case 24: {
        [self setToPassportId:[input readSInt64]];
        break;
      }
      case 34: {
        [self setVerifyText:[input readString]];
        break;
      }
      case 40: {
        PBRosterRequestStatus value = (PBRosterRequestStatus)[input readEnum];
        if (PBRosterRequestStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setRemark:[input readString]];
        break;
      }
      case 58: {
        [self setGroup:[input readString]];
        break;
      }
      case 64: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 72: {
        [self setUpdatedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBRosterRequestBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBRosterRequestBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasFromPassportId {
  return result.hasFromPassportId;
}
- (SInt64) fromPassportId {
  return result.fromPassportId;
}
- (PBRosterRequestBuilder*) setFromPassportId:(SInt64) value {
  result.hasFromPassportId = YES;
  result.fromPassportId = value;
  return self;
}
- (PBRosterRequestBuilder*) clearFromPassportId {
  result.hasFromPassportId = NO;
  result.fromPassportId = 0L;
  return self;
}
- (BOOL) hasToPassportId {
  return result.hasToPassportId;
}
- (SInt64) toPassportId {
  return result.toPassportId;
}
- (PBRosterRequestBuilder*) setToPassportId:(SInt64) value {
  result.hasToPassportId = YES;
  result.toPassportId = value;
  return self;
}
- (PBRosterRequestBuilder*) clearToPassportId {
  result.hasToPassportId = NO;
  result.toPassportId = 0L;
  return self;
}
- (BOOL) hasVerifyText {
  return result.hasVerifyText;
}
- (NSString*) verifyText {
  return result.verifyText;
}
- (PBRosterRequestBuilder*) setVerifyText:(NSString*) value {
  result.hasVerifyText = YES;
  result.verifyText = value;
  return self;
}
- (PBRosterRequestBuilder*) clearVerifyText {
  result.hasVerifyText = NO;
  result.verifyText = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (PBRosterRequestStatus) status {
  return result.status;
}
- (PBRosterRequestBuilder*) setStatus:(PBRosterRequestStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBRosterRequestBuilder*) clearStatus {
  result.hasStatus = NO;
  result.status = PBRosterRequestStatusStatusWaitting;
  return self;
}
- (BOOL) hasRemark {
  return result.hasRemark;
}
- (NSString*) remark {
  return result.remark;
}
- (PBRosterRequestBuilder*) setRemark:(NSString*) value {
  result.hasRemark = YES;
  result.remark = value;
  return self;
}
- (PBRosterRequestBuilder*) clearRemark {
  result.hasRemark = NO;
  result.remark = @"";
  return self;
}
- (BOOL) hasGroup {
  return result.hasGroup;
}
- (NSString*) group {
  return result.group;
}
- (PBRosterRequestBuilder*) setGroup:(NSString*) value {
  result.hasGroup = YES;
  result.group = value;
  return self;
}
- (PBRosterRequestBuilder*) clearGroup {
  result.hasGroup = NO;
  result.group = @"";
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBRosterRequestBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBRosterRequestBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasUpdatedAt {
  return result.hasUpdatedAt;
}
- (SInt64) updatedAt {
  return result.updatedAt;
}
- (PBRosterRequestBuilder*) setUpdatedAt:(SInt64) value {
  result.hasUpdatedAt = YES;
  result.updatedAt = value;
  return self;
}
- (PBRosterRequestBuilder*) clearUpdatedAt {
  result.hasUpdatedAt = NO;
  result.updatedAt = 0L;
  return self;
}
@end

@interface PBFetchRosterByPassportIdReq ()
@property (strong) PBAppendableArray * passportIdArray;
@end

@implementation PBFetchRosterByPassportIdReq

@synthesize passportIdArray;
@dynamic passportId;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchRosterByPassportIdReq* defaultPBFetchRosterByPassportIdReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRosterByPassportIdReq class]) {
    defaultPBFetchRosterByPassportIdReqInstance = [[PBFetchRosterByPassportIdReq alloc] init];
  }
}
+ (PBFetchRosterByPassportIdReq*) defaultInstance {
  return defaultPBFetchRosterByPassportIdReqInstance;
}
- (PBFetchRosterByPassportIdReq*) defaultInstance {
  return defaultPBFetchRosterByPassportIdReqInstance;
}
- (PBArray *)passportId {
  return passportIdArray;
}
- (SInt64)passportIdAtIndex:(NSUInteger)index {
  return [passportIdArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger passportIdArrayCount = self.passportIdArray.count;
  if (passportIdArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.passportIdArray.data;
    for (NSUInteger i = 0; i < passportIdArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.passportIdArray.count;
    const SInt64 *values = (const SInt64 *)self.passportIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRosterByPassportIdReq*) parseFromData:(NSData*) data {
  return (PBFetchRosterByPassportIdReq*)[[[PBFetchRosterByPassportIdReq builder] mergeFromData:data] build];
}
+ (PBFetchRosterByPassportIdReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterByPassportIdReq*)[[[PBFetchRosterByPassportIdReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterByPassportIdReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRosterByPassportIdReq*)[[[PBFetchRosterByPassportIdReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRosterByPassportIdReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterByPassportIdReq*)[[[PBFetchRosterByPassportIdReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterByPassportIdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRosterByPassportIdReq*)[[[PBFetchRosterByPassportIdReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRosterByPassportIdReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterByPassportIdReq*)[[[PBFetchRosterByPassportIdReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterByPassportIdReqBuilder*) builder {
  return [[PBFetchRosterByPassportIdReqBuilder alloc] init];
}
+ (PBFetchRosterByPassportIdReqBuilder*) builderWithPrototype:(PBFetchRosterByPassportIdReq*) prototype {
  return [[PBFetchRosterByPassportIdReq builder] mergeFrom:prototype];
}
- (PBFetchRosterByPassportIdReqBuilder*) builder {
  return [PBFetchRosterByPassportIdReq builder];
}
- (PBFetchRosterByPassportIdReqBuilder*) toBuilder {
  return [PBFetchRosterByPassportIdReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.passportIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passportId", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRosterByPassportIdReq class]]) {
    return NO;
  }
  PBFetchRosterByPassportIdReq *otherMessage = other;
  return
      [self.passportIdArray isEqualToArray:otherMessage.passportIdArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.passportIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRosterByPassportIdReqBuilder()
@property (strong) PBFetchRosterByPassportIdReq* result;
@end

@implementation PBFetchRosterByPassportIdReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRosterByPassportIdReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRosterByPassportIdReqBuilder*) clear {
  self.result = [[PBFetchRosterByPassportIdReq alloc] init];
  return self;
}
- (PBFetchRosterByPassportIdReqBuilder*) clone {
  return [PBFetchRosterByPassportIdReq builderWithPrototype:result];
}
- (PBFetchRosterByPassportIdReq*) defaultInstance {
  return [PBFetchRosterByPassportIdReq defaultInstance];
}
- (PBFetchRosterByPassportIdReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRosterByPassportIdReq*) buildPartial {
  PBFetchRosterByPassportIdReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRosterByPassportIdReqBuilder*) mergeFrom:(PBFetchRosterByPassportIdReq*) other {
  if (other == [PBFetchRosterByPassportIdReq defaultInstance]) {
    return self;
  }
  if (other.passportIdArray.count > 0) {
    if (result.passportIdArray == nil) {
      result.passportIdArray = [other.passportIdArray copy];
    } else {
      [result.passportIdArray appendArray:other.passportIdArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRosterByPassportIdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRosterByPassportIdReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addPassportId:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)passportId {
  return result.passportIdArray;
}
- (SInt64)passportIdAtIndex:(NSUInteger)index {
  return [result passportIdAtIndex:index];
}
- (PBFetchRosterByPassportIdReqBuilder *)addPassportId:(SInt64)value {
  if (result.passportIdArray == nil) {
    result.passportIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.passportIdArray addInt64:value];
  return self;
}
- (PBFetchRosterByPassportIdReqBuilder *)setPassportIdArray:(NSArray *)array {
  result.passportIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchRosterByPassportIdReqBuilder *)setPassportIdValues:(const SInt64 *)values count:(NSUInteger)count {
  result.passportIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchRosterByPassportIdReqBuilder *)clearPassportId {
  result.passportIdArray = nil;
  return self;
}
@end

@interface PBFetchRosterByPassportIdResp ()
@property (strong) NSMutableArray * rostersArray;
@end

@implementation PBFetchRosterByPassportIdResp

@synthesize rostersArray;
@dynamic rosters;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchRosterByPassportIdResp* defaultPBFetchRosterByPassportIdRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRosterByPassportIdResp class]) {
    defaultPBFetchRosterByPassportIdRespInstance = [[PBFetchRosterByPassportIdResp alloc] init];
  }
}
+ (PBFetchRosterByPassportIdResp*) defaultInstance {
  return defaultPBFetchRosterByPassportIdRespInstance;
}
- (PBFetchRosterByPassportIdResp*) defaultInstance {
  return defaultPBFetchRosterByPassportIdRespInstance;
}
- (NSArray *)rosters {
  return rostersArray;
}
- (PBRoster*)rostersAtIndex:(NSUInteger)index {
  return [rostersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRosterByPassportIdResp*) parseFromData:(NSData*) data {
  return (PBFetchRosterByPassportIdResp*)[[[PBFetchRosterByPassportIdResp builder] mergeFromData:data] build];
}
+ (PBFetchRosterByPassportIdResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterByPassportIdResp*)[[[PBFetchRosterByPassportIdResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterByPassportIdResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRosterByPassportIdResp*)[[[PBFetchRosterByPassportIdResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRosterByPassportIdResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterByPassportIdResp*)[[[PBFetchRosterByPassportIdResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterByPassportIdResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRosterByPassportIdResp*)[[[PBFetchRosterByPassportIdResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRosterByPassportIdResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterByPassportIdResp*)[[[PBFetchRosterByPassportIdResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterByPassportIdRespBuilder*) builder {
  return [[PBFetchRosterByPassportIdRespBuilder alloc] init];
}
+ (PBFetchRosterByPassportIdRespBuilder*) builderWithPrototype:(PBFetchRosterByPassportIdResp*) prototype {
  return [[PBFetchRosterByPassportIdResp builder] mergeFrom:prototype];
}
- (PBFetchRosterByPassportIdRespBuilder*) builder {
  return [PBFetchRosterByPassportIdResp builder];
}
- (PBFetchRosterByPassportIdRespBuilder*) toBuilder {
  return [PBFetchRosterByPassportIdResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rosters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRosterByPassportIdResp class]]) {
    return NO;
  }
  PBFetchRosterByPassportIdResp *otherMessage = other;
  return
      [self.rostersArray isEqualToArray:otherMessage.rostersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRosterByPassportIdRespBuilder()
@property (strong) PBFetchRosterByPassportIdResp* result;
@end

@implementation PBFetchRosterByPassportIdRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRosterByPassportIdResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRosterByPassportIdRespBuilder*) clear {
  self.result = [[PBFetchRosterByPassportIdResp alloc] init];
  return self;
}
- (PBFetchRosterByPassportIdRespBuilder*) clone {
  return [PBFetchRosterByPassportIdResp builderWithPrototype:result];
}
- (PBFetchRosterByPassportIdResp*) defaultInstance {
  return [PBFetchRosterByPassportIdResp defaultInstance];
}
- (PBFetchRosterByPassportIdResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRosterByPassportIdResp*) buildPartial {
  PBFetchRosterByPassportIdResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRosterByPassportIdRespBuilder*) mergeFrom:(PBFetchRosterByPassportIdResp*) other {
  if (other == [PBFetchRosterByPassportIdResp defaultInstance]) {
    return self;
  }
  if (other.rostersArray.count > 0) {
    if (result.rostersArray == nil) {
      result.rostersArray = [[NSMutableArray alloc] initWithArray:other.rostersArray];
    } else {
      [result.rostersArray addObjectsFromArray:other.rostersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRosterByPassportIdRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRosterByPassportIdRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRosterBuilder* subBuilder = [PBRoster builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRosters:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)rosters {
  return result.rostersArray;
}
- (PBRoster*)rostersAtIndex:(NSUInteger)index {
  return [result rostersAtIndex:index];
}
- (PBFetchRosterByPassportIdRespBuilder *)addRosters:(PBRoster*)value {
  if (result.rostersArray == nil) {
    result.rostersArray = [[NSMutableArray alloc]init];
  }
  [result.rostersArray addObject:value];
  return self;
}
- (PBFetchRosterByPassportIdRespBuilder *)setRostersArray:(NSArray *)array {
  result.rostersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchRosterByPassportIdRespBuilder *)clearRosters {
  result.rostersArray = nil;
  return self;
}
@end

@interface PBFetchChangedRosterReq ()
@property SInt64 myPassportId;
@property SInt64 maxUpdatedAt;
@end

@implementation PBFetchChangedRosterReq

- (BOOL) hasMyPassportId {
  return !!hasMyPassportId_;
}
- (void) setHasMyPassportId:(BOOL) value_ {
  hasMyPassportId_ = !!value_;
}
@synthesize myPassportId;
- (BOOL) hasMaxUpdatedAt {
  return !!hasMaxUpdatedAt_;
}
- (void) setHasMaxUpdatedAt:(BOOL) value_ {
  hasMaxUpdatedAt_ = !!value_;
}
@synthesize maxUpdatedAt;
- (id) init {
  if ((self = [super init])) {
    self.myPassportId = 0L;
    self.maxUpdatedAt = 0L;
  }
  return self;
}
static PBFetchChangedRosterReq* defaultPBFetchChangedRosterReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchChangedRosterReq class]) {
    defaultPBFetchChangedRosterReqInstance = [[PBFetchChangedRosterReq alloc] init];
  }
}
+ (PBFetchChangedRosterReq*) defaultInstance {
  return defaultPBFetchChangedRosterReqInstance;
}
- (PBFetchChangedRosterReq*) defaultInstance {
  return defaultPBFetchChangedRosterReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMyPassportId) {
    [output writeSInt64:1 value:self.myPassportId];
  }
  if (self.hasMaxUpdatedAt) {
    [output writeSInt64:2 value:self.maxUpdatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyPassportId) {
    size_ += computeSInt64Size(1, self.myPassportId);
  }
  if (self.hasMaxUpdatedAt) {
    size_ += computeSInt64Size(2, self.maxUpdatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchChangedRosterReq*) parseFromData:(NSData*) data {
  return (PBFetchChangedRosterReq*)[[[PBFetchChangedRosterReq builder] mergeFromData:data] build];
}
+ (PBFetchChangedRosterReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedRosterReq*)[[[PBFetchChangedRosterReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedRosterReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchChangedRosterReq*)[[[PBFetchChangedRosterReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchChangedRosterReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedRosterReq*)[[[PBFetchChangedRosterReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedRosterReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchChangedRosterReq*)[[[PBFetchChangedRosterReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchChangedRosterReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedRosterReq*)[[[PBFetchChangedRosterReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedRosterReqBuilder*) builder {
  return [[PBFetchChangedRosterReqBuilder alloc] init];
}
+ (PBFetchChangedRosterReqBuilder*) builderWithPrototype:(PBFetchChangedRosterReq*) prototype {
  return [[PBFetchChangedRosterReq builder] mergeFrom:prototype];
}
- (PBFetchChangedRosterReqBuilder*) builder {
  return [PBFetchChangedRosterReq builder];
}
- (PBFetchChangedRosterReqBuilder*) toBuilder {
  return [PBFetchChangedRosterReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMyPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myPassportId", [NSNumber numberWithLongLong:self.myPassportId]];
  }
  if (self.hasMaxUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxUpdatedAt", [NSNumber numberWithLongLong:self.maxUpdatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchChangedRosterReq class]]) {
    return NO;
  }
  PBFetchChangedRosterReq *otherMessage = other;
  return
      self.hasMyPassportId == otherMessage.hasMyPassportId &&
      (!self.hasMyPassportId || self.myPassportId == otherMessage.myPassportId) &&
      self.hasMaxUpdatedAt == otherMessage.hasMaxUpdatedAt &&
      (!self.hasMaxUpdatedAt || self.maxUpdatedAt == otherMessage.maxUpdatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMyPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myPassportId] hash];
  }
  if (self.hasMaxUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxUpdatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchChangedRosterReqBuilder()
@property (strong) PBFetchChangedRosterReq* result;
@end

@implementation PBFetchChangedRosterReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchChangedRosterReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchChangedRosterReqBuilder*) clear {
  self.result = [[PBFetchChangedRosterReq alloc] init];
  return self;
}
- (PBFetchChangedRosterReqBuilder*) clone {
  return [PBFetchChangedRosterReq builderWithPrototype:result];
}
- (PBFetchChangedRosterReq*) defaultInstance {
  return [PBFetchChangedRosterReq defaultInstance];
}
- (PBFetchChangedRosterReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchChangedRosterReq*) buildPartial {
  PBFetchChangedRosterReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchChangedRosterReqBuilder*) mergeFrom:(PBFetchChangedRosterReq*) other {
  if (other == [PBFetchChangedRosterReq defaultInstance]) {
    return self;
  }
  if (other.hasMyPassportId) {
    [self setMyPassportId:other.myPassportId];
  }
  if (other.hasMaxUpdatedAt) {
    [self setMaxUpdatedAt:other.maxUpdatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchChangedRosterReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchChangedRosterReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyPassportId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setMaxUpdatedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasMyPassportId {
  return result.hasMyPassportId;
}
- (SInt64) myPassportId {
  return result.myPassportId;
}
- (PBFetchChangedRosterReqBuilder*) setMyPassportId:(SInt64) value {
  result.hasMyPassportId = YES;
  result.myPassportId = value;
  return self;
}
- (PBFetchChangedRosterReqBuilder*) clearMyPassportId {
  result.hasMyPassportId = NO;
  result.myPassportId = 0L;
  return self;
}
- (BOOL) hasMaxUpdatedAt {
  return result.hasMaxUpdatedAt;
}
- (SInt64) maxUpdatedAt {
  return result.maxUpdatedAt;
}
- (PBFetchChangedRosterReqBuilder*) setMaxUpdatedAt:(SInt64) value {
  result.hasMaxUpdatedAt = YES;
  result.maxUpdatedAt = value;
  return self;
}
- (PBFetchChangedRosterReqBuilder*) clearMaxUpdatedAt {
  result.hasMaxUpdatedAt = NO;
  result.maxUpdatedAt = 0L;
  return self;
}
@end

@interface PBFetchChangedRosterResp ()
@property (strong) NSMutableArray * rostersArray;
@end

@implementation PBFetchChangedRosterResp

@synthesize rostersArray;
@dynamic rosters;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchChangedRosterResp* defaultPBFetchChangedRosterRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchChangedRosterResp class]) {
    defaultPBFetchChangedRosterRespInstance = [[PBFetchChangedRosterResp alloc] init];
  }
}
+ (PBFetchChangedRosterResp*) defaultInstance {
  return defaultPBFetchChangedRosterRespInstance;
}
- (PBFetchChangedRosterResp*) defaultInstance {
  return defaultPBFetchChangedRosterRespInstance;
}
- (NSArray *)rosters {
  return rostersArray;
}
- (PBRoster*)rostersAtIndex:(NSUInteger)index {
  return [rostersArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchChangedRosterResp*) parseFromData:(NSData*) data {
  return (PBFetchChangedRosterResp*)[[[PBFetchChangedRosterResp builder] mergeFromData:data] build];
}
+ (PBFetchChangedRosterResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedRosterResp*)[[[PBFetchChangedRosterResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedRosterResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchChangedRosterResp*)[[[PBFetchChangedRosterResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchChangedRosterResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedRosterResp*)[[[PBFetchChangedRosterResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedRosterResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchChangedRosterResp*)[[[PBFetchChangedRosterResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchChangedRosterResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedRosterResp*)[[[PBFetchChangedRosterResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedRosterRespBuilder*) builder {
  return [[PBFetchChangedRosterRespBuilder alloc] init];
}
+ (PBFetchChangedRosterRespBuilder*) builderWithPrototype:(PBFetchChangedRosterResp*) prototype {
  return [[PBFetchChangedRosterResp builder] mergeFrom:prototype];
}
- (PBFetchChangedRosterRespBuilder*) builder {
  return [PBFetchChangedRosterResp builder];
}
- (PBFetchChangedRosterRespBuilder*) toBuilder {
  return [PBFetchChangedRosterResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rosters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchChangedRosterResp class]]) {
    return NO;
  }
  PBFetchChangedRosterResp *otherMessage = other;
  return
      [self.rostersArray isEqualToArray:otherMessage.rostersArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchChangedRosterRespBuilder()
@property (strong) PBFetchChangedRosterResp* result;
@end

@implementation PBFetchChangedRosterRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchChangedRosterResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchChangedRosterRespBuilder*) clear {
  self.result = [[PBFetchChangedRosterResp alloc] init];
  return self;
}
- (PBFetchChangedRosterRespBuilder*) clone {
  return [PBFetchChangedRosterResp builderWithPrototype:result];
}
- (PBFetchChangedRosterResp*) defaultInstance {
  return [PBFetchChangedRosterResp defaultInstance];
}
- (PBFetchChangedRosterResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchChangedRosterResp*) buildPartial {
  PBFetchChangedRosterResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchChangedRosterRespBuilder*) mergeFrom:(PBFetchChangedRosterResp*) other {
  if (other == [PBFetchChangedRosterResp defaultInstance]) {
    return self;
  }
  if (other.rostersArray.count > 0) {
    if (result.rostersArray == nil) {
      result.rostersArray = [[NSMutableArray alloc] initWithArray:other.rostersArray];
    } else {
      [result.rostersArray addObjectsFromArray:other.rostersArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchChangedRosterRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchChangedRosterRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRosterBuilder* subBuilder = [PBRoster builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRosters:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)rosters {
  return result.rostersArray;
}
- (PBRoster*)rostersAtIndex:(NSUInteger)index {
  return [result rostersAtIndex:index];
}
- (PBFetchChangedRosterRespBuilder *)addRosters:(PBRoster*)value {
  if (result.rostersArray == nil) {
    result.rostersArray = [[NSMutableArray alloc]init];
  }
  [result.rostersArray addObject:value];
  return self;
}
- (PBFetchChangedRosterRespBuilder *)setRostersArray:(NSArray *)array {
  result.rostersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchChangedRosterRespBuilder *)clearRosters {
  result.rostersArray = nil;
  return self;
}
@end

@interface PBFetchRosterRequestReq ()
@property SInt64 myPassportId;
@property SInt64 maxUpdatedAt;
@end

@implementation PBFetchRosterRequestReq

- (BOOL) hasMyPassportId {
  return !!hasMyPassportId_;
}
- (void) setHasMyPassportId:(BOOL) value_ {
  hasMyPassportId_ = !!value_;
}
@synthesize myPassportId;
- (BOOL) hasMaxUpdatedAt {
  return !!hasMaxUpdatedAt_;
}
- (void) setHasMaxUpdatedAt:(BOOL) value_ {
  hasMaxUpdatedAt_ = !!value_;
}
@synthesize maxUpdatedAt;
- (id) init {
  if ((self = [super init])) {
    self.myPassportId = 0L;
    self.maxUpdatedAt = 0L;
  }
  return self;
}
static PBFetchRosterRequestReq* defaultPBFetchRosterRequestReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRosterRequestReq class]) {
    defaultPBFetchRosterRequestReqInstance = [[PBFetchRosterRequestReq alloc] init];
  }
}
+ (PBFetchRosterRequestReq*) defaultInstance {
  return defaultPBFetchRosterRequestReqInstance;
}
- (PBFetchRosterRequestReq*) defaultInstance {
  return defaultPBFetchRosterRequestReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMyPassportId) {
    [output writeSInt64:1 value:self.myPassportId];
  }
  if (self.hasMaxUpdatedAt) {
    [output writeSInt64:2 value:self.maxUpdatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyPassportId) {
    size_ += computeSInt64Size(1, self.myPassportId);
  }
  if (self.hasMaxUpdatedAt) {
    size_ += computeSInt64Size(2, self.maxUpdatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRosterRequestReq*) parseFromData:(NSData*) data {
  return (PBFetchRosterRequestReq*)[[[PBFetchRosterRequestReq builder] mergeFromData:data] build];
}
+ (PBFetchRosterRequestReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterRequestReq*)[[[PBFetchRosterRequestReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterRequestReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRosterRequestReq*)[[[PBFetchRosterRequestReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchRosterRequestReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterRequestReq*)[[[PBFetchRosterRequestReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterRequestReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRosterRequestReq*)[[[PBFetchRosterRequestReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRosterRequestReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterRequestReq*)[[[PBFetchRosterRequestReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterRequestReqBuilder*) builder {
  return [[PBFetchRosterRequestReqBuilder alloc] init];
}
+ (PBFetchRosterRequestReqBuilder*) builderWithPrototype:(PBFetchRosterRequestReq*) prototype {
  return [[PBFetchRosterRequestReq builder] mergeFrom:prototype];
}
- (PBFetchRosterRequestReqBuilder*) builder {
  return [PBFetchRosterRequestReq builder];
}
- (PBFetchRosterRequestReqBuilder*) toBuilder {
  return [PBFetchRosterRequestReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMyPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myPassportId", [NSNumber numberWithLongLong:self.myPassportId]];
  }
  if (self.hasMaxUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxUpdatedAt", [NSNumber numberWithLongLong:self.maxUpdatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRosterRequestReq class]]) {
    return NO;
  }
  PBFetchRosterRequestReq *otherMessage = other;
  return
      self.hasMyPassportId == otherMessage.hasMyPassportId &&
      (!self.hasMyPassportId || self.myPassportId == otherMessage.myPassportId) &&
      self.hasMaxUpdatedAt == otherMessage.hasMaxUpdatedAt &&
      (!self.hasMaxUpdatedAt || self.maxUpdatedAt == otherMessage.maxUpdatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMyPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myPassportId] hash];
  }
  if (self.hasMaxUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxUpdatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRosterRequestReqBuilder()
@property (strong) PBFetchRosterRequestReq* result;
@end

@implementation PBFetchRosterRequestReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRosterRequestReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRosterRequestReqBuilder*) clear {
  self.result = [[PBFetchRosterRequestReq alloc] init];
  return self;
}
- (PBFetchRosterRequestReqBuilder*) clone {
  return [PBFetchRosterRequestReq builderWithPrototype:result];
}
- (PBFetchRosterRequestReq*) defaultInstance {
  return [PBFetchRosterRequestReq defaultInstance];
}
- (PBFetchRosterRequestReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRosterRequestReq*) buildPartial {
  PBFetchRosterRequestReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRosterRequestReqBuilder*) mergeFrom:(PBFetchRosterRequestReq*) other {
  if (other == [PBFetchRosterRequestReq defaultInstance]) {
    return self;
  }
  if (other.hasMyPassportId) {
    [self setMyPassportId:other.myPassportId];
  }
  if (other.hasMaxUpdatedAt) {
    [self setMaxUpdatedAt:other.maxUpdatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRosterRequestReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRosterRequestReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyPassportId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setMaxUpdatedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasMyPassportId {
  return result.hasMyPassportId;
}
- (SInt64) myPassportId {
  return result.myPassportId;
}
- (PBFetchRosterRequestReqBuilder*) setMyPassportId:(SInt64) value {
  result.hasMyPassportId = YES;
  result.myPassportId = value;
  return self;
}
- (PBFetchRosterRequestReqBuilder*) clearMyPassportId {
  result.hasMyPassportId = NO;
  result.myPassportId = 0L;
  return self;
}
- (BOOL) hasMaxUpdatedAt {
  return result.hasMaxUpdatedAt;
}
- (SInt64) maxUpdatedAt {
  return result.maxUpdatedAt;
}
- (PBFetchRosterRequestReqBuilder*) setMaxUpdatedAt:(SInt64) value {
  result.hasMaxUpdatedAt = YES;
  result.maxUpdatedAt = value;
  return self;
}
- (PBFetchRosterRequestReqBuilder*) clearMaxUpdatedAt {
  result.hasMaxUpdatedAt = NO;
  result.maxUpdatedAt = 0L;
  return self;
}
@end

@interface PBFetchRosterRequestResp ()
@property (strong) NSMutableArray * requestsArray;
@end

@implementation PBFetchRosterRequestResp

@synthesize requestsArray;
@dynamic requests;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchRosterRequestResp* defaultPBFetchRosterRequestRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchRosterRequestResp class]) {
    defaultPBFetchRosterRequestRespInstance = [[PBFetchRosterRequestResp alloc] init];
  }
}
+ (PBFetchRosterRequestResp*) defaultInstance {
  return defaultPBFetchRosterRequestRespInstance;
}
- (PBFetchRosterRequestResp*) defaultInstance {
  return defaultPBFetchRosterRequestRespInstance;
}
- (NSArray *)requests {
  return requestsArray;
}
- (PBRosterRequest*)requestsAtIndex:(NSUInteger)index {
  return [requestsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchRosterRequestResp*) parseFromData:(NSData*) data {
  return (PBFetchRosterRequestResp*)[[[PBFetchRosterRequestResp builder] mergeFromData:data] build];
}
+ (PBFetchRosterRequestResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterRequestResp*)[[[PBFetchRosterRequestResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterRequestResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchRosterRequestResp*)[[[PBFetchRosterRequestResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchRosterRequestResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterRequestResp*)[[[PBFetchRosterRequestResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterRequestResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchRosterRequestResp*)[[[PBFetchRosterRequestResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchRosterRequestResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchRosterRequestResp*)[[[PBFetchRosterRequestResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchRosterRequestRespBuilder*) builder {
  return [[PBFetchRosterRequestRespBuilder alloc] init];
}
+ (PBFetchRosterRequestRespBuilder*) builderWithPrototype:(PBFetchRosterRequestResp*) prototype {
  return [[PBFetchRosterRequestResp builder] mergeFrom:prototype];
}
- (PBFetchRosterRequestRespBuilder*) builder {
  return [PBFetchRosterRequestResp builder];
}
- (PBFetchRosterRequestRespBuilder*) toBuilder {
  return [PBFetchRosterRequestResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"requests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchRosterRequestResp class]]) {
    return NO;
  }
  PBFetchRosterRequestResp *otherMessage = other;
  return
      [self.requestsArray isEqualToArray:otherMessage.requestsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchRosterRequestRespBuilder()
@property (strong) PBFetchRosterRequestResp* result;
@end

@implementation PBFetchRosterRequestRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchRosterRequestResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchRosterRequestRespBuilder*) clear {
  self.result = [[PBFetchRosterRequestResp alloc] init];
  return self;
}
- (PBFetchRosterRequestRespBuilder*) clone {
  return [PBFetchRosterRequestResp builderWithPrototype:result];
}
- (PBFetchRosterRequestResp*) defaultInstance {
  return [PBFetchRosterRequestResp defaultInstance];
}
- (PBFetchRosterRequestResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchRosterRequestResp*) buildPartial {
  PBFetchRosterRequestResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchRosterRequestRespBuilder*) mergeFrom:(PBFetchRosterRequestResp*) other {
  if (other == [PBFetchRosterRequestResp defaultInstance]) {
    return self;
  }
  if (other.requestsArray.count > 0) {
    if (result.requestsArray == nil) {
      result.requestsArray = [[NSMutableArray alloc] initWithArray:other.requestsArray];
    } else {
      [result.requestsArray addObjectsFromArray:other.requestsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchRosterRequestRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchRosterRequestRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRosterRequestBuilder* subBuilder = [PBRosterRequest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequests:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)requests {
  return result.requestsArray;
}
- (PBRosterRequest*)requestsAtIndex:(NSUInteger)index {
  return [result requestsAtIndex:index];
}
- (PBFetchRosterRequestRespBuilder *)addRequests:(PBRosterRequest*)value {
  if (result.requestsArray == nil) {
    result.requestsArray = [[NSMutableArray alloc]init];
  }
  [result.requestsArray addObject:value];
  return self;
}
- (PBFetchRosterRequestRespBuilder *)setRequestsArray:(NSArray *)array {
  result.requestsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchRosterRequestRespBuilder *)clearRequests {
  result.requestsArray = nil;
  return self;
}
@end

@interface PBRosterChangedNotify ()
@property (strong) NSMutableArray * rostersArray;
@property (strong) NSMutableArray * requestsArray;
@end

@implementation PBRosterChangedNotify

@synthesize rostersArray;
@dynamic rosters;
@synthesize requestsArray;
@dynamic requests;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBRosterChangedNotify* defaultPBRosterChangedNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBRosterChangedNotify class]) {
    defaultPBRosterChangedNotifyInstance = [[PBRosterChangedNotify alloc] init];
  }
}
+ (PBRosterChangedNotify*) defaultInstance {
  return defaultPBRosterChangedNotifyInstance;
}
- (PBRosterChangedNotify*) defaultInstance {
  return defaultPBRosterChangedNotifyInstance;
}
- (NSArray *)rosters {
  return rostersArray;
}
- (PBRoster*)rostersAtIndex:(NSUInteger)index {
  return [rostersArray objectAtIndex:index];
}
- (NSArray *)requests {
  return requestsArray;
}
- (PBRosterRequest*)requestsAtIndex:(NSUInteger)index {
  return [requestsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBRosterChangedNotify*) parseFromData:(NSData*) data {
  return (PBRosterChangedNotify*)[[[PBRosterChangedNotify builder] mergeFromData:data] build];
}
+ (PBRosterChangedNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRosterChangedNotify*)[[[PBRosterChangedNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBRosterChangedNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBRosterChangedNotify*)[[[PBRosterChangedNotify builder] mergeFromInputStream:input] build];
}
+ (PBRosterChangedNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRosterChangedNotify*)[[[PBRosterChangedNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRosterChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBRosterChangedNotify*)[[[PBRosterChangedNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBRosterChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBRosterChangedNotify*)[[[PBRosterChangedNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBRosterChangedNotifyBuilder*) builder {
  return [[PBRosterChangedNotifyBuilder alloc] init];
}
+ (PBRosterChangedNotifyBuilder*) builderWithPrototype:(PBRosterChangedNotify*) prototype {
  return [[PBRosterChangedNotify builder] mergeFrom:prototype];
}
- (PBRosterChangedNotifyBuilder*) builder {
  return [PBRosterChangedNotify builder];
}
- (PBRosterChangedNotifyBuilder*) toBuilder {
  return [PBRosterChangedNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rosters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"requests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBRosterChangedNotify class]]) {
    return NO;
  }
  PBRosterChangedNotify *otherMessage = other;
  return
      [self.rostersArray isEqualToArray:otherMessage.rostersArray] &&
      [self.requestsArray isEqualToArray:otherMessage.requestsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.rostersArray enumerateObjectsUsingBlock:^(PBRoster *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.requestsArray enumerateObjectsUsingBlock:^(PBRosterRequest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBRosterChangedNotifyBuilder()
@property (strong) PBRosterChangedNotify* result;
@end

@implementation PBRosterChangedNotifyBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBRosterChangedNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBRosterChangedNotifyBuilder*) clear {
  self.result = [[PBRosterChangedNotify alloc] init];
  return self;
}
- (PBRosterChangedNotifyBuilder*) clone {
  return [PBRosterChangedNotify builderWithPrototype:result];
}
- (PBRosterChangedNotify*) defaultInstance {
  return [PBRosterChangedNotify defaultInstance];
}
- (PBRosterChangedNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBRosterChangedNotify*) buildPartial {
  PBRosterChangedNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBRosterChangedNotifyBuilder*) mergeFrom:(PBRosterChangedNotify*) other {
  if (other == [PBRosterChangedNotify defaultInstance]) {
    return self;
  }
  if (other.rostersArray.count > 0) {
    if (result.rostersArray == nil) {
      result.rostersArray = [[NSMutableArray alloc] initWithArray:other.rostersArray];
    } else {
      [result.rostersArray addObjectsFromArray:other.rostersArray];
    }
  }
  if (other.requestsArray.count > 0) {
    if (result.requestsArray == nil) {
      result.requestsArray = [[NSMutableArray alloc] initWithArray:other.requestsArray];
    } else {
      [result.requestsArray addObjectsFromArray:other.requestsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBRosterChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBRosterChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBRosterBuilder* subBuilder = [PBRoster builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRosters:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PBRosterRequestBuilder* subBuilder = [PBRosterRequest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequests:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)rosters {
  return result.rostersArray;
}
- (PBRoster*)rostersAtIndex:(NSUInteger)index {
  return [result rostersAtIndex:index];
}
- (PBRosterChangedNotifyBuilder *)addRosters:(PBRoster*)value {
  if (result.rostersArray == nil) {
    result.rostersArray = [[NSMutableArray alloc]init];
  }
  [result.rostersArray addObject:value];
  return self;
}
- (PBRosterChangedNotifyBuilder *)setRostersArray:(NSArray *)array {
  result.rostersArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBRosterChangedNotifyBuilder *)clearRosters {
  result.rostersArray = nil;
  return self;
}
- (NSMutableArray *)requests {
  return result.requestsArray;
}
- (PBRosterRequest*)requestsAtIndex:(NSUInteger)index {
  return [result requestsAtIndex:index];
}
- (PBRosterChangedNotifyBuilder *)addRequests:(PBRosterRequest*)value {
  if (result.requestsArray == nil) {
    result.requestsArray = [[NSMutableArray alloc]init];
  }
  [result.requestsArray addObject:value];
  return self;
}
- (PBRosterChangedNotifyBuilder *)setRequestsArray:(NSArray *)array {
  result.requestsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBRosterChangedNotifyBuilder *)clearRequests {
  result.requestsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
