// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Park.pb.h"
// @@protoc_insertion_point(imports)

@implementation ParkRoot
static id<PBExtensionField> ParkRoot_fetchParkMembersReq = nil;
static id<PBExtensionField> ParkRoot_fetchParkMembersResp = nil;
static id<PBExtensionField> ParkRoot_fetchUserParksReq = nil;
static id<PBExtensionField> ParkRoot_fetchUserParksResp = nil;
static id<PBExtensionField> ParkRoot_parkMembersChangedNotify = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ParkRoot class]) {
    ParkRoot_fetchParkMembersReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:500
                                      defaultValue:[PBFetchParkMembersReq defaultInstance]
                               messageOrGroupClass:[PBFetchParkMembersReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    ParkRoot_fetchParkMembersResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:501
                                      defaultValue:[PBFetchParkMembersResp defaultInstance]
                               messageOrGroupClass:[PBFetchParkMembersResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    ParkRoot_fetchUserParksReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:502
                                      defaultValue:[PBFetchUserParksReq defaultInstance]
                               messageOrGroupClass:[PBFetchUserParksReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    ParkRoot_fetchUserParksResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:503
                                      defaultValue:[PBFetchUserParksResp defaultInstance]
                               messageOrGroupClass:[PBFetchUserParksResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    ParkRoot_parkMembersChangedNotify =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:550
                                      defaultValue:[PBParkMembersChangedNotify defaultInstance]
                               messageOrGroupClass:[PBParkMembersChangedNotify class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FrameRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:ParkRoot_fetchParkMembersReq];
  [registry addExtension:ParkRoot_fetchParkMembersResp];
  [registry addExtension:ParkRoot_fetchUserParksReq];
  [registry addExtension:ParkRoot_fetchUserParksResp];
  [registry addExtension:ParkRoot_parkMembersChangedNotify];
}
+ (id<PBExtensionField>) fetchParkMembersReq {
  return ParkRoot_fetchParkMembersReq;
}
+ (id<PBExtensionField>) fetchParkMembersResp {
  return ParkRoot_fetchParkMembersResp;
}
+ (id<PBExtensionField>) fetchUserParksReq {
  return ParkRoot_fetchUserParksReq;
}
+ (id<PBExtensionField>) fetchUserParksResp {
  return ParkRoot_fetchUserParksResp;
}
+ (id<PBExtensionField>) parkMembersChangedNotify {
  return ParkRoot_parkMembersChangedNotify;
}
@end

@interface PBParkItem ()
@property SInt64 parkId;
@property (strong) PBAppendableArray * memberIdsArray;
@end

@implementation PBParkItem

- (BOOL) hasParkId {
  return !!hasParkId_;
}
- (void) setHasParkId:(BOOL) value_ {
  hasParkId_ = !!value_;
}
@synthesize parkId;
@synthesize memberIdsArray;
@dynamic memberIds;
- (id) init {
  if ((self = [super init])) {
    self.parkId = 0L;
  }
  return self;
}
static PBParkItem* defaultPBParkItemInstance = nil;
+ (void) initialize {
  if (self == [PBParkItem class]) {
    defaultPBParkItemInstance = [[PBParkItem alloc] init];
  }
}
+ (PBParkItem*) defaultInstance {
  return defaultPBParkItemInstance;
}
- (PBParkItem*) defaultInstance {
  return defaultPBParkItemInstance;
}
- (PBArray *)memberIds {
  return memberIdsArray;
}
- (SInt64)memberIdsAtIndex:(NSUInteger)index {
  return [memberIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasParkId) {
    [output writeSInt64:1 value:self.parkId];
  }
  const NSUInteger memberIdsArrayCount = self.memberIdsArray.count;
  if (memberIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.memberIdsArray.data;
    for (NSUInteger i = 0; i < memberIdsArrayCount; ++i) {
      [output writeSInt64:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasParkId) {
    size_ += computeSInt64Size(1, self.parkId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.memberIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.memberIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBParkItem*) parseFromData:(NSData*) data {
  return (PBParkItem*)[[[PBParkItem builder] mergeFromData:data] build];
}
+ (PBParkItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkItem*)[[[PBParkItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBParkItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBParkItem*)[[[PBParkItem builder] mergeFromInputStream:input] build];
}
+ (PBParkItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkItem*)[[[PBParkItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBParkItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBParkItem*)[[[PBParkItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBParkItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkItem*)[[[PBParkItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBParkItemBuilder*) builder {
  return [[PBParkItemBuilder alloc] init];
}
+ (PBParkItemBuilder*) builderWithPrototype:(PBParkItem*) prototype {
  return [[PBParkItem builder] mergeFrom:prototype];
}
- (PBParkItemBuilder*) builder {
  return [PBParkItem builder];
}
- (PBParkItemBuilder*) toBuilder {
  return [PBParkItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasParkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkId", [NSNumber numberWithLongLong:self.parkId]];
  }
  [self.memberIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"memberIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBParkItem class]]) {
    return NO;
  }
  PBParkItem *otherMessage = other;
  return
      self.hasParkId == otherMessage.hasParkId &&
      (!self.hasParkId || self.parkId == otherMessage.parkId) &&
      [self.memberIdsArray isEqualToArray:otherMessage.memberIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasParkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parkId] hash];
  }
  [self.memberIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBParkItemBuilder()
@property (strong) PBParkItem* result;
@end

@implementation PBParkItemBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBParkItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBParkItemBuilder*) clear {
  self.result = [[PBParkItem alloc] init];
  return self;
}
- (PBParkItemBuilder*) clone {
  return [PBParkItem builderWithPrototype:result];
}
- (PBParkItem*) defaultInstance {
  return [PBParkItem defaultInstance];
}
- (PBParkItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBParkItem*) buildPartial {
  PBParkItem* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBParkItemBuilder*) mergeFrom:(PBParkItem*) other {
  if (other == [PBParkItem defaultInstance]) {
    return self;
  }
  if (other.hasParkId) {
    [self setParkId:other.parkId];
  }
  if (other.memberIdsArray.count > 0) {
    if (result.memberIdsArray == nil) {
      result.memberIdsArray = [other.memberIdsArray copy];
    } else {
      [result.memberIdsArray appendArray:other.memberIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBParkItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBParkItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setParkId:[input readSInt64]];
        break;
      }
      case 16: {
        [self addMemberIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasParkId {
  return result.hasParkId;
}
- (SInt64) parkId {
  return result.parkId;
}
- (PBParkItemBuilder*) setParkId:(SInt64) value {
  result.hasParkId = YES;
  result.parkId = value;
  return self;
}
- (PBParkItemBuilder*) clearParkId {
  result.hasParkId = NO;
  result.parkId = 0L;
  return self;
}
- (PBAppendableArray *)memberIds {
  return result.memberIdsArray;
}
- (SInt64)memberIdsAtIndex:(NSUInteger)index {
  return [result memberIdsAtIndex:index];
}
- (PBParkItemBuilder *)addMemberIds:(SInt64)value {
  if (result.memberIdsArray == nil) {
    result.memberIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.memberIdsArray addInt64:value];
  return self;
}
- (PBParkItemBuilder *)setMemberIdsArray:(NSArray *)array {
  result.memberIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBParkItemBuilder *)setMemberIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.memberIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBParkItemBuilder *)clearMemberIds {
  result.memberIdsArray = nil;
  return self;
}
@end

@interface PBFetchParkMembersReq ()
@property SInt64 parkId;
@end

@implementation PBFetchParkMembersReq

- (BOOL) hasParkId {
  return !!hasParkId_;
}
- (void) setHasParkId:(BOOL) value_ {
  hasParkId_ = !!value_;
}
@synthesize parkId;
- (id) init {
  if ((self = [super init])) {
    self.parkId = 0L;
  }
  return self;
}
static PBFetchParkMembersReq* defaultPBFetchParkMembersReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchParkMembersReq class]) {
    defaultPBFetchParkMembersReqInstance = [[PBFetchParkMembersReq alloc] init];
  }
}
+ (PBFetchParkMembersReq*) defaultInstance {
  return defaultPBFetchParkMembersReqInstance;
}
- (PBFetchParkMembersReq*) defaultInstance {
  return defaultPBFetchParkMembersReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasParkId) {
    [output writeSInt64:1 value:self.parkId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasParkId) {
    size_ += computeSInt64Size(1, self.parkId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchParkMembersReq*) parseFromData:(NSData*) data {
  return (PBFetchParkMembersReq*)[[[PBFetchParkMembersReq builder] mergeFromData:data] build];
}
+ (PBFetchParkMembersReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchParkMembersReq*)[[[PBFetchParkMembersReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchParkMembersReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchParkMembersReq*)[[[PBFetchParkMembersReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchParkMembersReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchParkMembersReq*)[[[PBFetchParkMembersReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchParkMembersReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchParkMembersReq*)[[[PBFetchParkMembersReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchParkMembersReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchParkMembersReq*)[[[PBFetchParkMembersReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchParkMembersReqBuilder*) builder {
  return [[PBFetchParkMembersReqBuilder alloc] init];
}
+ (PBFetchParkMembersReqBuilder*) builderWithPrototype:(PBFetchParkMembersReq*) prototype {
  return [[PBFetchParkMembersReq builder] mergeFrom:prototype];
}
- (PBFetchParkMembersReqBuilder*) builder {
  return [PBFetchParkMembersReq builder];
}
- (PBFetchParkMembersReqBuilder*) toBuilder {
  return [PBFetchParkMembersReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasParkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkId", [NSNumber numberWithLongLong:self.parkId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchParkMembersReq class]]) {
    return NO;
  }
  PBFetchParkMembersReq *otherMessage = other;
  return
      self.hasParkId == otherMessage.hasParkId &&
      (!self.hasParkId || self.parkId == otherMessage.parkId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasParkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parkId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchParkMembersReqBuilder()
@property (strong) PBFetchParkMembersReq* result;
@end

@implementation PBFetchParkMembersReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchParkMembersReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchParkMembersReqBuilder*) clear {
  self.result = [[PBFetchParkMembersReq alloc] init];
  return self;
}
- (PBFetchParkMembersReqBuilder*) clone {
  return [PBFetchParkMembersReq builderWithPrototype:result];
}
- (PBFetchParkMembersReq*) defaultInstance {
  return [PBFetchParkMembersReq defaultInstance];
}
- (PBFetchParkMembersReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchParkMembersReq*) buildPartial {
  PBFetchParkMembersReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchParkMembersReqBuilder*) mergeFrom:(PBFetchParkMembersReq*) other {
  if (other == [PBFetchParkMembersReq defaultInstance]) {
    return self;
  }
  if (other.hasParkId) {
    [self setParkId:other.parkId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchParkMembersReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchParkMembersReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setParkId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasParkId {
  return result.hasParkId;
}
- (SInt64) parkId {
  return result.parkId;
}
- (PBFetchParkMembersReqBuilder*) setParkId:(SInt64) value {
  result.hasParkId = YES;
  result.parkId = value;
  return self;
}
- (PBFetchParkMembersReqBuilder*) clearParkId {
  result.hasParkId = NO;
  result.parkId = 0L;
  return self;
}
@end

@interface PBFetchParkMembersResp ()
@property (strong) PBParkItem* item;
@end

@implementation PBFetchParkMembersResp

- (BOOL) hasItem {
  return !!hasItem_;
}
- (void) setHasItem:(BOOL) value_ {
  hasItem_ = !!value_;
}
@synthesize item;
- (id) init {
  if ((self = [super init])) {
    self.item = [PBParkItem defaultInstance];
  }
  return self;
}
static PBFetchParkMembersResp* defaultPBFetchParkMembersRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchParkMembersResp class]) {
    defaultPBFetchParkMembersRespInstance = [[PBFetchParkMembersResp alloc] init];
  }
}
+ (PBFetchParkMembersResp*) defaultInstance {
  return defaultPBFetchParkMembersRespInstance;
}
- (PBFetchParkMembersResp*) defaultInstance {
  return defaultPBFetchParkMembersRespInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItem) {
    [output writeMessage:1 value:self.item];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItem) {
    size_ += computeMessageSize(1, self.item);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchParkMembersResp*) parseFromData:(NSData*) data {
  return (PBFetchParkMembersResp*)[[[PBFetchParkMembersResp builder] mergeFromData:data] build];
}
+ (PBFetchParkMembersResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchParkMembersResp*)[[[PBFetchParkMembersResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchParkMembersResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchParkMembersResp*)[[[PBFetchParkMembersResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchParkMembersResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchParkMembersResp*)[[[PBFetchParkMembersResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchParkMembersResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchParkMembersResp*)[[[PBFetchParkMembersResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchParkMembersResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchParkMembersResp*)[[[PBFetchParkMembersResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchParkMembersRespBuilder*) builder {
  return [[PBFetchParkMembersRespBuilder alloc] init];
}
+ (PBFetchParkMembersRespBuilder*) builderWithPrototype:(PBFetchParkMembersResp*) prototype {
  return [[PBFetchParkMembersResp builder] mergeFrom:prototype];
}
- (PBFetchParkMembersRespBuilder*) builder {
  return [PBFetchParkMembersResp builder];
}
- (PBFetchParkMembersRespBuilder*) toBuilder {
  return [PBFetchParkMembersResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItem) {
    [output appendFormat:@"%@%@ {\n", indent, @"item"];
    [self.item writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchParkMembersResp class]]) {
    return NO;
  }
  PBFetchParkMembersResp *otherMessage = other;
  return
      self.hasItem == otherMessage.hasItem &&
      (!self.hasItem || [self.item isEqual:otherMessage.item]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasItem) {
    hashCode = hashCode * 31 + [self.item hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchParkMembersRespBuilder()
@property (strong) PBFetchParkMembersResp* result;
@end

@implementation PBFetchParkMembersRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchParkMembersResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchParkMembersRespBuilder*) clear {
  self.result = [[PBFetchParkMembersResp alloc] init];
  return self;
}
- (PBFetchParkMembersRespBuilder*) clone {
  return [PBFetchParkMembersResp builderWithPrototype:result];
}
- (PBFetchParkMembersResp*) defaultInstance {
  return [PBFetchParkMembersResp defaultInstance];
}
- (PBFetchParkMembersResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchParkMembersResp*) buildPartial {
  PBFetchParkMembersResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchParkMembersRespBuilder*) mergeFrom:(PBFetchParkMembersResp*) other {
  if (other == [PBFetchParkMembersResp defaultInstance]) {
    return self;
  }
  if (other.hasItem) {
    [self mergeItem:other.item];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchParkMembersRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchParkMembersRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBParkItemBuilder* subBuilder = [PBParkItem builder];
        if (self.hasItem) {
          [subBuilder mergeFrom:self.item];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasItem {
  return result.hasItem;
}
- (PBParkItem*) item {
  return result.item;
}
- (PBFetchParkMembersRespBuilder*) setItem:(PBParkItem*) value {
  result.hasItem = YES;
  result.item = value;
  return self;
}
- (PBFetchParkMembersRespBuilder*) setItemBuilder:(PBParkItemBuilder*) builderForValue {
  return [self setItem:[builderForValue build]];
}
- (PBFetchParkMembersRespBuilder*) mergeItem:(PBParkItem*) value {
  if (result.hasItem &&
      result.item != [PBParkItem defaultInstance]) {
    result.item =
      [[[PBParkItem builderWithPrototype:result.item] mergeFrom:value] buildPartial];
  } else {
    result.item = value;
  }
  result.hasItem = YES;
  return self;
}
- (PBFetchParkMembersRespBuilder*) clearItem {
  result.hasItem = NO;
  result.item = [PBParkItem defaultInstance];
  return self;
}
@end

@interface PBParkMembersChangedNotify ()
@property (strong) NSMutableArray * parkChangesArray;
@end

@implementation PBParkMembersChangedNotify

@synthesize parkChangesArray;
@dynamic parkChanges;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBParkMembersChangedNotify* defaultPBParkMembersChangedNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBParkMembersChangedNotify class]) {
    defaultPBParkMembersChangedNotifyInstance = [[PBParkMembersChangedNotify alloc] init];
  }
}
+ (PBParkMembersChangedNotify*) defaultInstance {
  return defaultPBParkMembersChangedNotifyInstance;
}
- (PBParkMembersChangedNotify*) defaultInstance {
  return defaultPBParkMembersChangedNotifyInstance;
}
- (NSArray *)parkChanges {
  return parkChangesArray;
}
- (PBParkMembersChangedNotifyParkChanges*)parkChangesAtIndex:(NSUInteger)index {
  return [parkChangesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.parkChangesArray enumerateObjectsUsingBlock:^(PBParkMembersChangedNotifyParkChanges *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.parkChangesArray enumerateObjectsUsingBlock:^(PBParkMembersChangedNotifyParkChanges *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBParkMembersChangedNotify*) parseFromData:(NSData*) data {
  return (PBParkMembersChangedNotify*)[[[PBParkMembersChangedNotify builder] mergeFromData:data] build];
}
+ (PBParkMembersChangedNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkMembersChangedNotify*)[[[PBParkMembersChangedNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBParkMembersChangedNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBParkMembersChangedNotify*)[[[PBParkMembersChangedNotify builder] mergeFromInputStream:input] build];
}
+ (PBParkMembersChangedNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkMembersChangedNotify*)[[[PBParkMembersChangedNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBParkMembersChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBParkMembersChangedNotify*)[[[PBParkMembersChangedNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBParkMembersChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkMembersChangedNotify*)[[[PBParkMembersChangedNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBParkMembersChangedNotifyBuilder*) builder {
  return [[PBParkMembersChangedNotifyBuilder alloc] init];
}
+ (PBParkMembersChangedNotifyBuilder*) builderWithPrototype:(PBParkMembersChangedNotify*) prototype {
  return [[PBParkMembersChangedNotify builder] mergeFrom:prototype];
}
- (PBParkMembersChangedNotifyBuilder*) builder {
  return [PBParkMembersChangedNotify builder];
}
- (PBParkMembersChangedNotifyBuilder*) toBuilder {
  return [PBParkMembersChangedNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.parkChangesArray enumerateObjectsUsingBlock:^(PBParkMembersChangedNotifyParkChanges *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"parkChanges"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBParkMembersChangedNotify class]]) {
    return NO;
  }
  PBParkMembersChangedNotify *otherMessage = other;
  return
      [self.parkChangesArray isEqualToArray:otherMessage.parkChangesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.parkChangesArray enumerateObjectsUsingBlock:^(PBParkMembersChangedNotifyParkChanges *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBParkMembersChangedNotifyParkChanges ()
@property SInt64 parkId;
@property (strong) PBAppendableArray * addedMemberArray;
@property (strong) PBAppendableArray * removedMemberArray;
@end

@implementation PBParkMembersChangedNotifyParkChanges

- (BOOL) hasParkId {
  return !!hasParkId_;
}
- (void) setHasParkId:(BOOL) value_ {
  hasParkId_ = !!value_;
}
@synthesize parkId;
@synthesize addedMemberArray;
@dynamic addedMember;
@synthesize removedMemberArray;
@dynamic removedMember;
- (id) init {
  if ((self = [super init])) {
    self.parkId = 0L;
  }
  return self;
}
static PBParkMembersChangedNotifyParkChanges* defaultPBParkMembersChangedNotifyParkChangesInstance = nil;
+ (void) initialize {
  if (self == [PBParkMembersChangedNotifyParkChanges class]) {
    defaultPBParkMembersChangedNotifyParkChangesInstance = [[PBParkMembersChangedNotifyParkChanges alloc] init];
  }
}
+ (PBParkMembersChangedNotifyParkChanges*) defaultInstance {
  return defaultPBParkMembersChangedNotifyParkChangesInstance;
}
- (PBParkMembersChangedNotifyParkChanges*) defaultInstance {
  return defaultPBParkMembersChangedNotifyParkChangesInstance;
}
- (PBArray *)addedMember {
  return addedMemberArray;
}
- (SInt64)addedMemberAtIndex:(NSUInteger)index {
  return [addedMemberArray int64AtIndex:index];
}
- (PBArray *)removedMember {
  return removedMemberArray;
}
- (SInt64)removedMemberAtIndex:(NSUInteger)index {
  return [removedMemberArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasParkId) {
    [output writeSInt64:1 value:self.parkId];
  }
  const NSUInteger addedMemberArrayCount = self.addedMemberArray.count;
  if (addedMemberArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.addedMemberArray.data;
    for (NSUInteger i = 0; i < addedMemberArrayCount; ++i) {
      [output writeSInt64:2 value:values[i]];
    }
  }
  const NSUInteger removedMemberArrayCount = self.removedMemberArray.count;
  if (removedMemberArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.removedMemberArray.data;
    for (NSUInteger i = 0; i < removedMemberArrayCount; ++i) {
      [output writeSInt64:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasParkId) {
    size_ += computeSInt64Size(1, self.parkId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.addedMemberArray.count;
    const SInt64 *values = (const SInt64 *)self.addedMemberArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.removedMemberArray.count;
    const SInt64 *values = (const SInt64 *)self.removedMemberArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBParkMembersChangedNotifyParkChanges*) parseFromData:(NSData*) data {
  return (PBParkMembersChangedNotifyParkChanges*)[[[PBParkMembersChangedNotifyParkChanges builder] mergeFromData:data] build];
}
+ (PBParkMembersChangedNotifyParkChanges*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkMembersChangedNotifyParkChanges*)[[[PBParkMembersChangedNotifyParkChanges builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBParkMembersChangedNotifyParkChanges*) parseFromInputStream:(NSInputStream*) input {
  return (PBParkMembersChangedNotifyParkChanges*)[[[PBParkMembersChangedNotifyParkChanges builder] mergeFromInputStream:input] build];
}
+ (PBParkMembersChangedNotifyParkChanges*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkMembersChangedNotifyParkChanges*)[[[PBParkMembersChangedNotifyParkChanges builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBParkMembersChangedNotifyParkChanges*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBParkMembersChangedNotifyParkChanges*)[[[PBParkMembersChangedNotifyParkChanges builder] mergeFromCodedInputStream:input] build];
}
+ (PBParkMembersChangedNotifyParkChanges*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBParkMembersChangedNotifyParkChanges*)[[[PBParkMembersChangedNotifyParkChanges builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBParkMembersChangedNotifyParkChangesBuilder*) builder {
  return [[PBParkMembersChangedNotifyParkChangesBuilder alloc] init];
}
+ (PBParkMembersChangedNotifyParkChangesBuilder*) builderWithPrototype:(PBParkMembersChangedNotifyParkChanges*) prototype {
  return [[PBParkMembersChangedNotifyParkChanges builder] mergeFrom:prototype];
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) builder {
  return [PBParkMembersChangedNotifyParkChanges builder];
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) toBuilder {
  return [PBParkMembersChangedNotifyParkChanges builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasParkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkId", [NSNumber numberWithLongLong:self.parkId]];
  }
  [self.addedMemberArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addedMember", obj];
  }];
  [self.removedMemberArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"removedMember", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBParkMembersChangedNotifyParkChanges class]]) {
    return NO;
  }
  PBParkMembersChangedNotifyParkChanges *otherMessage = other;
  return
      self.hasParkId == otherMessage.hasParkId &&
      (!self.hasParkId || self.parkId == otherMessage.parkId) &&
      [self.addedMemberArray isEqualToArray:otherMessage.addedMemberArray] &&
      [self.removedMemberArray isEqualToArray:otherMessage.removedMemberArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasParkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parkId] hash];
  }
  [self.addedMemberArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.removedMemberArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBParkMembersChangedNotifyParkChangesBuilder()
@property (strong) PBParkMembersChangedNotifyParkChanges* result;
@end

@implementation PBParkMembersChangedNotifyParkChangesBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBParkMembersChangedNotifyParkChanges alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) clear {
  self.result = [[PBParkMembersChangedNotifyParkChanges alloc] init];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) clone {
  return [PBParkMembersChangedNotifyParkChanges builderWithPrototype:result];
}
- (PBParkMembersChangedNotifyParkChanges*) defaultInstance {
  return [PBParkMembersChangedNotifyParkChanges defaultInstance];
}
- (PBParkMembersChangedNotifyParkChanges*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBParkMembersChangedNotifyParkChanges*) buildPartial {
  PBParkMembersChangedNotifyParkChanges* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) mergeFrom:(PBParkMembersChangedNotifyParkChanges*) other {
  if (other == [PBParkMembersChangedNotifyParkChanges defaultInstance]) {
    return self;
  }
  if (other.hasParkId) {
    [self setParkId:other.parkId];
  }
  if (other.addedMemberArray.count > 0) {
    if (result.addedMemberArray == nil) {
      result.addedMemberArray = [other.addedMemberArray copy];
    } else {
      [result.addedMemberArray appendArray:other.addedMemberArray];
    }
  }
  if (other.removedMemberArray.count > 0) {
    if (result.removedMemberArray == nil) {
      result.removedMemberArray = [other.removedMemberArray copy];
    } else {
      [result.removedMemberArray appendArray:other.removedMemberArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setParkId:[input readSInt64]];
        break;
      }
      case 16: {
        [self addAddedMember:[input readSInt64]];
        break;
      }
      case 24: {
        [self addRemovedMember:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasParkId {
  return result.hasParkId;
}
- (SInt64) parkId {
  return result.parkId;
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) setParkId:(SInt64) value {
  result.hasParkId = YES;
  result.parkId = value;
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder*) clearParkId {
  result.hasParkId = NO;
  result.parkId = 0L;
  return self;
}
- (PBAppendableArray *)addedMember {
  return result.addedMemberArray;
}
- (SInt64)addedMemberAtIndex:(NSUInteger)index {
  return [result addedMemberAtIndex:index];
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)addAddedMember:(SInt64)value {
  if (result.addedMemberArray == nil) {
    result.addedMemberArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.addedMemberArray addInt64:value];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)setAddedMemberArray:(NSArray *)array {
  result.addedMemberArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)setAddedMemberValues:(const SInt64 *)values count:(NSUInteger)count {
  result.addedMemberArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)clearAddedMember {
  result.addedMemberArray = nil;
  return self;
}
- (PBAppendableArray *)removedMember {
  return result.removedMemberArray;
}
- (SInt64)removedMemberAtIndex:(NSUInteger)index {
  return [result removedMemberAtIndex:index];
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)addRemovedMember:(SInt64)value {
  if (result.removedMemberArray == nil) {
    result.removedMemberArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.removedMemberArray addInt64:value];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)setRemovedMemberArray:(NSArray *)array {
  result.removedMemberArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)setRemovedMemberValues:(const SInt64 *)values count:(NSUInteger)count {
  result.removedMemberArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBParkMembersChangedNotifyParkChangesBuilder *)clearRemovedMember {
  result.removedMemberArray = nil;
  return self;
}
@end

@interface PBParkMembersChangedNotifyBuilder()
@property (strong) PBParkMembersChangedNotify* result;
@end

@implementation PBParkMembersChangedNotifyBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBParkMembersChangedNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBParkMembersChangedNotifyBuilder*) clear {
  self.result = [[PBParkMembersChangedNotify alloc] init];
  return self;
}
- (PBParkMembersChangedNotifyBuilder*) clone {
  return [PBParkMembersChangedNotify builderWithPrototype:result];
}
- (PBParkMembersChangedNotify*) defaultInstance {
  return [PBParkMembersChangedNotify defaultInstance];
}
- (PBParkMembersChangedNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBParkMembersChangedNotify*) buildPartial {
  PBParkMembersChangedNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBParkMembersChangedNotifyBuilder*) mergeFrom:(PBParkMembersChangedNotify*) other {
  if (other == [PBParkMembersChangedNotify defaultInstance]) {
    return self;
  }
  if (other.parkChangesArray.count > 0) {
    if (result.parkChangesArray == nil) {
      result.parkChangesArray = [[NSMutableArray alloc] initWithArray:other.parkChangesArray];
    } else {
      [result.parkChangesArray addObjectsFromArray:other.parkChangesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBParkMembersChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBParkMembersChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBParkMembersChangedNotifyParkChangesBuilder* subBuilder = [PBParkMembersChangedNotifyParkChanges builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addParkChanges:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)parkChanges {
  return result.parkChangesArray;
}
- (PBParkMembersChangedNotifyParkChanges*)parkChangesAtIndex:(NSUInteger)index {
  return [result parkChangesAtIndex:index];
}
- (PBParkMembersChangedNotifyBuilder *)addParkChanges:(PBParkMembersChangedNotifyParkChanges*)value {
  if (result.parkChangesArray == nil) {
    result.parkChangesArray = [[NSMutableArray alloc]init];
  }
  [result.parkChangesArray addObject:value];
  return self;
}
- (PBParkMembersChangedNotifyBuilder *)setParkChangesArray:(NSArray *)array {
  result.parkChangesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBParkMembersChangedNotifyBuilder *)clearParkChanges {
  result.parkChangesArray = nil;
  return self;
}
@end

@interface PBUserParks ()
@property (strong) PBAppendableArray * parkIdArray;
@end

@implementation PBUserParks

@synthesize parkIdArray;
@dynamic parkId;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBUserParks* defaultPBUserParksInstance = nil;
+ (void) initialize {
  if (self == [PBUserParks class]) {
    defaultPBUserParksInstance = [[PBUserParks alloc] init];
  }
}
+ (PBUserParks*) defaultInstance {
  return defaultPBUserParksInstance;
}
- (PBUserParks*) defaultInstance {
  return defaultPBUserParksInstance;
}
- (PBArray *)parkId {
  return parkIdArray;
}
- (SInt64)parkIdAtIndex:(NSUInteger)index {
  return [parkIdArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger parkIdArrayCount = self.parkIdArray.count;
  if (parkIdArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.parkIdArray.data;
    for (NSUInteger i = 0; i < parkIdArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.parkIdArray.count;
    const SInt64 *values = (const SInt64 *)self.parkIdArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBUserParks*) parseFromData:(NSData*) data {
  return (PBUserParks*)[[[PBUserParks builder] mergeFromData:data] build];
}
+ (PBUserParks*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserParks*)[[[PBUserParks builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBUserParks*) parseFromInputStream:(NSInputStream*) input {
  return (PBUserParks*)[[[PBUserParks builder] mergeFromInputStream:input] build];
}
+ (PBUserParks*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserParks*)[[[PBUserParks builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserParks*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBUserParks*)[[[PBUserParks builder] mergeFromCodedInputStream:input] build];
}
+ (PBUserParks*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBUserParks*)[[[PBUserParks builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBUserParksBuilder*) builder {
  return [[PBUserParksBuilder alloc] init];
}
+ (PBUserParksBuilder*) builderWithPrototype:(PBUserParks*) prototype {
  return [[PBUserParks builder] mergeFrom:prototype];
}
- (PBUserParksBuilder*) builder {
  return [PBUserParks builder];
}
- (PBUserParksBuilder*) toBuilder {
  return [PBUserParks builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.parkIdArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkId", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBUserParks class]]) {
    return NO;
  }
  PBUserParks *otherMessage = other;
  return
      [self.parkIdArray isEqualToArray:otherMessage.parkIdArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.parkIdArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBUserParksBuilder()
@property (strong) PBUserParks* result;
@end

@implementation PBUserParksBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBUserParks alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBUserParksBuilder*) clear {
  self.result = [[PBUserParks alloc] init];
  return self;
}
- (PBUserParksBuilder*) clone {
  return [PBUserParks builderWithPrototype:result];
}
- (PBUserParks*) defaultInstance {
  return [PBUserParks defaultInstance];
}
- (PBUserParks*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBUserParks*) buildPartial {
  PBUserParks* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBUserParksBuilder*) mergeFrom:(PBUserParks*) other {
  if (other == [PBUserParks defaultInstance]) {
    return self;
  }
  if (other.parkIdArray.count > 0) {
    if (result.parkIdArray == nil) {
      result.parkIdArray = [other.parkIdArray copy];
    } else {
      [result.parkIdArray appendArray:other.parkIdArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBUserParksBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBUserParksBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addParkId:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)parkId {
  return result.parkIdArray;
}
- (SInt64)parkIdAtIndex:(NSUInteger)index {
  return [result parkIdAtIndex:index];
}
- (PBUserParksBuilder *)addParkId:(SInt64)value {
  if (result.parkIdArray == nil) {
    result.parkIdArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.parkIdArray addInt64:value];
  return self;
}
- (PBUserParksBuilder *)setParkIdArray:(NSArray *)array {
  result.parkIdArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBUserParksBuilder *)setParkIdValues:(const SInt64 *)values count:(NSUInteger)count {
  result.parkIdArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBUserParksBuilder *)clearParkId {
  result.parkIdArray = nil;
  return self;
}
@end

@interface PBFetchUserParksReq ()
@property SInt64 passportId;
@end

@implementation PBFetchUserParksReq

- (BOOL) hasPassportId {
  return !!hasPassportId_;
}
- (void) setHasPassportId:(BOOL) value_ {
  hasPassportId_ = !!value_;
}
@synthesize passportId;
- (id) init {
  if ((self = [super init])) {
    self.passportId = 0L;
  }
  return self;
}
static PBFetchUserParksReq* defaultPBFetchUserParksReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchUserParksReq class]) {
    defaultPBFetchUserParksReqInstance = [[PBFetchUserParksReq alloc] init];
  }
}
+ (PBFetchUserParksReq*) defaultInstance {
  return defaultPBFetchUserParksReqInstance;
}
- (PBFetchUserParksReq*) defaultInstance {
  return defaultPBFetchUserParksReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPassportId) {
    [output writeSInt64:1 value:self.passportId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPassportId) {
    size_ += computeSInt64Size(1, self.passportId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchUserParksReq*) parseFromData:(NSData*) data {
  return (PBFetchUserParksReq*)[[[PBFetchUserParksReq builder] mergeFromData:data] build];
}
+ (PBFetchUserParksReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserParksReq*)[[[PBFetchUserParksReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserParksReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchUserParksReq*)[[[PBFetchUserParksReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchUserParksReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserParksReq*)[[[PBFetchUserParksReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserParksReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchUserParksReq*)[[[PBFetchUserParksReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchUserParksReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserParksReq*)[[[PBFetchUserParksReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserParksReqBuilder*) builder {
  return [[PBFetchUserParksReqBuilder alloc] init];
}
+ (PBFetchUserParksReqBuilder*) builderWithPrototype:(PBFetchUserParksReq*) prototype {
  return [[PBFetchUserParksReq builder] mergeFrom:prototype];
}
- (PBFetchUserParksReqBuilder*) builder {
  return [PBFetchUserParksReq builder];
}
- (PBFetchUserParksReqBuilder*) toBuilder {
  return [PBFetchUserParksReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passportId", [NSNumber numberWithLongLong:self.passportId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchUserParksReq class]]) {
    return NO;
  }
  PBFetchUserParksReq *otherMessage = other;
  return
      self.hasPassportId == otherMessage.hasPassportId &&
      (!self.hasPassportId || self.passportId == otherMessage.passportId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.passportId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchUserParksReqBuilder()
@property (strong) PBFetchUserParksReq* result;
@end

@implementation PBFetchUserParksReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchUserParksReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchUserParksReqBuilder*) clear {
  self.result = [[PBFetchUserParksReq alloc] init];
  return self;
}
- (PBFetchUserParksReqBuilder*) clone {
  return [PBFetchUserParksReq builderWithPrototype:result];
}
- (PBFetchUserParksReq*) defaultInstance {
  return [PBFetchUserParksReq defaultInstance];
}
- (PBFetchUserParksReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchUserParksReq*) buildPartial {
  PBFetchUserParksReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchUserParksReqBuilder*) mergeFrom:(PBFetchUserParksReq*) other {
  if (other == [PBFetchUserParksReq defaultInstance]) {
    return self;
  }
  if (other.hasPassportId) {
    [self setPassportId:other.passportId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchUserParksReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchUserParksReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPassportId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPassportId {
  return result.hasPassportId;
}
- (SInt64) passportId {
  return result.passportId;
}
- (PBFetchUserParksReqBuilder*) setPassportId:(SInt64) value {
  result.hasPassportId = YES;
  result.passportId = value;
  return self;
}
- (PBFetchUserParksReqBuilder*) clearPassportId {
  result.hasPassportId = NO;
  result.passportId = 0L;
  return self;
}
@end

@interface PBFetchUserParksResp ()
@property (strong) PBAppendableArray * parkIdsArray;
@end

@implementation PBFetchUserParksResp

@synthesize parkIdsArray;
@dynamic parkIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchUserParksResp* defaultPBFetchUserParksRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchUserParksResp class]) {
    defaultPBFetchUserParksRespInstance = [[PBFetchUserParksResp alloc] init];
  }
}
+ (PBFetchUserParksResp*) defaultInstance {
  return defaultPBFetchUserParksRespInstance;
}
- (PBFetchUserParksResp*) defaultInstance {
  return defaultPBFetchUserParksRespInstance;
}
- (PBArray *)parkIds {
  return parkIdsArray;
}
- (SInt64)parkIdsAtIndex:(NSUInteger)index {
  return [parkIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger parkIdsArrayCount = self.parkIdsArray.count;
  if (parkIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.parkIdsArray.data;
    for (NSUInteger i = 0; i < parkIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.parkIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.parkIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchUserParksResp*) parseFromData:(NSData*) data {
  return (PBFetchUserParksResp*)[[[PBFetchUserParksResp builder] mergeFromData:data] build];
}
+ (PBFetchUserParksResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserParksResp*)[[[PBFetchUserParksResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserParksResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchUserParksResp*)[[[PBFetchUserParksResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchUserParksResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserParksResp*)[[[PBFetchUserParksResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserParksResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchUserParksResp*)[[[PBFetchUserParksResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchUserParksResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchUserParksResp*)[[[PBFetchUserParksResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchUserParksRespBuilder*) builder {
  return [[PBFetchUserParksRespBuilder alloc] init];
}
+ (PBFetchUserParksRespBuilder*) builderWithPrototype:(PBFetchUserParksResp*) prototype {
  return [[PBFetchUserParksResp builder] mergeFrom:prototype];
}
- (PBFetchUserParksRespBuilder*) builder {
  return [PBFetchUserParksResp builder];
}
- (PBFetchUserParksRespBuilder*) toBuilder {
  return [PBFetchUserParksResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.parkIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchUserParksResp class]]) {
    return NO;
  }
  PBFetchUserParksResp *otherMessage = other;
  return
      [self.parkIdsArray isEqualToArray:otherMessage.parkIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.parkIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchUserParksRespBuilder()
@property (strong) PBFetchUserParksResp* result;
@end

@implementation PBFetchUserParksRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchUserParksResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchUserParksRespBuilder*) clear {
  self.result = [[PBFetchUserParksResp alloc] init];
  return self;
}
- (PBFetchUserParksRespBuilder*) clone {
  return [PBFetchUserParksResp builderWithPrototype:result];
}
- (PBFetchUserParksResp*) defaultInstance {
  return [PBFetchUserParksResp defaultInstance];
}
- (PBFetchUserParksResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchUserParksResp*) buildPartial {
  PBFetchUserParksResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchUserParksRespBuilder*) mergeFrom:(PBFetchUserParksResp*) other {
  if (other == [PBFetchUserParksResp defaultInstance]) {
    return self;
  }
  if (other.parkIdsArray.count > 0) {
    if (result.parkIdsArray == nil) {
      result.parkIdsArray = [other.parkIdsArray copy];
    } else {
      [result.parkIdsArray appendArray:other.parkIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchUserParksRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchUserParksRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addParkIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)parkIds {
  return result.parkIdsArray;
}
- (SInt64)parkIdsAtIndex:(NSUInteger)index {
  return [result parkIdsAtIndex:index];
}
- (PBFetchUserParksRespBuilder *)addParkIds:(SInt64)value {
  if (result.parkIdsArray == nil) {
    result.parkIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.parkIdsArray addInt64:value];
  return self;
}
- (PBFetchUserParksRespBuilder *)setParkIdsArray:(NSArray *)array {
  result.parkIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchUserParksRespBuilder *)setParkIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.parkIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchUserParksRespBuilder *)clearParkIds {
  result.parkIdsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
