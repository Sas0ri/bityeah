// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Passport.pb.h"
// @@protoc_insertion_point(imports)

@implementation PassportRoot
static id<PBExtensionField> PassportRoot_fetchPassportReq = nil;
static id<PBExtensionField> PassportRoot_fetchPassportResp = nil;
static id<PBExtensionField> PassportRoot_fetchChangedPassportReq = nil;
static id<PBExtensionField> PassportRoot_fetchChangedPassportResp = nil;
static id<PBExtensionField> PassportRoot_passportChangedNofity = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PassportRoot class]) {
    PassportRoot_fetchPassportReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:100
                                      defaultValue:[PBFetchPassportReq defaultInstance]
                               messageOrGroupClass:[PBFetchPassportReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PassportRoot_fetchPassportResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:101
                                      defaultValue:[PBFetchPassportResp defaultInstance]
                               messageOrGroupClass:[PBFetchPassportResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PassportRoot_fetchChangedPassportReq =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:102
                                      defaultValue:[PBFetchChangedPassportReq defaultInstance]
                               messageOrGroupClass:[PBFetchChangedPassportReq class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PassportRoot_fetchChangedPassportResp =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:103
                                      defaultValue:[PBFetchChangedPassportResp defaultInstance]
                               messageOrGroupClass:[PBFetchChangedPassportResp class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PassportRoot_passportChangedNofity =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[PBFrame class]
                                       fieldNumber:150
                                      defaultValue:[PBPassportChangedNotify defaultInstance]
                               messageOrGroupClass:[PBPassportChangedNotify class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [FrameRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:PassportRoot_fetchPassportReq];
  [registry addExtension:PassportRoot_fetchPassportResp];
  [registry addExtension:PassportRoot_fetchChangedPassportReq];
  [registry addExtension:PassportRoot_fetchChangedPassportResp];
  [registry addExtension:PassportRoot_passportChangedNofity];
}
+ (id<PBExtensionField>) fetchPassportReq {
  return PassportRoot_fetchPassportReq;
}
+ (id<PBExtensionField>) fetchPassportResp {
  return PassportRoot_fetchPassportResp;
}
+ (id<PBExtensionField>) fetchChangedPassportReq {
  return PassportRoot_fetchChangedPassportReq;
}
+ (id<PBExtensionField>) fetchChangedPassportResp {
  return PassportRoot_fetchChangedPassportResp;
}
+ (id<PBExtensionField>) passportChangedNofity {
  return PassportRoot_passportChangedNofity;
}
@end

@interface PBPassport ()
@property SInt64 id;
@property (strong) NSString* mobile;
@property (strong) NSString* email;
@property (strong) NSString* password;
@property (strong) NSString* base64Password;
@property (strong) NSString* nickName;
@property (strong) NSString* realName;
@property (strong) NSString* signature;
@property (strong) NSString* avatar;
@property PBPassportGender gender;
@property (strong) NSString* district;
@property (strong) NSString* birthdate;
@property SInt64 createdAt;
@property SInt64 updatedAt;
@property PBPassportStatus status;
@end

@implementation PBPassport

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasMobile {
  return !!hasMobile_;
}
- (void) setHasMobile:(BOOL) value_ {
  hasMobile_ = !!value_;
}
@synthesize mobile;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value_ {
  hasEmail_ = !!value_;
}
@synthesize email;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value_ {
  hasPassword_ = !!value_;
}
@synthesize password;
- (BOOL) hasBase64Password {
  return !!hasBase64Password_;
}
- (void) setHasBase64Password:(BOOL) value_ {
  hasBase64Password_ = !!value_;
}
@synthesize base64Password;
- (BOOL) hasNickName {
  return !!hasNickName_;
}
- (void) setHasNickName:(BOOL) value_ {
  hasNickName_ = !!value_;
}
@synthesize nickName;
- (BOOL) hasRealName {
  return !!hasRealName_;
}
- (void) setHasRealName:(BOOL) value_ {
  hasRealName_ = !!value_;
}
@synthesize realName;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) value_ {
  hasSignature_ = !!value_;
}
@synthesize signature;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) value_ {
  hasAvatar_ = !!value_;
}
@synthesize avatar;
- (BOOL) hasGender {
  return !!hasGender_;
}
- (void) setHasGender:(BOOL) value_ {
  hasGender_ = !!value_;
}
@synthesize gender;
- (BOOL) hasDistrict {
  return !!hasDistrict_;
}
- (void) setHasDistrict:(BOOL) value_ {
  hasDistrict_ = !!value_;
}
@synthesize district;
- (BOOL) hasBirthdate {
  return !!hasBirthdate_;
}
- (void) setHasBirthdate:(BOOL) value_ {
  hasBirthdate_ = !!value_;
}
@synthesize birthdate;
- (BOOL) hasCreatedAt {
  return !!hasCreatedAt_;
}
- (void) setHasCreatedAt:(BOOL) value_ {
  hasCreatedAt_ = !!value_;
}
@synthesize createdAt;
- (BOOL) hasUpdatedAt {
  return !!hasUpdatedAt_;
}
- (void) setHasUpdatedAt:(BOOL) value_ {
  hasUpdatedAt_ = !!value_;
}
@synthesize updatedAt;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value_ {
  hasStatus_ = !!value_;
}
@synthesize status;
- (id) init {
  if ((self = [super init])) {
    self.id = 0L;
    self.mobile = @"";
    self.email = @"";
    self.password = @"";
    self.base64Password = @"";
    self.nickName = @"";
    self.realName = @"";
    self.signature = @"";
    self.avatar = @"";
    self.gender = PBPassportGenderGenderUnknow;
    self.district = @"";
    self.birthdate = @"";
    self.createdAt = 0L;
    self.updatedAt = 0L;
    self.status = PBPassportStatusStatusCommon;
  }
  return self;
}
static PBPassport* defaultPBPassportInstance = nil;
+ (void) initialize {
  if (self == [PBPassport class]) {
    defaultPBPassportInstance = [[PBPassport alloc] init];
  }
}
+ (PBPassport*) defaultInstance {
  return defaultPBPassportInstance;
}
- (PBPassport*) defaultInstance {
  return defaultPBPassportInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeSInt64:1 value:self.id];
  }
  if (self.hasMobile) {
    [output writeString:2 value:self.mobile];
  }
  if (self.hasEmail) {
    [output writeString:3 value:self.email];
  }
  if (self.hasPassword) {
    [output writeString:4 value:self.password];
  }
  if (self.hasBase64Password) {
    [output writeString:5 value:self.base64Password];
  }
  if (self.hasNickName) {
    [output writeString:6 value:self.nickName];
  }
  if (self.hasRealName) {
    [output writeString:7 value:self.realName];
  }
  if (self.hasSignature) {
    [output writeString:8 value:self.signature];
  }
  if (self.hasAvatar) {
    [output writeString:9 value:self.avatar];
  }
  if (self.hasGender) {
    [output writeEnum:10 value:self.gender];
  }
  if (self.hasDistrict) {
    [output writeString:11 value:self.district];
  }
  if (self.hasBirthdate) {
    [output writeString:12 value:self.birthdate];
  }
  if (self.hasCreatedAt) {
    [output writeSInt64:13 value:self.createdAt];
  }
  if (self.hasUpdatedAt) {
    [output writeSInt64:14 value:self.updatedAt];
  }
  if (self.hasStatus) {
    [output writeEnum:15 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeSInt64Size(1, self.id);
  }
  if (self.hasMobile) {
    size_ += computeStringSize(2, self.mobile);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(3, self.email);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(4, self.password);
  }
  if (self.hasBase64Password) {
    size_ += computeStringSize(5, self.base64Password);
  }
  if (self.hasNickName) {
    size_ += computeStringSize(6, self.nickName);
  }
  if (self.hasRealName) {
    size_ += computeStringSize(7, self.realName);
  }
  if (self.hasSignature) {
    size_ += computeStringSize(8, self.signature);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(9, self.avatar);
  }
  if (self.hasGender) {
    size_ += computeEnumSize(10, self.gender);
  }
  if (self.hasDistrict) {
    size_ += computeStringSize(11, self.district);
  }
  if (self.hasBirthdate) {
    size_ += computeStringSize(12, self.birthdate);
  }
  if (self.hasCreatedAt) {
    size_ += computeSInt64Size(13, self.createdAt);
  }
  if (self.hasUpdatedAt) {
    size_ += computeSInt64Size(14, self.updatedAt);
  }
  if (self.hasStatus) {
    size_ += computeEnumSize(15, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBPassport*) parseFromData:(NSData*) data {
  return (PBPassport*)[[[PBPassport builder] mergeFromData:data] build];
}
+ (PBPassport*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPassport*)[[[PBPassport builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPassport*) parseFromInputStream:(NSInputStream*) input {
  return (PBPassport*)[[[PBPassport builder] mergeFromInputStream:input] build];
}
+ (PBPassport*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPassport*)[[[PBPassport builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPassport*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPassport*)[[[PBPassport builder] mergeFromCodedInputStream:input] build];
}
+ (PBPassport*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPassport*)[[[PBPassport builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPassportBuilder*) builder {
  return [[PBPassportBuilder alloc] init];
}
+ (PBPassportBuilder*) builderWithPrototype:(PBPassport*) prototype {
  return [[PBPassport builder] mergeFrom:prototype];
}
- (PBPassportBuilder*) builder {
  return [PBPassport builder];
}
- (PBPassportBuilder*) toBuilder {
  return [PBPassport builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasMobile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobile", self.mobile];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasBase64Password) {
    [output appendFormat:@"%@%@: %@\n", indent, @"base64Password", self.base64Password];
  }
  if (self.hasNickName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickName", self.nickName];
  }
  if (self.hasRealName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"realName", self.realName];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasGender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gender", [NSNumber numberWithInteger:self.gender]];
  }
  if (self.hasDistrict) {
    [output appendFormat:@"%@%@: %@\n", indent, @"district", self.district];
  }
  if (self.hasBirthdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"birthdate", self.birthdate];
  }
  if (self.hasCreatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdAt", [NSNumber numberWithLongLong:self.createdAt]];
  }
  if (self.hasUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatedAt", [NSNumber numberWithLongLong:self.updatedAt]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBPassport class]]) {
    return NO;
  }
  PBPassport *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasMobile == otherMessage.hasMobile &&
      (!self.hasMobile || [self.mobile isEqual:otherMessage.mobile]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasBase64Password == otherMessage.hasBase64Password &&
      (!self.hasBase64Password || [self.base64Password isEqual:otherMessage.base64Password]) &&
      self.hasNickName == otherMessage.hasNickName &&
      (!self.hasNickName || [self.nickName isEqual:otherMessage.nickName]) &&
      self.hasRealName == otherMessage.hasRealName &&
      (!self.hasRealName || [self.realName isEqual:otherMessage.realName]) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasGender == otherMessage.hasGender &&
      (!self.hasGender || self.gender == otherMessage.gender) &&
      self.hasDistrict == otherMessage.hasDistrict &&
      (!self.hasDistrict || [self.district isEqual:otherMessage.district]) &&
      self.hasBirthdate == otherMessage.hasBirthdate &&
      (!self.hasBirthdate || [self.birthdate isEqual:otherMessage.birthdate]) &&
      self.hasCreatedAt == otherMessage.hasCreatedAt &&
      (!self.hasCreatedAt || self.createdAt == otherMessage.createdAt) &&
      self.hasUpdatedAt == otherMessage.hasUpdatedAt &&
      (!self.hasUpdatedAt || self.updatedAt == otherMessage.updatedAt) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasMobile) {
    hashCode = hashCode * 31 + [self.mobile hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasBase64Password) {
    hashCode = hashCode * 31 + [self.base64Password hash];
  }
  if (self.hasNickName) {
    hashCode = hashCode * 31 + [self.nickName hash];
  }
  if (self.hasRealName) {
    hashCode = hashCode * 31 + [self.realName hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasGender) {
    hashCode = hashCode * 31 + self.gender;
  }
  if (self.hasDistrict) {
    hashCode = hashCode * 31 + [self.district hash];
  }
  if (self.hasBirthdate) {
    hashCode = hashCode * 31 + [self.birthdate hash];
  }
  if (self.hasCreatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createdAt] hash];
  }
  if (self.hasUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.updatedAt] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBPassportGenderIsValidValue(PBPassportGender value) {
  switch (value) {
    case PBPassportGenderGenderUnknow:
    case PBPassportGenderGenderMale:
    case PBPassportGenderGenderFemale:
      return YES;
    default:
      return NO;
  }
}
BOOL PBPassportStatusIsValidValue(PBPassportStatus value) {
  switch (value) {
    case PBPassportStatusStatusCommon:
    case PBPassportStatusStatusFrozen:
      return YES;
    default:
      return NO;
  }
}
@interface PBPassportBuilder()
@property (strong) PBPassport* result;
@end

@implementation PBPassportBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBPassport alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPassportBuilder*) clear {
  self.result = [[PBPassport alloc] init];
  return self;
}
- (PBPassportBuilder*) clone {
  return [PBPassport builderWithPrototype:result];
}
- (PBPassport*) defaultInstance {
  return [PBPassport defaultInstance];
}
- (PBPassport*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPassport*) buildPartial {
  PBPassport* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBPassportBuilder*) mergeFrom:(PBPassport*) other {
  if (other == [PBPassport defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasMobile) {
    [self setMobile:other.mobile];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasBase64Password) {
    [self setBase64Password:other.base64Password];
  }
  if (other.hasNickName) {
    [self setNickName:other.nickName];
  }
  if (other.hasRealName) {
    [self setRealName:other.realName];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasGender) {
    [self setGender:other.gender];
  }
  if (other.hasDistrict) {
    [self setDistrict:other.district];
  }
  if (other.hasBirthdate) {
    [self setBirthdate:other.birthdate];
  }
  if (other.hasCreatedAt) {
    [self setCreatedAt:other.createdAt];
  }
  if (other.hasUpdatedAt) {
    [self setUpdatedAt:other.updatedAt];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPassportBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPassportBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readSInt64]];
        break;
      }
      case 18: {
        [self setMobile:[input readString]];
        break;
      }
      case 26: {
        [self setEmail:[input readString]];
        break;
      }
      case 34: {
        [self setPassword:[input readString]];
        break;
      }
      case 42: {
        [self setBase64Password:[input readString]];
        break;
      }
      case 50: {
        [self setNickName:[input readString]];
        break;
      }
      case 58: {
        [self setRealName:[input readString]];
        break;
      }
      case 66: {
        [self setSignature:[input readString]];
        break;
      }
      case 74: {
        [self setAvatar:[input readString]];
        break;
      }
      case 80: {
        PBPassportGender value = (PBPassportGender)[input readEnum];
        if (PBPassportGenderIsValidValue(value)) {
          [self setGender:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 90: {
        [self setDistrict:[input readString]];
        break;
      }
      case 98: {
        [self setBirthdate:[input readString]];
        break;
      }
      case 104: {
        [self setCreatedAt:[input readSInt64]];
        break;
      }
      case 112: {
        [self setUpdatedAt:[input readSInt64]];
        break;
      }
      case 120: {
        PBPassportStatus value = (PBPassportStatus)[input readEnum];
        if (PBPassportStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:15 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (SInt64) id {
  return result.id;
}
- (PBPassportBuilder*) setId:(SInt64) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (PBPassportBuilder*) clearId {
  result.hasId = NO;
  result.id = 0L;
  return self;
}
- (BOOL) hasMobile {
  return result.hasMobile;
}
- (NSString*) mobile {
  return result.mobile;
}
- (PBPassportBuilder*) setMobile:(NSString*) value {
  result.hasMobile = YES;
  result.mobile = value;
  return self;
}
- (PBPassportBuilder*) clearMobile {
  result.hasMobile = NO;
  result.mobile = @"";
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (PBPassportBuilder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (PBPassportBuilder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (PBPassportBuilder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (PBPassportBuilder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasBase64Password {
  return result.hasBase64Password;
}
- (NSString*) base64Password {
  return result.base64Password;
}
- (PBPassportBuilder*) setBase64Password:(NSString*) value {
  result.hasBase64Password = YES;
  result.base64Password = value;
  return self;
}
- (PBPassportBuilder*) clearBase64Password {
  result.hasBase64Password = NO;
  result.base64Password = @"";
  return self;
}
- (BOOL) hasNickName {
  return result.hasNickName;
}
- (NSString*) nickName {
  return result.nickName;
}
- (PBPassportBuilder*) setNickName:(NSString*) value {
  result.hasNickName = YES;
  result.nickName = value;
  return self;
}
- (PBPassportBuilder*) clearNickName {
  result.hasNickName = NO;
  result.nickName = @"";
  return self;
}
- (BOOL) hasRealName {
  return result.hasRealName;
}
- (NSString*) realName {
  return result.realName;
}
- (PBPassportBuilder*) setRealName:(NSString*) value {
  result.hasRealName = YES;
  result.realName = value;
  return self;
}
- (PBPassportBuilder*) clearRealName {
  result.hasRealName = NO;
  result.realName = @"";
  return self;
}
- (BOOL) hasSignature {
  return result.hasSignature;
}
- (NSString*) signature {
  return result.signature;
}
- (PBPassportBuilder*) setSignature:(NSString*) value {
  result.hasSignature = YES;
  result.signature = value;
  return self;
}
- (PBPassportBuilder*) clearSignature {
  result.hasSignature = NO;
  result.signature = @"";
  return self;
}
- (BOOL) hasAvatar {
  return result.hasAvatar;
}
- (NSString*) avatar {
  return result.avatar;
}
- (PBPassportBuilder*) setAvatar:(NSString*) value {
  result.hasAvatar = YES;
  result.avatar = value;
  return self;
}
- (PBPassportBuilder*) clearAvatar {
  result.hasAvatar = NO;
  result.avatar = @"";
  return self;
}
- (BOOL) hasGender {
  return result.hasGender;
}
- (PBPassportGender) gender {
  return result.gender;
}
- (PBPassportBuilder*) setGender:(PBPassportGender) value {
  result.hasGender = YES;
  result.gender = value;
  return self;
}
- (PBPassportBuilder*) clearGender {
  result.hasGender = NO;
  result.gender = PBPassportGenderGenderUnknow;
  return self;
}
- (BOOL) hasDistrict {
  return result.hasDistrict;
}
- (NSString*) district {
  return result.district;
}
- (PBPassportBuilder*) setDistrict:(NSString*) value {
  result.hasDistrict = YES;
  result.district = value;
  return self;
}
- (PBPassportBuilder*) clearDistrict {
  result.hasDistrict = NO;
  result.district = @"";
  return self;
}
- (BOOL) hasBirthdate {
  return result.hasBirthdate;
}
- (NSString*) birthdate {
  return result.birthdate;
}
- (PBPassportBuilder*) setBirthdate:(NSString*) value {
  result.hasBirthdate = YES;
  result.birthdate = value;
  return self;
}
- (PBPassportBuilder*) clearBirthdate {
  result.hasBirthdate = NO;
  result.birthdate = @"";
  return self;
}
- (BOOL) hasCreatedAt {
  return result.hasCreatedAt;
}
- (SInt64) createdAt {
  return result.createdAt;
}
- (PBPassportBuilder*) setCreatedAt:(SInt64) value {
  result.hasCreatedAt = YES;
  result.createdAt = value;
  return self;
}
- (PBPassportBuilder*) clearCreatedAt {
  result.hasCreatedAt = NO;
  result.createdAt = 0L;
  return self;
}
- (BOOL) hasUpdatedAt {
  return result.hasUpdatedAt;
}
- (SInt64) updatedAt {
  return result.updatedAt;
}
- (PBPassportBuilder*) setUpdatedAt:(SInt64) value {
  result.hasUpdatedAt = YES;
  result.updatedAt = value;
  return self;
}
- (PBPassportBuilder*) clearUpdatedAt {
  result.hasUpdatedAt = NO;
  result.updatedAt = 0L;
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (PBPassportStatus) status {
  return result.status;
}
- (PBPassportBuilder*) setStatus:(PBPassportStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (PBPassportBuilder*) clearStatus {
  result.hasStatus = NO;
  result.status = PBPassportStatusStatusCommon;
  return self;
}
@end

@interface PBFetchPassportReq ()
@property (strong) PBAppendableArray * passportIdsArray;
@end

@implementation PBFetchPassportReq

@synthesize passportIdsArray;
@dynamic passportIds;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchPassportReq* defaultPBFetchPassportReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchPassportReq class]) {
    defaultPBFetchPassportReqInstance = [[PBFetchPassportReq alloc] init];
  }
}
+ (PBFetchPassportReq*) defaultInstance {
  return defaultPBFetchPassportReqInstance;
}
- (PBFetchPassportReq*) defaultInstance {
  return defaultPBFetchPassportReqInstance;
}
- (PBArray *)passportIds {
  return passportIdsArray;
}
- (SInt64)passportIdsAtIndex:(NSUInteger)index {
  return [passportIdsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger passportIdsArrayCount = self.passportIdsArray.count;
  if (passportIdsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.passportIdsArray.data;
    for (NSUInteger i = 0; i < passportIdsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.passportIdsArray.count;
    const SInt64 *values = (const SInt64 *)self.passportIdsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchPassportReq*) parseFromData:(NSData*) data {
  return (PBFetchPassportReq*)[[[PBFetchPassportReq builder] mergeFromData:data] build];
}
+ (PBFetchPassportReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchPassportReq*)[[[PBFetchPassportReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchPassportReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchPassportReq*)[[[PBFetchPassportReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchPassportReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchPassportReq*)[[[PBFetchPassportReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchPassportReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchPassportReq*)[[[PBFetchPassportReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchPassportReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchPassportReq*)[[[PBFetchPassportReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchPassportReqBuilder*) builder {
  return [[PBFetchPassportReqBuilder alloc] init];
}
+ (PBFetchPassportReqBuilder*) builderWithPrototype:(PBFetchPassportReq*) prototype {
  return [[PBFetchPassportReq builder] mergeFrom:prototype];
}
- (PBFetchPassportReqBuilder*) builder {
  return [PBFetchPassportReq builder];
}
- (PBFetchPassportReqBuilder*) toBuilder {
  return [PBFetchPassportReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.passportIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passportIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchPassportReq class]]) {
    return NO;
  }
  PBFetchPassportReq *otherMessage = other;
  return
      [self.passportIdsArray isEqualToArray:otherMessage.passportIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.passportIdsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchPassportReqBuilder()
@property (strong) PBFetchPassportReq* result;
@end

@implementation PBFetchPassportReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchPassportReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchPassportReqBuilder*) clear {
  self.result = [[PBFetchPassportReq alloc] init];
  return self;
}
- (PBFetchPassportReqBuilder*) clone {
  return [PBFetchPassportReq builderWithPrototype:result];
}
- (PBFetchPassportReq*) defaultInstance {
  return [PBFetchPassportReq defaultInstance];
}
- (PBFetchPassportReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchPassportReq*) buildPartial {
  PBFetchPassportReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchPassportReqBuilder*) mergeFrom:(PBFetchPassportReq*) other {
  if (other == [PBFetchPassportReq defaultInstance]) {
    return self;
  }
  if (other.passportIdsArray.count > 0) {
    if (result.passportIdsArray == nil) {
      result.passportIdsArray = [other.passportIdsArray copy];
    } else {
      [result.passportIdsArray appendArray:other.passportIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchPassportReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchPassportReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addPassportIds:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)passportIds {
  return result.passportIdsArray;
}
- (SInt64)passportIdsAtIndex:(NSUInteger)index {
  return [result passportIdsAtIndex:index];
}
- (PBFetchPassportReqBuilder *)addPassportIds:(SInt64)value {
  if (result.passportIdsArray == nil) {
    result.passportIdsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.passportIdsArray addInt64:value];
  return self;
}
- (PBFetchPassportReqBuilder *)setPassportIdsArray:(NSArray *)array {
  result.passportIdsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchPassportReqBuilder *)setPassportIdsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.passportIdsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (PBFetchPassportReqBuilder *)clearPassportIds {
  result.passportIdsArray = nil;
  return self;
}
@end

@interface PBFetchPassportResp ()
@property (strong) NSMutableArray * passportsArray;
@end

@implementation PBFetchPassportResp

@synthesize passportsArray;
@dynamic passports;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchPassportResp* defaultPBFetchPassportRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchPassportResp class]) {
    defaultPBFetchPassportRespInstance = [[PBFetchPassportResp alloc] init];
  }
}
+ (PBFetchPassportResp*) defaultInstance {
  return defaultPBFetchPassportRespInstance;
}
- (PBFetchPassportResp*) defaultInstance {
  return defaultPBFetchPassportRespInstance;
}
- (NSArray *)passports {
  return passportsArray;
}
- (PBPassport*)passportsAtIndex:(NSUInteger)index {
  return [passportsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchPassportResp*) parseFromData:(NSData*) data {
  return (PBFetchPassportResp*)[[[PBFetchPassportResp builder] mergeFromData:data] build];
}
+ (PBFetchPassportResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchPassportResp*)[[[PBFetchPassportResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchPassportResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchPassportResp*)[[[PBFetchPassportResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchPassportResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchPassportResp*)[[[PBFetchPassportResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchPassportResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchPassportResp*)[[[PBFetchPassportResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchPassportResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchPassportResp*)[[[PBFetchPassportResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchPassportRespBuilder*) builder {
  return [[PBFetchPassportRespBuilder alloc] init];
}
+ (PBFetchPassportRespBuilder*) builderWithPrototype:(PBFetchPassportResp*) prototype {
  return [[PBFetchPassportResp builder] mergeFrom:prototype];
}
- (PBFetchPassportRespBuilder*) builder {
  return [PBFetchPassportResp builder];
}
- (PBFetchPassportRespBuilder*) toBuilder {
  return [PBFetchPassportResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"passports"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchPassportResp class]]) {
    return NO;
  }
  PBFetchPassportResp *otherMessage = other;
  return
      [self.passportsArray isEqualToArray:otherMessage.passportsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchPassportRespBuilder()
@property (strong) PBFetchPassportResp* result;
@end

@implementation PBFetchPassportRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchPassportResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchPassportRespBuilder*) clear {
  self.result = [[PBFetchPassportResp alloc] init];
  return self;
}
- (PBFetchPassportRespBuilder*) clone {
  return [PBFetchPassportResp builderWithPrototype:result];
}
- (PBFetchPassportResp*) defaultInstance {
  return [PBFetchPassportResp defaultInstance];
}
- (PBFetchPassportResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchPassportResp*) buildPartial {
  PBFetchPassportResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchPassportRespBuilder*) mergeFrom:(PBFetchPassportResp*) other {
  if (other == [PBFetchPassportResp defaultInstance]) {
    return self;
  }
  if (other.passportsArray.count > 0) {
    if (result.passportsArray == nil) {
      result.passportsArray = [[NSMutableArray alloc] initWithArray:other.passportsArray];
    } else {
      [result.passportsArray addObjectsFromArray:other.passportsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchPassportRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchPassportRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBPassportBuilder* subBuilder = [PBPassport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPassports:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)passports {
  return result.passportsArray;
}
- (PBPassport*)passportsAtIndex:(NSUInteger)index {
  return [result passportsAtIndex:index];
}
- (PBFetchPassportRespBuilder *)addPassports:(PBPassport*)value {
  if (result.passportsArray == nil) {
    result.passportsArray = [[NSMutableArray alloc]init];
  }
  [result.passportsArray addObject:value];
  return self;
}
- (PBFetchPassportRespBuilder *)setPassportsArray:(NSArray *)array {
  result.passportsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchPassportRespBuilder *)clearPassports {
  result.passportsArray = nil;
  return self;
}
@end

@interface PBFetchChangedPassportReq ()
@property SInt64 myPassportId;
@property SInt64 maxUpdatedAt;
@end

@implementation PBFetchChangedPassportReq

- (BOOL) hasMyPassportId {
  return !!hasMyPassportId_;
}
- (void) setHasMyPassportId:(BOOL) value_ {
  hasMyPassportId_ = !!value_;
}
@synthesize myPassportId;
- (BOOL) hasMaxUpdatedAt {
  return !!hasMaxUpdatedAt_;
}
- (void) setHasMaxUpdatedAt:(BOOL) value_ {
  hasMaxUpdatedAt_ = !!value_;
}
@synthesize maxUpdatedAt;
- (id) init {
  if ((self = [super init])) {
    self.myPassportId = 0L;
    self.maxUpdatedAt = 0L;
  }
  return self;
}
static PBFetchChangedPassportReq* defaultPBFetchChangedPassportReqInstance = nil;
+ (void) initialize {
  if (self == [PBFetchChangedPassportReq class]) {
    defaultPBFetchChangedPassportReqInstance = [[PBFetchChangedPassportReq alloc] init];
  }
}
+ (PBFetchChangedPassportReq*) defaultInstance {
  return defaultPBFetchChangedPassportReqInstance;
}
- (PBFetchChangedPassportReq*) defaultInstance {
  return defaultPBFetchChangedPassportReqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMyPassportId) {
    [output writeSInt64:1 value:self.myPassportId];
  }
  if (self.hasMaxUpdatedAt) {
    [output writeSInt64:2 value:self.maxUpdatedAt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMyPassportId) {
    size_ += computeSInt64Size(1, self.myPassportId);
  }
  if (self.hasMaxUpdatedAt) {
    size_ += computeSInt64Size(2, self.maxUpdatedAt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchChangedPassportReq*) parseFromData:(NSData*) data {
  return (PBFetchChangedPassportReq*)[[[PBFetchChangedPassportReq builder] mergeFromData:data] build];
}
+ (PBFetchChangedPassportReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedPassportReq*)[[[PBFetchChangedPassportReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedPassportReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchChangedPassportReq*)[[[PBFetchChangedPassportReq builder] mergeFromInputStream:input] build];
}
+ (PBFetchChangedPassportReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedPassportReq*)[[[PBFetchChangedPassportReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedPassportReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchChangedPassportReq*)[[[PBFetchChangedPassportReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchChangedPassportReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedPassportReq*)[[[PBFetchChangedPassportReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedPassportReqBuilder*) builder {
  return [[PBFetchChangedPassportReqBuilder alloc] init];
}
+ (PBFetchChangedPassportReqBuilder*) builderWithPrototype:(PBFetchChangedPassportReq*) prototype {
  return [[PBFetchChangedPassportReq builder] mergeFrom:prototype];
}
- (PBFetchChangedPassportReqBuilder*) builder {
  return [PBFetchChangedPassportReq builder];
}
- (PBFetchChangedPassportReqBuilder*) toBuilder {
  return [PBFetchChangedPassportReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMyPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"myPassportId", [NSNumber numberWithLongLong:self.myPassportId]];
  }
  if (self.hasMaxUpdatedAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxUpdatedAt", [NSNumber numberWithLongLong:self.maxUpdatedAt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchChangedPassportReq class]]) {
    return NO;
  }
  PBFetchChangedPassportReq *otherMessage = other;
  return
      self.hasMyPassportId == otherMessage.hasMyPassportId &&
      (!self.hasMyPassportId || self.myPassportId == otherMessage.myPassportId) &&
      self.hasMaxUpdatedAt == otherMessage.hasMaxUpdatedAt &&
      (!self.hasMaxUpdatedAt || self.maxUpdatedAt == otherMessage.maxUpdatedAt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMyPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.myPassportId] hash];
  }
  if (self.hasMaxUpdatedAt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.maxUpdatedAt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchChangedPassportReqBuilder()
@property (strong) PBFetchChangedPassportReq* result;
@end

@implementation PBFetchChangedPassportReqBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchChangedPassportReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchChangedPassportReqBuilder*) clear {
  self.result = [[PBFetchChangedPassportReq alloc] init];
  return self;
}
- (PBFetchChangedPassportReqBuilder*) clone {
  return [PBFetchChangedPassportReq builderWithPrototype:result];
}
- (PBFetchChangedPassportReq*) defaultInstance {
  return [PBFetchChangedPassportReq defaultInstance];
}
- (PBFetchChangedPassportReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchChangedPassportReq*) buildPartial {
  PBFetchChangedPassportReq* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchChangedPassportReqBuilder*) mergeFrom:(PBFetchChangedPassportReq*) other {
  if (other == [PBFetchChangedPassportReq defaultInstance]) {
    return self;
  }
  if (other.hasMyPassportId) {
    [self setMyPassportId:other.myPassportId];
  }
  if (other.hasMaxUpdatedAt) {
    [self setMaxUpdatedAt:other.maxUpdatedAt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchChangedPassportReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchChangedPassportReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMyPassportId:[input readSInt64]];
        break;
      }
      case 16: {
        [self setMaxUpdatedAt:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasMyPassportId {
  return result.hasMyPassportId;
}
- (SInt64) myPassportId {
  return result.myPassportId;
}
- (PBFetchChangedPassportReqBuilder*) setMyPassportId:(SInt64) value {
  result.hasMyPassportId = YES;
  result.myPassportId = value;
  return self;
}
- (PBFetchChangedPassportReqBuilder*) clearMyPassportId {
  result.hasMyPassportId = NO;
  result.myPassportId = 0L;
  return self;
}
- (BOOL) hasMaxUpdatedAt {
  return result.hasMaxUpdatedAt;
}
- (SInt64) maxUpdatedAt {
  return result.maxUpdatedAt;
}
- (PBFetchChangedPassportReqBuilder*) setMaxUpdatedAt:(SInt64) value {
  result.hasMaxUpdatedAt = YES;
  result.maxUpdatedAt = value;
  return self;
}
- (PBFetchChangedPassportReqBuilder*) clearMaxUpdatedAt {
  result.hasMaxUpdatedAt = NO;
  result.maxUpdatedAt = 0L;
  return self;
}
@end

@interface PBFetchChangedPassportResp ()
@property (strong) NSMutableArray * passportsArray;
@end

@implementation PBFetchChangedPassportResp

@synthesize passportsArray;
@dynamic passports;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBFetchChangedPassportResp* defaultPBFetchChangedPassportRespInstance = nil;
+ (void) initialize {
  if (self == [PBFetchChangedPassportResp class]) {
    defaultPBFetchChangedPassportRespInstance = [[PBFetchChangedPassportResp alloc] init];
  }
}
+ (PBFetchChangedPassportResp*) defaultInstance {
  return defaultPBFetchChangedPassportRespInstance;
}
- (PBFetchChangedPassportResp*) defaultInstance {
  return defaultPBFetchChangedPassportRespInstance;
}
- (NSArray *)passports {
  return passportsArray;
}
- (PBPassport*)passportsAtIndex:(NSUInteger)index {
  return [passportsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFetchChangedPassportResp*) parseFromData:(NSData*) data {
  return (PBFetchChangedPassportResp*)[[[PBFetchChangedPassportResp builder] mergeFromData:data] build];
}
+ (PBFetchChangedPassportResp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedPassportResp*)[[[PBFetchChangedPassportResp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedPassportResp*) parseFromInputStream:(NSInputStream*) input {
  return (PBFetchChangedPassportResp*)[[[PBFetchChangedPassportResp builder] mergeFromInputStream:input] build];
}
+ (PBFetchChangedPassportResp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedPassportResp*)[[[PBFetchChangedPassportResp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedPassportResp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFetchChangedPassportResp*)[[[PBFetchChangedPassportResp builder] mergeFromCodedInputStream:input] build];
}
+ (PBFetchChangedPassportResp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFetchChangedPassportResp*)[[[PBFetchChangedPassportResp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFetchChangedPassportRespBuilder*) builder {
  return [[PBFetchChangedPassportRespBuilder alloc] init];
}
+ (PBFetchChangedPassportRespBuilder*) builderWithPrototype:(PBFetchChangedPassportResp*) prototype {
  return [[PBFetchChangedPassportResp builder] mergeFrom:prototype];
}
- (PBFetchChangedPassportRespBuilder*) builder {
  return [PBFetchChangedPassportResp builder];
}
- (PBFetchChangedPassportRespBuilder*) toBuilder {
  return [PBFetchChangedPassportResp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"passports"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFetchChangedPassportResp class]]) {
    return NO;
  }
  PBFetchChangedPassportResp *otherMessage = other;
  return
      [self.passportsArray isEqualToArray:otherMessage.passportsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBFetchChangedPassportRespBuilder()
@property (strong) PBFetchChangedPassportResp* result;
@end

@implementation PBFetchChangedPassportRespBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFetchChangedPassportResp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBFetchChangedPassportRespBuilder*) clear {
  self.result = [[PBFetchChangedPassportResp alloc] init];
  return self;
}
- (PBFetchChangedPassportRespBuilder*) clone {
  return [PBFetchChangedPassportResp builderWithPrototype:result];
}
- (PBFetchChangedPassportResp*) defaultInstance {
  return [PBFetchChangedPassportResp defaultInstance];
}
- (PBFetchChangedPassportResp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFetchChangedPassportResp*) buildPartial {
  PBFetchChangedPassportResp* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFetchChangedPassportRespBuilder*) mergeFrom:(PBFetchChangedPassportResp*) other {
  if (other == [PBFetchChangedPassportResp defaultInstance]) {
    return self;
  }
  if (other.passportsArray.count > 0) {
    if (result.passportsArray == nil) {
      result.passportsArray = [[NSMutableArray alloc] initWithArray:other.passportsArray];
    } else {
      [result.passportsArray addObjectsFromArray:other.passportsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFetchChangedPassportRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFetchChangedPassportRespBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBPassportBuilder* subBuilder = [PBPassport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPassports:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)passports {
  return result.passportsArray;
}
- (PBPassport*)passportsAtIndex:(NSUInteger)index {
  return [result passportsAtIndex:index];
}
- (PBFetchChangedPassportRespBuilder *)addPassports:(PBPassport*)value {
  if (result.passportsArray == nil) {
    result.passportsArray = [[NSMutableArray alloc]init];
  }
  [result.passportsArray addObject:value];
  return self;
}
- (PBFetchChangedPassportRespBuilder *)setPassportsArray:(NSArray *)array {
  result.passportsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBFetchChangedPassportRespBuilder *)clearPassports {
  result.passportsArray = nil;
  return self;
}
@end

@interface PBPassportChangedNotify ()
@property (strong) NSMutableArray * passportsArray;
@end

@implementation PBPassportChangedNotify

@synthesize passportsArray;
@dynamic passports;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static PBPassportChangedNotify* defaultPBPassportChangedNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBPassportChangedNotify class]) {
    defaultPBPassportChangedNotifyInstance = [[PBPassportChangedNotify alloc] init];
  }
}
+ (PBPassportChangedNotify*) defaultInstance {
  return defaultPBPassportChangedNotifyInstance;
}
- (PBPassportChangedNotify*) defaultInstance {
  return defaultPBPassportChangedNotifyInstance;
}
- (NSArray *)passports {
  return passportsArray;
}
- (PBPassport*)passportsAtIndex:(NSUInteger)index {
  return [passportsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBPassportChangedNotify*) parseFromData:(NSData*) data {
  return (PBPassportChangedNotify*)[[[PBPassportChangedNotify builder] mergeFromData:data] build];
}
+ (PBPassportChangedNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPassportChangedNotify*)[[[PBPassportChangedNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBPassportChangedNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBPassportChangedNotify*)[[[PBPassportChangedNotify builder] mergeFromInputStream:input] build];
}
+ (PBPassportChangedNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPassportChangedNotify*)[[[PBPassportChangedNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPassportChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBPassportChangedNotify*)[[[PBPassportChangedNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBPassportChangedNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBPassportChangedNotify*)[[[PBPassportChangedNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBPassportChangedNotifyBuilder*) builder {
  return [[PBPassportChangedNotifyBuilder alloc] init];
}
+ (PBPassportChangedNotifyBuilder*) builderWithPrototype:(PBPassportChangedNotify*) prototype {
  return [[PBPassportChangedNotify builder] mergeFrom:prototype];
}
- (PBPassportChangedNotifyBuilder*) builder {
  return [PBPassportChangedNotify builder];
}
- (PBPassportChangedNotifyBuilder*) toBuilder {
  return [PBPassportChangedNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"passports"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBPassportChangedNotify class]]) {
    return NO;
  }
  PBPassportChangedNotify *otherMessage = other;
  return
      [self.passportsArray isEqualToArray:otherMessage.passportsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.passportsArray enumerateObjectsUsingBlock:^(PBPassport *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBPassportChangedNotifyBuilder()
@property (strong) PBPassportChangedNotify* result;
@end

@implementation PBPassportChangedNotifyBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBPassportChangedNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PBPassportChangedNotifyBuilder*) clear {
  self.result = [[PBPassportChangedNotify alloc] init];
  return self;
}
- (PBPassportChangedNotifyBuilder*) clone {
  return [PBPassportChangedNotify builderWithPrototype:result];
}
- (PBPassportChangedNotify*) defaultInstance {
  return [PBPassportChangedNotify defaultInstance];
}
- (PBPassportChangedNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBPassportChangedNotify*) buildPartial {
  PBPassportChangedNotify* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBPassportChangedNotifyBuilder*) mergeFrom:(PBPassportChangedNotify*) other {
  if (other == [PBPassportChangedNotify defaultInstance]) {
    return self;
  }
  if (other.passportsArray.count > 0) {
    if (result.passportsArray == nil) {
      result.passportsArray = [[NSMutableArray alloc] initWithArray:other.passportsArray];
    } else {
      [result.passportsArray addObjectsFromArray:other.passportsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBPassportChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBPassportChangedNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PBPassportBuilder* subBuilder = [PBPassport builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPassports:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)passports {
  return result.passportsArray;
}
- (PBPassport*)passportsAtIndex:(NSUInteger)index {
  return [result passportsAtIndex:index];
}
- (PBPassportChangedNotifyBuilder *)addPassports:(PBPassport*)value {
  if (result.passportsArray == nil) {
    result.passportsArray = [[NSMutableArray alloc]init];
  }
  [result.passportsArray addObject:value];
  return self;
}
- (PBPassportChangedNotifyBuilder *)setPassportsArray:(NSArray *)array {
  result.passportsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBPassportChangedNotifyBuilder *)clearPassports {
  result.passportsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
