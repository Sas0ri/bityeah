// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Frame.pb.h"
// @@protoc_insertion_point(imports)

@implementation FrameRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FrameRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PBFrame ()
@property SInt64 passportId;
@property PBFrameCmd cmd;
@property SInt32 sessionId;
@property SInt32 errorCode;
@property (strong) NSString* detail;
@property (strong) NSData* extensionData;
@property SInt64 serverTimestamp;
@property PBFrameApp app;
@property SInt64 parkId;
@end

@implementation PBFrame

- (BOOL) hasPassportId {
  return !!hasPassportId_;
}
- (void) setHasPassportId:(BOOL) value_ {
  hasPassportId_ = !!value_;
}
@synthesize passportId;
- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) value_ {
  hasCmd_ = !!value_;
}
@synthesize cmd;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value_ {
  hasSessionId_ = !!value_;
}
@synthesize sessionId;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) value_ {
  hasErrorCode_ = !!value_;
}
@synthesize errorCode;
- (BOOL) hasDetail {
  return !!hasDetail_;
}
- (void) setHasDetail:(BOOL) value_ {
  hasDetail_ = !!value_;
}
@synthesize detail;
- (BOOL) hasExtensionData {
  return !!hasExtensionData_;
}
- (void) setHasExtensionData:(BOOL) value_ {
  hasExtensionData_ = !!value_;
}
@synthesize extensionData;
- (BOOL) hasServerTimestamp {
  return !!hasServerTimestamp_;
}
- (void) setHasServerTimestamp:(BOOL) value_ {
  hasServerTimestamp_ = !!value_;
}
@synthesize serverTimestamp;
- (BOOL) hasApp {
  return !!hasApp_;
}
- (void) setHasApp:(BOOL) value_ {
  hasApp_ = !!value_;
}
@synthesize app;
- (BOOL) hasParkId {
  return !!hasParkId_;
}
- (void) setHasParkId:(BOOL) value_ {
  hasParkId_ = !!value_;
}
@synthesize parkId;
- (id) init {
  if ((self = [super init])) {
    self.passportId = 0L;
    self.cmd = PBFrameCmdCmdNil;
    self.sessionId = 0;
    self.errorCode = 0;
    self.detail = @"";
    self.extensionData = [NSData data];
    self.serverTimestamp = 0L;
    self.app = PBFrameAppPark;
    self.parkId = 0L;
  }
  return self;
}
static PBFrame* defaultPBFrameInstance = nil;
+ (void) initialize {
  if (self == [PBFrame class]) {
    defaultPBFrameInstance = [[PBFrame alloc] init];
  }
}
+ (PBFrame*) defaultInstance {
  return defaultPBFrameInstance;
}
- (PBFrame*) defaultInstance {
  return defaultPBFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPassportId) {
    [output writeSInt64:1 value:self.passportId];
  }
  if (self.hasCmd) {
    [output writeEnum:2 value:self.cmd];
  }
  if (self.hasSessionId) {
    [output writeSInt32:3 value:self.sessionId];
  }
  if (self.hasErrorCode) {
    [output writeSInt32:4 value:self.errorCode];
  }
  if (self.hasDetail) {
    [output writeString:5 value:self.detail];
  }
  if (self.hasExtensionData) {
    [output writeData:6 value:self.extensionData];
  }
  if (self.hasServerTimestamp) {
    [output writeSInt64:7 value:self.serverTimestamp];
  }
  if (self.hasApp) {
    [output writeEnum:8 value:self.app];
  }
  if (self.hasParkId) {
    [output writeSInt64:9 value:self.parkId];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:100
                                        to:536870912];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPassportId) {
    size_ += computeSInt64Size(1, self.passportId);
  }
  if (self.hasCmd) {
    size_ += computeEnumSize(2, self.cmd);
  }
  if (self.hasSessionId) {
    size_ += computeSInt32Size(3, self.sessionId);
  }
  if (self.hasErrorCode) {
    size_ += computeSInt32Size(4, self.errorCode);
  }
  if (self.hasDetail) {
    size_ += computeStringSize(5, self.detail);
  }
  if (self.hasExtensionData) {
    size_ += computeDataSize(6, self.extensionData);
  }
  if (self.hasServerTimestamp) {
    size_ += computeSInt64Size(7, self.serverTimestamp);
  }
  if (self.hasApp) {
    size_ += computeEnumSize(8, self.app);
  }
  if (self.hasParkId) {
    size_ += computeSInt64Size(9, self.parkId);
  }
  size_ += [self extensionsSerializedSize];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBFrame*) parseFromData:(NSData*) data {
  return (PBFrame*)[[[PBFrame builder] mergeFromData:data] build];
}
+ (PBFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBFrame*) parseFromInputStream:(NSInputStream*) input {
  return (PBFrame*)[[[PBFrame builder] mergeFromInputStream:input] build];
}
+ (PBFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBFrame*)[[[PBFrame builder] mergeFromCodedInputStream:input] build];
}
+ (PBFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBFrame*)[[[PBFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBFrameBuilder*) builder {
  return [[PBFrameBuilder alloc] init];
}
+ (PBFrameBuilder*) builderWithPrototype:(PBFrame*) prototype {
  return [[PBFrame builder] mergeFrom:prototype];
}
- (PBFrameBuilder*) builder {
  return [PBFrame builder];
}
- (PBFrameBuilder*) toBuilder {
  return [PBFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPassportId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passportId", [NSNumber numberWithLongLong:self.passportId]];
  }
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", [NSNumber numberWithInteger:self.cmd]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithInteger:self.sessionId]];
  }
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", [NSNumber numberWithInteger:self.errorCode]];
  }
  if (self.hasDetail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"detail", self.detail];
  }
  if (self.hasExtensionData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extensionData", self.extensionData];
  }
  if (self.hasServerTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTimestamp", [NSNumber numberWithLongLong:self.serverTimestamp]];
  }
  if (self.hasApp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"app", [NSNumber numberWithInteger:self.app]];
  }
  if (self.hasParkId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parkId", [NSNumber numberWithLongLong:self.parkId]];
  }
  [self writeExtensionDescriptionToMutableString:(NSMutableString*)output
                                            from:100
                                              to:536870912
                                      withIndent:indent];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBFrame class]]) {
    return NO;
  }
  PBFrame *otherMessage = other;
  return
      self.hasPassportId == otherMessage.hasPassportId &&
      (!self.hasPassportId || self.passportId == otherMessage.passportId) &&
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || self.cmd == otherMessage.cmd) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      self.hasDetail == otherMessage.hasDetail &&
      (!self.hasDetail || [self.detail isEqual:otherMessage.detail]) &&
      self.hasExtensionData == otherMessage.hasExtensionData &&
      (!self.hasExtensionData || [self.extensionData isEqual:otherMessage.extensionData]) &&
      self.hasServerTimestamp == otherMessage.hasServerTimestamp &&
      (!self.hasServerTimestamp || self.serverTimestamp == otherMessage.serverTimestamp) &&
      self.hasApp == otherMessage.hasApp &&
      (!self.hasApp || self.app == otherMessage.app) &&
      self.hasParkId == otherMessage.hasParkId &&
      (!self.hasParkId || self.parkId == otherMessage.parkId) &&
      [self isEqualExtensionsInOther:otherMessage from:100 to:536870912] &&

      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPassportId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.passportId] hash];
  }
  if (self.hasCmd) {
    hashCode = hashCode * 31 + self.cmd;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sessionId] hash];
  }
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.errorCode] hash];
  }
  if (self.hasDetail) {
    hashCode = hashCode * 31 + [self.detail hash];
  }
  if (self.hasExtensionData) {
    hashCode = hashCode * 31 + [self.extensionData hash];
  }
  if (self.hasServerTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.serverTimestamp] hash];
  }
  if (self.hasApp) {
    hashCode = hashCode * 31 + self.app;
  }
  if (self.hasParkId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.parkId] hash];
  }
  hashCode = hashCode * 31 + [self hashExtensionsFrom:100 to:536870912];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PBFrameCmdIsValidValue(PBFrameCmd value) {
  switch (value) {
    case PBFrameCmdCmdNil:
    case PBFrameCmdCmdFetchPassport:
    case PBFrameCmdCmdFetchChangedPassports:
    case PBFrameCmdCmdPassportChangedNotification:
    case PBFrameCmdCmdFetchRoster:
    case PBFrameCmdCmdFetchChangedRoster:
    case PBFrameCmdCmdFetchRosterRequest:
    case PBFrameCmdCmdRosterChangedNotification:
    case PBFrameCmdCmdRosterRequestNotification:
    case PBFrameCmdCmdFetchGroup:
    case PBFrameCmdCmdFetchGroupAndMembers:
    case PBFrameCmdCmdFetchGroupAndMembersByPassportId:
    case PBFrameCmdCmdFetchChangedGroup:
    case PBFrameCmdCmdGroupChangedNotification:
    case PBFrameCmdCmdFetchCorporation:
    case PBFrameCmdCmdFetchChangedCorporation:
    case PBFrameCmdCmdFetchCorporationByPassportId:
    case PBFrameCmdCmdFetchCorporationStruct:
    case PBFrameCmdCmdCorporationChangedNotification:
    case PBFrameCmdCmdFetchParkMembers:
    case PBFrameCmdCmdFetchUserParksByPassportId:
    case PBFrameCmdCmdParkMembersChangedNotification:
    case PBFrameCmdCmdSendWave:
    case PBFrameCmdCmdSendWaveComment:
    case PBFrameCmdCmdFetchWaveComment:
    case PBFrameCmdCmdDeleteWave:
    case PBFrameCmdCmdDeleteWaveComment:
    case PBFrameCmdCmdClearMyWaveComment:
    case PBFrameCmdCmdFetchWaves:
    case PBFrameCmdCmdFetchWaveIds:
    case PBFrameCmdCmdFetchWaveCommentIds:
    case PBFrameCmdCmdFetchAllWaves:
    case PBFrameCmdCmdFetchUserWaveCount:
    case PBFrameCmdCmdFetchWavesAndComents:
    case PBFrameCmdCmdSendRedPacket:
    case PBFrameCmdCmdRobRedPacket:
    case PBFrameCmdCmdFetchRedPacket:
    case PBFrameCmdCmdFetchRedPacketTicket:
    case PBFrameCmdCmdSetRedPacketTicketReceived:
    case PBFrameCmdCmdFetchRedPackets:
    case PBFrameCmdCmdFetchRedPacketCount:
    case PBFrameCmdCmdFetchRedPacketMyTicketCount:
      return YES;
    default:
      return NO;
  }
}
BOOL PBFrameSessionIdIsValidValue(PBFrameSessionId value) {
  switch (value) {
    case PBFrameSessionIdSessionIdClientMin:
    case PBFrameSessionIdSessionIdClientMax:
    case PBFrameSessionIdSessionIdServerMin:
    case PBFrameSessionIdSessionIdServerMax:
      return YES;
    default:
      return NO;
  }
}
BOOL PBFrameAppIsValidValue(PBFrameApp value) {
  switch (value) {
    case PBFrameAppHuhoo:
    case PBFrameAppPark:
      return YES;
    default:
      return NO;
  }
}
@interface PBFrameBuilder()
@property (strong) PBFrame* result;
@end

@implementation PBFrameBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PBFrame alloc] init];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (PBFrameBuilder*) clear {
  self.result = [[PBFrame alloc] init];
  return self;
}
- (PBFrameBuilder*) clone {
  return [PBFrame builderWithPrototype:result];
}
- (PBFrame*) defaultInstance {
  return [PBFrame defaultInstance];
}
- (PBFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBFrame*) buildPartial {
  PBFrame* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PBFrameBuilder*) mergeFrom:(PBFrame*) other {
  if (other == [PBFrame defaultInstance]) {
    return self;
  }
  if (other.hasPassportId) {
    [self setPassportId:other.passportId];
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  if (other.hasDetail) {
    [self setDetail:other.detail];
  }
  if (other.hasExtensionData) {
    [self setExtensionData:other.extensionData];
  }
  if (other.hasServerTimestamp) {
    [self setServerTimestamp:other.serverTimestamp];
  }
  if (other.hasApp) {
    [self setApp:other.app];
  }
  if (other.hasParkId) {
    [self setParkId:other.parkId];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPassportId:[input readSInt64]];
        break;
      }
      case 16: {
        PBFrameCmd value = (PBFrameCmd)[input readEnum];
        if (PBFrameCmdIsValidValue(value)) {
          [self setCmd:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readSInt32]];
        break;
      }
      case 32: {
        [self setErrorCode:[input readSInt32]];
        break;
      }
      case 42: {
        [self setDetail:[input readString]];
        break;
      }
      case 50: {
        [self setExtensionData:[input readData]];
        break;
      }
      case 56: {
        [self setServerTimestamp:[input readSInt64]];
        break;
      }
      case 64: {
        PBFrameApp value = (PBFrameApp)[input readEnum];
        if (PBFrameAppIsValidValue(value)) {
          [self setApp:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        [self setParkId:[input readSInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasPassportId {
  return result.hasPassportId;
}
- (SInt64) passportId {
  return result.passportId;
}
- (PBFrameBuilder*) setPassportId:(SInt64) value {
  result.hasPassportId = YES;
  result.passportId = value;
  return self;
}
- (PBFrameBuilder*) clearPassportId {
  result.hasPassportId = NO;
  result.passportId = 0L;
  return self;
}
- (BOOL) hasCmd {
  return result.hasCmd;
}
- (PBFrameCmd) cmd {
  return result.cmd;
}
- (PBFrameBuilder*) setCmd:(PBFrameCmd) value {
  result.hasCmd = YES;
  result.cmd = value;
  return self;
}
- (PBFrameBuilder*) clearCmd {
  result.hasCmd = NO;
  result.cmd = PBFrameCmdCmdNil;
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (SInt32) sessionId {
  return result.sessionId;
}
- (PBFrameBuilder*) setSessionId:(SInt32) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (PBFrameBuilder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = 0;
  return self;
}
- (BOOL) hasErrorCode {
  return result.hasErrorCode;
}
- (SInt32) errorCode {
  return result.errorCode;
}
- (PBFrameBuilder*) setErrorCode:(SInt32) value {
  result.hasErrorCode = YES;
  result.errorCode = value;
  return self;
}
- (PBFrameBuilder*) clearErrorCode {
  result.hasErrorCode = NO;
  result.errorCode = 0;
  return self;
}
- (BOOL) hasDetail {
  return result.hasDetail;
}
- (NSString*) detail {
  return result.detail;
}
- (PBFrameBuilder*) setDetail:(NSString*) value {
  result.hasDetail = YES;
  result.detail = value;
  return self;
}
- (PBFrameBuilder*) clearDetail {
  result.hasDetail = NO;
  result.detail = @"";
  return self;
}
- (BOOL) hasExtensionData {
  return result.hasExtensionData;
}
- (NSData*) extensionData {
  return result.extensionData;
}
- (PBFrameBuilder*) setExtensionData:(NSData*) value {
  result.hasExtensionData = YES;
  result.extensionData = value;
  return self;
}
- (PBFrameBuilder*) clearExtensionData {
  result.hasExtensionData = NO;
  result.extensionData = [NSData data];
  return self;
}
- (BOOL) hasServerTimestamp {
  return result.hasServerTimestamp;
}
- (SInt64) serverTimestamp {
  return result.serverTimestamp;
}
- (PBFrameBuilder*) setServerTimestamp:(SInt64) value {
  result.hasServerTimestamp = YES;
  result.serverTimestamp = value;
  return self;
}
- (PBFrameBuilder*) clearServerTimestamp {
  result.hasServerTimestamp = NO;
  result.serverTimestamp = 0L;
  return self;
}
- (BOOL) hasApp {
  return result.hasApp;
}
- (PBFrameApp) app {
  return result.app;
}
- (PBFrameBuilder*) setApp:(PBFrameApp) value {
  result.hasApp = YES;
  result.app = value;
  return self;
}
- (PBFrameBuilder*) clearApp {
  result.hasApp = NO;
  result.app = PBFrameAppPark;
  return self;
}
- (BOOL) hasParkId {
  return result.hasParkId;
}
- (SInt64) parkId {
  return result.parkId;
}
- (PBFrameBuilder*) setParkId:(SInt64) value {
  result.hasParkId = YES;
  result.parkId = value;
  return self;
}
- (PBFrameBuilder*) clearParkId {
  result.hasParkId = NO;
  result.parkId = 0L;
  return self;
}
@end

@interface Int64Array ()
@property (strong) PBAppendableArray * itemsArray;
@end

@implementation Int64Array

@synthesize itemsArray;
@dynamic items;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static Int64Array* defaultInt64ArrayInstance = nil;
+ (void) initialize {
  if (self == [Int64Array class]) {
    defaultInt64ArrayInstance = [[Int64Array alloc] init];
  }
}
+ (Int64Array*) defaultInstance {
  return defaultInt64ArrayInstance;
}
- (Int64Array*) defaultInstance {
  return defaultInt64ArrayInstance;
}
- (PBArray *)items {
  return itemsArray;
}
- (SInt64)itemsAtIndex:(NSUInteger)index {
  return [itemsArray int64AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger itemsArrayCount = self.itemsArray.count;
  if (itemsArrayCount > 0) {
    const SInt64 *values = (const SInt64 *)self.itemsArray.data;
    for (NSUInteger i = 0; i < itemsArrayCount; ++i) {
      [output writeSInt64:1 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.itemsArray.count;
    const SInt64 *values = (const SInt64 *)self.itemsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeSInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Int64Array*) parseFromData:(NSData*) data {
  return (Int64Array*)[[[Int64Array builder] mergeFromData:data] build];
}
+ (Int64Array*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Array*)[[[Int64Array builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Int64Array*) parseFromInputStream:(NSInputStream*) input {
  return (Int64Array*)[[[Int64Array builder] mergeFromInputStream:input] build];
}
+ (Int64Array*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Array*)[[[Int64Array builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int64Array*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Int64Array*)[[[Int64Array builder] mergeFromCodedInputStream:input] build];
}
+ (Int64Array*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Int64Array*)[[[Int64Array builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Int64ArrayBuilder*) builder {
  return [[Int64ArrayBuilder alloc] init];
}
+ (Int64ArrayBuilder*) builderWithPrototype:(Int64Array*) prototype {
  return [[Int64Array builder] mergeFrom:prototype];
}
- (Int64ArrayBuilder*) builder {
  return [Int64Array builder];
}
- (Int64ArrayBuilder*) toBuilder {
  return [Int64Array builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.itemsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"items", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Int64Array class]]) {
    return NO;
  }
  Int64Array *otherMessage = other;
  return
      [self.itemsArray isEqualToArray:otherMessage.itemsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.itemsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Int64ArrayBuilder()
@property (strong) Int64Array* result;
@end

@implementation Int64ArrayBuilder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Int64Array alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Int64ArrayBuilder*) clear {
  self.result = [[Int64Array alloc] init];
  return self;
}
- (Int64ArrayBuilder*) clone {
  return [Int64Array builderWithPrototype:result];
}
- (Int64Array*) defaultInstance {
  return [Int64Array defaultInstance];
}
- (Int64Array*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Int64Array*) buildPartial {
  Int64Array* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Int64ArrayBuilder*) mergeFrom:(Int64Array*) other {
  if (other == [Int64Array defaultInstance]) {
    return self;
  }
  if (other.itemsArray.count > 0) {
    if (result.itemsArray == nil) {
      result.itemsArray = [other.itemsArray copy];
    } else {
      [result.itemsArray appendArray:other.itemsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Int64ArrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Int64ArrayBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addItems:[input readSInt64]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)items {
  return result.itemsArray;
}
- (SInt64)itemsAtIndex:(NSUInteger)index {
  return [result itemsAtIndex:index];
}
- (Int64ArrayBuilder *)addItems:(SInt64)value {
  if (result.itemsArray == nil) {
    result.itemsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt64];
  }
  [result.itemsArray addInt64:value];
  return self;
}
- (Int64ArrayBuilder *)setItemsArray:(NSArray *)array {
  result.itemsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt64];
  return self;
}
- (Int64ArrayBuilder *)setItemsValues:(const SInt64 *)values count:(NSUInteger)count {
  result.itemsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt64];
  return self;
}
- (Int64ArrayBuilder *)clearItems {
  result.itemsArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
